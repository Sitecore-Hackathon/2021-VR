{"version":3,"sources":["registerToolbar.ts","react/components/toolbar/exportProject.tsx","react/components/toolbar/saveProject.tsx","telemetry.ts","providers/export sync /^/.*/.json$","providers/export sync /^/.*/.ui/.json$","providers/export/cntk.ts","services/projectService.ts","redux/actions/projectActions.ts","redux/actions/applicationActions.ts","react/components/common/condensedList/condensedList.tsx","react/components/common/cloudFilePicker/cloudFilePicker.tsx","react/components/common/confirm/confirm.tsx","react/components/common/filePicker/filePicker.tsx","react/components/pages/homepage/recentProjectItem.tsx","services/importService.ts","react/components/pages/homepage/homePage.tsx","react/components/common/customField/customFieldTemplate.tsx","react/components/common/localFolderPicker/localFolderPicker.tsx","react/components/common/customField/customField.tsx","react/components/pages/activeLearning/activeLearningForm.tsx","react/components/pages/activeLearning/activeLearningPage.tsx","react/components/common/objectField/objectFieldTemplate.tsx","react/components/common/arrayField/arrayFieldTemplate.tsx","react/components/common/protectedInput/protectedInput.tsx","react/components/pages/appSettings/appSettingsForm.tsx","react/components/pages/appSettings/appSettingsPage.tsx","services/connectionService.ts","redux/actions/connectionActions.ts","react/components/common/connectionProviderPicker/connectionProviderPicker.tsx","react/components/pages/connections/connectionForm.tsx","react/components/pages/connections/connectionItem.tsx","react/components/pages/connections/connectionsPage.tsx","react/components/common/assetPreview/imageAsset.tsx","react/components/common/videoPlayer/customVideoPlayerButton.tsx","react/components/common/assetPreview/videoAsset.tsx","react/components/common/assetPreview/assetPreview.tsx","react/components/common/tagInput/tagInputItem.tsx","react/components/common/colorPicker.tsx","react/components/common/tagInput/tagInputToolbar.tsx","react/components/common/tagInput/tagInput.tsx","react/components/pages/editorPage/canvasHelpers.ts","common/clipboard.ts","common/layout.ts","react/components/pages/editorPage/canvas.tsx","react/components/pages/editorPage/editorSideBar.tsx","react/components/pages/editorPage/editorToolbar.tsx","providers/activeLearning/electronProxyHandler.ts","providers/activeLearning/objectDetection.ts","services/activeLearningService.ts","react/components/common/externalPicker/externalPicker.tsx","react/components/pages/editorPage/editorPage.tsx","react/components/common/exportProviderPicker/exportProviderPicker.tsx","react/components/common/slider/slider.tsx","react/components/pages/export/exportForm.tsx","react/components/pages/export/exportPage.tsx","react/components/common/connectionPicker/connectionPicker.tsx","react/components/common/securityTokenPicker/securityTokenPicker.tsx","react/components/pages/projectSettings/projectForm.tsx","react/components/pages/projectSettings/projectMetrics.tsx","react/components/pages/projectSettings/projectSettingsPage.tsx","react/components/shell/mainContentRouter.tsx","react/components/common/conditionalNavLink/conditionalNavLink.tsx","react/components/shell/sidebar.tsx","history.ts","serviceWorker.ts","redux/reducers/currentProjectReducer.ts","redux/reducers/index.ts","redux/reducers/applicationReducer.ts","redux/reducers/connectionsReducer.ts","redux/reducers/recentProjectsReducer.ts","redux/reducers/appErrorReducer.ts","redux/store/initialState.ts","providers/storage/bingImageSearch.ts","providers/export/tensorFlowRecords.ts","providers/export/azureCustomVision.ts","providers/export/azureCustomVision/azureCustomVisionService.ts","common/extensions/array.ts","common/extensions/map.ts","index.tsx","registerMixins.ts","registerProviders.ts","redux/store/store.ts","redux/middleware/appInsights.ts","common/deferred.ts","common/ipcRendererProxy.ts","providers/storage/assetProviderFactory.ts","models/applicationState.ts","common/constants.ts","providers/export/tensorFlowRecords/tensorFlowRecordsProtoBuf_pb.js","common/appInfo.ts","react/components/common/keyboardBinding/keyboardBinding.tsx","common/environment.ts","common/guard.ts","common/crypto.ts","providers/storage/localFileSystemProxy.ts","providers/export/tensorFlowRecords/tensorFlowReader.ts","react/components/common/messageBox/messageBox.tsx","providers/export/pascalVOC/pascalVOCTemplates.ts","providers/export/testAssetsSplitHelper.ts","providers/export/tensorFlowRecords/tensorFlowBuilder.ts","common/localization/es-cl.ts","common/localization/ja.ts","common/localization/zh-tw.ts","common/localization/ko-kr.ts","common/localization/zh-ch.ts","common/strings.ts","react/components/common/condensedList/condensedList.scss","common/hostProcess.ts","common/htmlFileReader.ts","providers/storage/azureBlobStorage.ts","redux/actions/appErrorActions.ts","react/components/common/assetPreview/tfrecordAsset.tsx","react/components/common/errorHandler/errorHandler.tsx","services/assetService.ts","react/components/shell/titleBar.tsx","react/components/shell/statusBar.tsx","react/components/shell/statusBarMetrics.tsx","react/components/shell/helpMenu.tsx","providers/export/pascalVOC.ts","providers/export/vottJson.ts","providers/export/csv.ts","redux/actions/actionCreators.ts","react/components/toolbar/toolbarItem.tsx","../ignored D:/Projects-Ram/ML/sc-ml/voTT-app/node_modules/stream-browserify/node_modules/readable-stream/lib util","providers/storage/storageProviderFactory.ts","react/components/pages/homepage/homePage.scss","providers/export/tensorFlowRecords/tensorFlowHelpers.ts","providers/export/exportProvider.ts","react/components/common/keyboardManager/keyboardRegistrationManager.ts","providers/toolbar/toolbarItemFactory.ts","common/utils.ts","providers/storage sync /^/.*/.json$","providers/storage sync /^/.*/.ui/.json$","providers/export/exportProviderFactory.ts"],"names":["ToolbarItemName","ToolbarItemGroup","ExportProject","_ToolbarItem","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","onItemClick","asyncToGenerator","regenerator_default","a","mark","_callee","infoId","results","wrap","_context","prev","next","toast","info","props","project","name","autoClose","actions","exportProject","sent","dismiss","errors","success","warn","completed","count","stop","inherits","ToolbarItem","SaveProject","saveProject","t0","error","registerToolbar","ToolbarItemFactory","register","SelectCanvas","tooltip","strings","editorPage","toolbar","select","icon","group","Canvas","type","ToolbarItemType","State","accelerators","DrawRectangle","drawRectangle","DrawPolygon","drawPolygon","CopyRectangle","copyRectangle","CopyRegions","copy","Regions","Action","CutRegions","cut","PasteRegions","paste","RemoveAllRegions","removeAllRegions","ActiveLearning","activeLearning","PreviousAsset","previousAsset","Navigation","NextAsset","nextAsset","Project","__webpack_require__","d","__webpack_exports__","config","appInsights","instrumentationKey","process","debug","maxBatchSize","setUpAppInsights","isElectron","reactAI","setContext","AppVersion","version","extensions","extensionConfig","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","extensionId","history","ApplicationInsights","loadAppInsights","trackError","appError","exceptionTelemetry","Error","errorCode","properties","message","severityLevel","SeverityLevel","trackException","trackReduxAction","action","trackEvent","Env","get","map","./azureCustomVision.json","./azureCustomVision.ui.json","./cntk.json","./cntk.ui.json","./csv.json","./csv.ui.json","./pascalVOC.json","./pascalVOC.ui.json","./tensorFlowRecords.json","./tensorFlowRecords.ui.json","./vottJson.json","./vottJson.ui.json","webpackContext","req","id","webpackContextResolve","e","code","keys","resolve","module","exports","ExportSplit","CntkExportProvider","_ExportProvider","options","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__","Guard","null","exportFolderName","replace","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_7__","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__","key","value","_export2","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","_callee2","assetsToExport","testAssets","testSplit","splittedAssets","_this2","_context2","createFolderStructure","getAssetsForExport","testTrainSplit","splitTestAsset","tags","push","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","mapAsync","_ref","assetMetadata","exportSplit","find","am","asset","Test","Train","exportAssetFrame","abrupt","_x","filter","r","_exportAssetFrame","_callee3","labelData","boundingBoxData","buffer","folderName","labelsPath","boundingBoxPath","binaryPath","_context3","regions","forEach","region","tagName","boundingBox","left","width","top","height","HtmlFileReader","getAssetArray","Promise","all","storageProvider","writeText","join","os","EOL","writeBinary","Buffer","from","_x2","_x3","_createFolderStructure","_callee5","positiveFolder","negativeFolder","testImagesFolder","_this3","_context5","createContainer","forEachAsync","_ref2","_callee4","folderPath","_context4","_x4","ExportProvider","defaultActiveLearningSettings","autoDetect","predictTag","modelPathType","ModelPathType","Coco","defaultExportOptions","providerType","providerOptions","assetState","ExportAssetState","Visited","includeImages","ProjectService","securityToken","loadedProject","useSecurityToken","decryptProject","objectSpread","activeLearningSettings","exportFormat","ensureBackwardsCompatibility","AppError","ErrorCode","ProjectInvalidSecurityToken","reject","shortid","generate","packageJson","StorageProviderFactory","createFromConnection","targetConnection","saveExportSettings","encryptProject","constants","projectFileExtension","JSON","stringify","deleteFiles","_","values","assets","deleteFile","assetMetadataFileExtension","projectList","undefined","p","exportProvider","ExportProviderFactory","createFromProject","save","toLowerCase","startsWith","loadProject","dispatch","getState","appState","projectService","projectToken","appSettings","securityTokens","SecurityTokenNotFound","load","loadProjectAction","savedProject","isDuplicate","recentProjects","ProjectDuplicateName","saveProjectAction","deleteProject","_ref3","decryptedProject","delete","deleteProjectAction","_x5","_x6","closeProject","ActionTypes","CLOSE_PROJECT_SUCCESS","loadAssets","_ref4","assetService","AssetService","getAssets","loadProjectAssetsAction","_x7","loadAssetMetadata","_ref5","getAssetMetadata","loadAssetMetadataAction","_x8","saveAssetMetadata","newAssetMetadata","appInfo","_ref6","_callee6","savedMetadata","_context6","saveAssetMetadataAction","_x9","updateProjectTag","oldTagName","newTagName","_ref7","_callee8","assetUpdates","currentProject","updatedProject","_context8","renameTag","_ref8","_callee7","_context7","_x12","t","updateProjectTagAction","_x10","_x11","deleteProjectTag","_ref9","_callee10","_context10","deleteTag","_ref10","_callee9","_context9","_x15","deleteProjectTagAction","_x13","_x14","_ref11","_callee11","_context11","ExportFormatNotFound","exportFormatNotFound","create","export","exportProjectAction","_x16","createPayloadAction","LOAD_PROJECT_SUCCESS","closeProjectAction","createAction","SAVE_PROJECT_SUCCESS","DELETE_PROJECT_SUCCESS","LOAD_PROJECT_ASSETS_SUCCESS","LOAD_ASSET_METADATA_SUCCESS","SAVE_ASSET_METADATA_SUCCESS","EXPORT_PROJECT_SUCCESS","UPDATE_PROJECT_TAG_SUCCESS","DELETE_PROJECT_TAG_SUCCESS","toggleDevTools","show","IpcRendererProxy","send","then","toggleDevToolsAction","reloadApplication","refreshApplicationAction","saveAppSettings","saveAppSettingsAction","ensureSecurityToken","updatedAppSettings","st","generateKey","devToolsEnabled","toConsumableArray","ensureSecurityTokenAction","TOGGLE_DEV_TOOLS_SUCCESS","REFRESH_APP_SUCCESS","SAVE_APP_SETTINGS_SUCCESS","ENSURE_SECURITY_TOKEN_SUCCESS","CondensedList","context","item","onClick","onItemDelete","stopPropagation","preventDefault","onDelete","bind","assertThisInitialized","_this$props","title","items","newLinkTo","Component","react_default","createElement","className","Link","to","React","ListItem","CloudFilePicker","_React$Component","open","close","getInitialState","ok","back","connectionList","onClickConnection","fileList","onClickFile","state","createClass","closeBtn","reactstrap_es","isOpen","centered","toggle","modalHeader","condensedList","selectedFile","disabled","okDisabled","backDisabled","setState","onCancel","homePage","openCloudProject","selectConnection","selectedConnection","_ok","content","readText","onSubmit","condensedList_CondensedList","connection","storageType","StorageType","Cloud","connections","isCloudConnection","getCloudConnections","getCondensedList","_onClickConnection","_fileList","files","fileItems","i","listFiles","fileExtension","fileName","Confirm","params","messageBox","createRef","onConfirmClick","onCancelClick","ref","autoFocus","color","confirmButtonColor","confirmButtonText","cancelButtonColor","cancelButtonText","current","onConfirm","FilePicker","upload","fileInput","click","onFileUploaded","target","onError","readAsText","fileInfo","onChange","catch","err","RecentProjectItem","ImportService","projectInfo","originalProject","parse","ProjectInvalidJson","parsedTags","parseTags","generateConnection","file","split","description","sourceConnection","videoSettings","frameExtractionRate","framerate","Number","autoSave","v1Project","v2Project","generatedAssetMetadata","frames","frameName","isVideoProject","generateVideoAssets","generateImageAssets","projectPath","normalizeSlashes","path","frame","filePath","createAssetFromFilePath","getAssetState","createAssetMetadata","createParentVideoAsset","parentVideoAsset","frameInt","timestamp","createVideoFrameAsset","videoFrameAssets","taggedAssets","AssetState","Tagged","parentAssetState","parentAssetMetadata","pathParts","fileNameParts","getAssetType","AssetType","Video","parentAsset","readAssetAttributes","assetProps","size","inputTags","index","tag_colors","tag","metadata","frameRegions","generatedRegion","UID","RegionType","Rectangle","points","x","x1","y","y1","y2","x2","parent","VideoFrame","addRegions","HomePage","connect","bindActionCreators","projectActions","applicationActions","cloudPickerOpen","filePicker","deleteConfirm","cloudFilePicker","importConfirm","createNewProject","handleOpenCloudProjectClick","onProjectFileUpload","projectJson","t1","loadSelectedProject","onProjectFileUploadError","ProjectUploadError","interpolate","messages","deleteSuccess","ProjectDeleteError","convertProject","importService","V1ImportError","generateAssets","href","newProject","openLocalProject","filePicker_FilePicker","cloudFilePicker_CloudFilePicker","confirm_Confirm","confirmation","importProject","CustomFieldTemplate","label","required","rawErrors","schema","uiSchema","children","classNames","htmlFor","react","errorMessage","idx","LocalFolderPicker","selectLocalFolder","localFileSystem","selectContainer","LocalFileSystemProxy","readOnly","providers","local","selectFolder","prevProps","CustomField","Widget","mapProps","widgetProps","CustomWidget","formSchema","addLocValues","require","ActiveLearningForm","_args","formData","settings","widgets","localFolderPicker","checkbox","Checkbox","checked","onFormChange","changeEvent","updatedSettings","modelPath","modelUrl","onFormSubmit","onFormCancel","react_jsonschema_form_lib_default","showErrorList","liveValidate","noHtml5Validate","FieldTemplate","projectSettings","common","cancel","ActiveLearningPage","saveSuccess","goBack","projectId","match","projectToLoad","activeLearningForm_ActiveLearningForm","ObjectFieldTemplate","ArrayFieldTemplate","canAdd","onAddClick","hasRemove","onDropIndexClick","ProtectedInput","inputElement","showKey","toggleKeyVisibility","copyKey","_this$state","input","_copyKey","clipboard","navigator","AppSettingsForm","fields","idSchema","$id","onFormValidate","validate","form","indexOf","AppSettingsPage","reloadApp","appSettingsForm_AppSettingsForm","commit","REACT_APP_COMMIT_SHA","devTools","button","reload","ConnectionService","assetProvider","AssetProviderFactory","initialize","loadConnection","loadConnectionAction","saveConnection","connectionService","saveConnectionAction","deleteConnection","deleteConnectionAction","LOAD_CONNECTION_SUCCESS","SAVE_CONNECTION_SUCCESS","DELETE_CONNECTION_SUCCESS","ConnectionProviderPicker","storageProviders","assetProviders","allProviders","uniqBy","orderBy","provider","displayName","ConnectionForm","connectionProviderPicker","protectedInput","providerName","bindForm","isBrowser","role","aria-hidden","imageCorsWarning","formatString","blobCorsWarning","azDocLinkText","addError","resetProviderOptions","newFormSchema","newUiSchema","providerSchema","providerUiSchema","ConnectionItem","NavLink","ConnectionPage","connectionActions","componentDidUpdate","prevConnectionId","newConnectionId","onConnectionDelete","addDefaultPropsIfNewConnection","confirmDelete","connectionId","Route","exact","render","instructions","connectionForm_ConnectionForm","addDefaultPropsToNewConnection","ImageAsset","image","onLoad","onLoaded","onActivated","onDeactivated","src","crossOrigin","CustomVideoPlayerButton","keyboardBinding","keyEventType","KeyEventType","KeyDown","handler","VideoAsset","loaded","videoPlayer","timelineElement","movePreviousTaggedFrame","currentTime","getVideoPlayerState","previousFrame","reverse","childAssets","seekToTime","moveNextTaggedFrame","nextFrame","moveNextExpectedFrame","seekTime","additionalSettings","movePreviousExpectedFrame","playerState","onBeforeAssetChanged","paused","pause","seek","onVideoStateChange","readyState","seeking","raiseActivated","isValidKeyFrame","raiseChildAssetSelected","raiseDeactivated","raiseLoaded","autoPlay","play","video","addAssetTimelineTags","duration","onChildAssetSelected","rootAsset","childPath","childAsset","NotVisited","keyFrameTime","Math","round","toFixed","videoDuration","assetTimelineTagLines","renderTimeline","document","querySelector","progressHolderElement","appendChild","ReactDOM","renderChildAssetMarker","childPosition","style","player","videoPath","video_react_lib","fluid","position","autoHide","controlsEnabled","customVideoPlayerButton_CustomVideoPlayerButton","order","previousExpectedFrame","nextExpectedFrame","rates","enabled","previousTaggedFrame","nextTaggedFrame","subscribeToStateChange","defaultProps","AssetPreview","hasError","renderAsset","Image","imageAsset_ImageAsset","onAssetLoad","videoAsset_VideoAsset","TFRecord","tfrecordAsset","assetError","contentSource","onAssetChanged","TagEditMode","ColorPicker","pickerBackground","onEditColor","hex","GithubPicker","react_color_lib","onChangeComplete","colors","styles","default","card","background","triangle","CirclePicker","circleSize","TagInputItem","isBeingEdited","isLocked","tagEditMode","onColorClick","ctrlKey","metaKey","altKey","Color","clickedColor","onNameClick","Name","getItemClassName","isSelected","appliedToSelectedRegions","getTagContent","displayIndex","getDisplayIndex","getContentClassName","defaultValue","onKeyDown","handleNameEdit","TagInputToolbar","onToolbarItemClick","itemConfig","getToolbarItems","add","handleAdd","search","handleSearch","lock","handleLock","edit","handleEdit","moveUp","handleArrowUp","moveDown","handleArrowDown","handleDelete","onAddTags","onSearchTags","onLockTag","selectedTag","onEditTag","onReorder","tagColors","defaultDOMNode","TagInput","showColorPicker","addTags","showTagInputBox","searchTags","showSearchBox","searchQuery","editingTag","editingTagNode","portalElement","tagItemRefs","Map","portalDiv","getTagNode","itemRef","findDOMNode","newEditingTag","lockedTags","onLockedTagsChange","onReOrder","displacement","currentIndex","newIndex","splice","handleColorChange","updateTag","newTag","nameChange","some","warnings","existingName","onTagRenamed","emptyName","getColorPickerPortal","createPortal","rc_align_es","align","getAlignConfig","getTarget","colorPicker_ColorPicker","coords","getEditingTagCoords","isNearBottom","window","innerHeight","alignCorner","verticalOffset","offset","node","getBoundingClientRect","renderTagItems","createTagItemProps","query","clear","prop","includes","tagInputItem_TagInputItem","assign","setTagItemRef","set","selectedRegionTagSet","getSelectedRegionTagSet","findIndex","has","handleClick","result","Set","selectedRegions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","return","onAltClick","onCtrlTagClick","inEditMode","alreadySelected","onTagClick","onTagDeleted","getNewSelectedTag","l","lockedTag","previouIndex","min","onSearchKeyDown","event","onAddTagKeyDown","getNextColor","addTag","lastColor","lastIndex","randomIntInRange","tagInputToolbar_TagInputToolbar","placeholder","body","removeChild","CanvasHelpers","existingTag","newTags","addIfMissing","updates","_loop","update","RegionData","point","Point2D","regionTypeToType","regionData","regionType","area","projectTags","projectTag","Tag","TagsDescriptor","pasteMargin","RegionDataType","Rect","Polygon","Point","Polyline","duplicateRegionsAndMove","others","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","shiftCoordinates","getShiftCoordinates","newRegion","shiftBoundingBox","shiftPoints","boundingBoxWithin","fromBoundingBox","existsRegionAt","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","otherRegions","defaultTargetX","PasteRegionTooBig","pasteRegionTooBigError","foundRegionAtTarget","tempBoundingBox","Clipboard","text","createLandscapeBoundingBox","aspectRatio","offsetWidth","offsetLeft","offsetTop","offsetHeight","createPortraitBoundingBox","currentAsset","selectedAsset","canvasZone","clearConfirm","template","componentDidMount","sz","getElementById","editor","CanvasTools","Editor","autoResize","onSelectionEnd","onRegionMoveEnd","onRegionDelete","onRegionSelected","AS","setSelectionMode","mode","selectionMode","addEventListener","onWindowResize","prevState","SelectionMode","COPYRECT","refreshCanvasToolsRegions","updateCanvasToolsRegionTags","setContentSource","enable","onSelectedRegionsChanged","getSelectedRegions","disable","clearAllRegions","NONE","canvas","renderChildren","applyTag","lockedTagsEmpty","regionsEmpty","transformer","toggleTag","removeIfContained","selectedRegion","updateRegions","copyRegions","writeObject","cutRegions","deleteRegions","pasteRegions","regionsToPaste","duplicates","readObject","confirmRemoveAllRegions","RM","getSelectedRegionsBounds","rb","updateTagsById","getTagsDescriptor","forceResize","ids","deleteRegionById","deleteRegionsFromAsset","addRegionsToCanvasTools","addRegionsToAsset","updateAssetRegions","getRegionData","scaledRegionData","scaleRegionToFrameSize","addRegion","deleteRegionsFromCanvasTools","filteredRegions","assetRegion","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","isEmpty","scaleRegionToSourceSize","editorModeToType","editorMode","onAssetMetadataChanged","currentRegions","movedRegionIndex","movedRegion","deletedRegionIndex","multiSelect","selectedRegionsData","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","addAllIfMissing","cloneElement","onAssetLoaded","onAssetError","onAssetActivated","onAssetDeactivated","positionCanvas","addContentSource","onCanvasRendered","console","HTMLVideoElement","videoWidth","videoHeight","HTMLImageElement","naturalWidth","naturalHeight","createContentBoundingBox","resize","updatedRegions","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","deleteAllRegions","loadedRegionData","EditorMode","CopyRect","removeEventListener","Select","EditorSideBar","scrollToIndex","listRef","getRowHeight","selectAsset","forceUpdateGrid","onAssetClicked","onBeforeAssetSelected","onAssetSelected","rowRenderer","getAssetCssClassNames","renderBadges","assetPreview_AssetPreview","tagged","visited","cssClasses","dist_es","rowCount","rowHeight","overscanRowCount","thumbnailSize","recomputeRowHeights","EditorToolbar","selectedItem","onToolbarItemSelected","toolbarItem","groups","groupBy","registration","toolbarItemProps","active","isComponentActive","component","selected","componentRegistration","ElectronProxyHandler","relativePath","_load","modelJSON","modelArtifacts","weightSpecs","weightData","modelTopology","weightsManifest","loadWeights","slicedToArray","_loadClasses","json","_loadWeights","buffers","shardName","paths","readBinary","finish","weights","toArrayBuffer","buf","isArray","totalLength","ab","ArrayBuffer","view","Uint8Array","pos","slice","byteOffset","byteLength","ObjectDetection","modelLoaded","model","dispose","modelFolderPath","response","tf","axios","jsonClasses","data","loadClasses","executeAsync","_predictImage","xRatio","yRatio","detect","prediction","max","bbox","class","_detect","img","maxNumBoxes","_args5","infer","_infer","batched","scores","boxes","_this$calculateMaxSco","_this$calculateMaxSco2","maxScores","classes","prevBackend","indexTensor","indexes","_args6","fromPixels","expandDims","shape","dataSync","calculateMaxScores","boxes2","nonMaxSuppression","buildDetectedObjects","objects","j","minY","minX","maxY","maxX","getClass","score","classId","classObject","unknownTagName","numBoxes","numClasses","maxes","MIN_VALUE","ActiveLearningService","getAppPath","remote","app","objectDetection","_predictRegions","predictedRegions","ensureModelLoaded","predictImage","matchingRegion","predicted","_ensureModelLoaded","loadModel","_loadModel","appPath","File","FilterOperator","EditorPage","RECT","isValid","showInvalidRegionWarning","activeLearningService","loadingProjectAssets","toolbarItems","renameTagConfirm","deleteTagConfirm","onPageClick","onSideBarResize","newWidth","onSideBarResizeComplete","onTagClicked","confirmTagRenamed","confirmTagDeleted","onCtrlTagClicked","locked","getTagFromKeyboardEvent","parseInt","isNaN","handleTagHotKey","handleCtrlTagHotKey","isTaggableAssetType","Unknown","initialState","rootAssetMetadata","assetIndex","getChildAssets","predictRegions","onTagsChanged","onLockedTagsChanged","POLYGON","goToRootAsset","toastId","updatedAssetMetadata","isModelLoaded","loadingModel","errorLoadModel","ActiveLearningPredictionError","direction","selectedRootAsset","loadProjectAssets","_callee13","rootProjectAssets","sourceAssets","rootAssets","lastVisited","_context13","lastVisitedAssetId","_callee12","_context12","updateRootAssets","updatedAssets","projectAsset","hotKey","index_esm","defaultSize","minSize","maxSize","paneStyle","display","onDragFinished","editorSideBar_EditorSideBar","editorToolbar_EditorToolbar","canvas_Canvas","tagInput_TagInput","rename","alert_alert","enforceTaggedRegions","closeButtonColor","onClose","ExportProviderPicker","exportProviders","ExternalPicker","bindExternalData","uiOptions","customHeaders","authHeaderValue","rawItems","_items","authHeaderName","method","url","headers","request","filterPredicate","keySelector","valueSelector","formContext","right","operator","Equals","GreaterThan","LessThan","Slider","rc_slider_es","ExportForm","externalPicker","exportProviderPicker","slider","defaultProvider","providerDefaults","getDefaultFormState","saveSettings","ExportPage","emptyExportFormat","All","projectToUpdate","exportForm_ExportForm","ConnectionPicker","getConnectionText","createConnection","selectedValue","ConnectionPickerWithRouter","withRouter","SecurityTokenPicker","ProjectForm","tagsInput","tagEditorModal","onTagShiftClick","onTagModalOk","dist_lib","onOk","tagNameText","modal","tagColorText","saveText","cancelText","targetConnections","isRegistered","TagsInput","placeHolder","onShiftTagClick","oldTag","ProjectMetrics","loading","hoveredCell","projectAssetsMetadata","refresh","forceUpdate","getTaggedAssetCount","m","getAverageTagCount","taggedAssetCount","getAllTagReferences","getVisitedAssetsCount","getRegionsCount","getRegions","getSourceAssetCount","getTagsCounts","keyBy","tagReferences","tagMetric","assetsMetadata","flatten","getAssetsAndMetadata","projectMetrics","renderMetrics","radius","truedAngle","angle","angle0","cos","sin","sourceAssetCount","visitedAssetCount","assetChartSize","innerWidth","assetChartData","animation","visitedAssets","bigness","clr","dontRotateLabel","nonTaggedAssets","nonVisitedAssets","labelStyle","fontSize","fontWeight","tagChartData","legend","assetsSectionTitle","totalAssetCount","react_vis_es","stroke","onValueMouseOver","v","onValueMouseOut","margin","bottom","getLabel","getSize","getColor","padAngle","hideRootNode","buildValue","tagsSectionTitle","totalTagCount","totalRegionCount","avgTagCountPerAsset","xType","colorType","tickLabelAngle","assetsMap","projectFormKey","ProjectSettingsPage","isPartialProject","localStorage","setItem","isNew","removeItem","getItem","projectForm_ProjectForm","projectMetrics_ProjectMetrics","MainContentRouter","Switch","ConditionalNavLink","objectWithoutProperties","Sidebar","history__WEBPACK_IMPORTED_MODULE_0__","createHashHistory","Boolean","location","hostname","combineReducers","payload","assetTags","updateTags","SHOW_ERROR","CLEAR_ERROR","BingImageSearchAspectRatio","BingImageSearchLicenseType","BingImageSearchSize","TFRecordsExportProvider","allAssets","exportPBTXT","exportRecords","_exportRecords","element","exportSingleRecord","_exportSingleRecord","arrayBuffer","imageBuffer","image64","imageInfo","builder","fileNamePath","btoa","reduce","byte","String","fromCharCode","xmin","ymin","xmax","ymax","difficult","truncated","updateImageSizeInfo","updateAssetTagArrays","TFRecordsBuilder","addFeature","FeatureType","Int64","CryptoJS","SHA256","toString","enc","Base64","Binary","pop","addArrayFeature","Float","writeTFRecords","build","log","_writeTFRecords","tfRecords","buildTFRecords","_updateImageSizeInfo","readAssetAttributesWithBuffer","_this4","_exportPBTXT","pbtxtFileName","itemTemplate","BingImageSearch","_getAssets","baseUrl","apiUrl","q","aspect","license","licenseType","endpoint","DefaultApiUrl","createQueryString","Ocp-Apim-Subscription-Key","apiKey","Accept","contentUrl","NewOrExisting","AzureRegion","AzureCustomVisionService","_create","urlParams","projectType","domainId","classificationType","post","createRequestConfig","status","_getProjectTags","empty","_createTag","_createImage","contents","images","_createRegions","Training-key","AzureCustomVisionProvider","SouthCentralUS","cusomVisionServiceOptions","customVisionService","customVisionTags","tagMap","syncTags","uploadAsset","_save","customVisionOptions","customVisionProject","newOrExisting","Existing","_syncTags","customVisionTagNames","createTagTasks","getProjectTags","createTag","_uploadAsset","blob","newImage","allRegions","getAssetBlob","createImage","customVisionTag","getBoundingBoxValue","imageId","tagId","createRegions","_forEachAsync","batchSize","batch","tasks","expression","_mapAsync","batchResults","_args2","extensions_map_forEachAsync","entries","prototype","arrayForEachAsync","mapForEachAsync","platformSupport","HostProcessType","Electron","factory","azureBlob","AzureBlobStorage","bing","vottJson","VottJsonExportProvider","pascalVoc","PascalVOCExportProvider","azureCV","cntk","csv","CsvExportProvider","store","useLocalStorage","middlewares","thunk","storage","createLocalStorage","logger","reduxImmutableStateInvariant","createLogger","createStore","rootReducer","mergeInitialState","applyMiddleware","createReduxStore","es","App","serviceWorker","ready","unregister","Deferred","promise","initialized","ipcRenderer","on","sender","deferred","pending","outgoingArgs","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","nameOrOptions","getHostProcess","providerRegistry","registrationOptions","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_Error","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4__","exportFileExtension","jspb","goog","global","Function","exportSymbol","proto","tensorflow","BytesList","opt_data","Message","repeatedFields_","DEBUG","COMPILED","GENERATE_TO_OBJECT","toObject","opt_includeInstance","includeInstance","msg","obj","valueList","getValueList_asB64","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","readBytes","addValue","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","f","getValueList_asU8","writeRepeatedBytes","getValueList","getRepeatedField","bytesListAsB64","bytesListAsU8","setValueList","setField","opt_index","addToRepeatedField","clearValueList","FloatList","getRepeatedFloatingPointField","readPackedFloat","writePackedFloat","Int64List","readPackedInt64","writePackedInt64","Feature","oneofGroups_","KindCase","KIND_NOT_SET","BYTES_LIST","FLOAT_LIST","INT64_LIST","getKindCase","computeOneofCase","bytesList","getBytesList","floatList","getFloatList","int64List","getInt64List","readMessage","setBytesList","setFloatList","setInt64List","writeMessage","getWrapperField","setOneofWrapperField","clearBytesList","hasBytesList","getField","clearFloatList","hasFloatList","clearInt64List","hasInt64List","Features","featureMap","getFeatureMap","readString","getLength","writeString","opt_noLazyCreate","getMapField","clearFeatureMap","FeatureList","featureList","toObjectList","getFeatureList","writeRepeatedMessage","getRepeatedWrapperField","setFeatureList","setRepeatedWrapperField","opt_value","addToRepeatedWrapperField","clearFeatureList","FeatureLists","featureListMap","getFeatureListMap","clearFeatureListMap","TFRecordsImageMessage","getContext","featureLists","getFeatureLists","setFeatureLists","setWrapperField","clearContext","hasContext","clearFeatureLists","hasFeatureLists","object","extend","KeyboardBinding","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","keyboard","deregisterBinding","registerBinding","contextType","KeyboardContext","paramName","trim","predicate","encryptObject","decryptObject","crypto_js__WEBPACK_IMPORTED_MODULE_0__","_guard__WEBPACK_IMPORTED_MODULE_1__","keySize","lib","WordArray","random","secret","secretBytes","iv","ciphertext","AES","encrypt","words","Utf8","encodedMessage","Hex","cipherParams","CipherParams","decrypt","PROXY_NAME","ext","_this$options","TFRecordsReader","tfrecords","imageMessages","lengthBuffer","dataLength","readInt64","lengthCrc","maskCrc","crc32c","expectedLengthCrc","readUInt32LE","dataBuffer","dataCrc","expectedDataCrc","imageMessage","recordPos","feature","textDecode","array","MessageBox","getMessage","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","isRendered","isButtonSelected","onFooterClick","onClosed","react__WEBPACK_IMPORTED_MODULE_6___default","reactstrap__WEBPACK_IMPORTED_MODULE_7__","hideFooter","evt","htmlElement","onButtonSelect","annotationTemplate","objectTemplate","testSplitRatio","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","record","n","LocalizedStrings","appName","submit","titleBar","help","minimize","maximize","restore","storageTitle","uiHelp","addConnection","white","gray","red","maroon","yellow","olive","lime","green","aqua","teal","blue","navy","fuschia","purple","details","accountName","containerName","sas","square","wide","tall","any","public","share","shareCommercially","modify","modifyCommercially","small","medium","large","wallpaper","chooseFolder","pan","escape","australiaEast","centralIndia","eastUs","eastUs2","japanEast","northCentralUs","northEurope","southCentralUs","southeastAsia","ukSouth","westUs2","westEurope","multiLabel","multiClass","new","existing","classification","exportUnassigned","preTrained","customFilePath","customWebUrl","profile","unknown","projectUploadError","genericRenderError","projectInvalidSecurityToken","projectInvalidJson","projectDeleteError","securityTokenNotFound","canvasError","importError","activeLearningPredictionError","chinesetw","korean","chinese","en","interpolateJson","names","vals","construct","PlatformType","endsWith","561","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_azure_storage_blob__WEBPACK_IMPORTED_MODULE_6__","_azure_storage_blob__WEBPACK_IMPORTED_MODULE_11__","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","_initialize","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","listContainers","_class","react__WEBPACK_IMPORTED_MODULE_5___default","react__WEBPACK_IMPORTED_MODULE_5__","_react_components_shell_mainContentRouter__WEBPACK_IMPORTED_MODULE_10__","_react_components_shell_titleBar__WEBPACK_IMPORTED_MODULE_18__","_react_components_shell_statusBar__WEBPACK_IMPORTED_MODULE_19__","_react_components_shell_statusBarMetrics__WEBPACK_IMPORTED_MODULE_20__","_react_components_shell_helpMenu__WEBPACK_IMPORTED_MODULE_21__","_history__WEBPACK_IMPORTED_MODULE_22__","redux__WEBPACK_IMPORTED_MODULE_15__","_redux_actions_appErrorActions__WEBPACK_IMPORTED_MODULE_14__","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__","showError","showErrorAction","_actionCreators__WEBPACK_IMPORTED_MODULE_0__","isReactDnDError","clearErrorAction","reason","handleError","detail","normalizedPath","assetFilePath","encodeFileURI","assetIdentifier","md5Hash","MD5","digest","_common_strings__WEBPACK_IMPORTED_MODULE_8__","getUnknownErrorMessage","_reason","_models_applicationState__WEBPACK_IMPORTED_MODULE_7__","_telemetry__WEBPACK_IMPORTED_MODULE_11__","_common_environment__WEBPACK_IMPORTED_MODULE_10__","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","D_Projects_Ram_ML_sc_ml_voTT_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__","md5_js__WEBPACK_IMPORTED_MODULE_5___default","md5_js__WEBPACK_IMPORTED_MODULE_5__","shortid__WEBPACK_IMPORTED_MODULE_7__","_models_applicationState__WEBPACK_IMPORTED_MODULE_9__","_common_htmlFileReader__WEBPACK_IMPORTED_MODULE_13__","TitleBar","_common_guard__WEBPACK_IMPORTED_MODULE_8__","_common_constants__WEBPACK_IMPORTED_MODULE_12__","StatusBar","foundTag","_getRegionsFromTFRecord","objectArray","getTFRecordMetadata","react__WEBPACK_IMPORTED_MODULE_6__","HelpMenu","exportImages","getAssetTagArray","_common_messageBox_messageBox__WEBPACK_IMPORTED_MODULE_6__","_common_strings__WEBPACK_IMPORTED_MODULE_7__","_common_keyboardBinding_keyboardBinding__WEBPACK_IMPORTED_MODULE_9__","imagesInfo","getHelpBody","registrations","getRegistrations","_common_keyboardManager_keyboardManager__WEBPACK_IMPORTED_MODULE_8__","groupKeys","getRegistrationRow","allKeys","caseConsolidatedKeys","consolidateKeyCasings","alreadyGrouped","_key2","otherKey","bindingEquals","lowerRegistrations","_key3","lowerKey","keyRegistration","stringifyGroup","binding1","binding2","imageSetsFolderName","appliedTags","exportImageSets","_exportImages","jpegImagesFolderName","imageFileName","tagObjects","exportObject","lodash__WEBPACK_IMPORTED_MODULE_8__","lodash__WEBPACK_IMPORTED_MODULE_8___default","_exportProvider__WEBPACK_IMPORTED_MODULE_9__","dataItem","_common_constants__WEBPACK_IMPORTED_MODULE_11__","Parser","_common_htmlFileReader__WEBPACK_IMPORTED_MODULE_12__","_common_guard__WEBPACK_IMPORTED_MODULE_3__","_common_hostProcess__WEBPACK_IMPORTED_MODULE_4__","initialValue","textEncode","c","table","RangeError","crc","_common_guard__WEBPACK_IMPORTED_MODULE_0__","pow","getInt32Buffer","assetProviderInstance","value32","_getAssetsForExport","keyCode","keyEventTypeRegs","getProjectAssets","getAllAssets","getAssetsFunc","projectAssets","t2","_models_applicationState__WEBPACK_IMPORTED_MODULE_5__","t3","865","866","_crypto__WEBPACK_IMPORTED_MODULE_2__","parts","getOwnPropertyNames","encodeURIComponent","additionalEncodings","encodings","#","?","encodedURI","encodeURI","encrypted","encryptProviderOptions","decrypted","decryptProviderOptions","874"],"mappings":"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","file":"static/js/main.c00f4e45.chunk.js","sourcesContent":["import { ToolbarItemFactory } from \"./providers/toolbar/toolbarItemFactory\";\r\nimport { ExportProject } from \"./react/components/toolbar/exportProject\";\r\nimport { SaveProject } from \"./react/components/toolbar/saveProject\";\r\nimport { ToolbarItemType } from \"./react/components/toolbar/toolbarItem\";\r\nimport { strings } from \"./common/strings\";\r\n\r\nexport enum ToolbarItemName {\r\n    SelectCanvas = \"selectCanvas\",\r\n    DrawRectangle = \"drawRectangle\",\r\n    DrawPolygon = \"drawPolygon\",\r\n    CopyRectangle = \"copyRectangle\",\r\n    CopyRegions = \"copyRegions\",\r\n    CutRegions = \"cutRegions\",\r\n    PasteRegions = \"pasteRegions\",\r\n    RemoveAllRegions = \"removeAllRegions\",\r\n    PreviousAsset = \"navigatePreviousAsset\",\r\n    NextAsset = \"navigateNextAsset\",\r\n    SaveProject = \"saveProject\",\r\n    ExportProject = \"exportProject\",\r\n    ActiveLearning = \"activeLearning\",\r\n}\r\n\r\nexport enum ToolbarItemGroup {\r\n    Canvas = \"canvas\",\r\n    Regions = \"regions\",\r\n    Navigation = \"navigation\",\r\n    Project = \"project\",\r\n}\r\n\r\n/**\r\n * Registers items for toolbar\r\n */\r\nexport default function registerToolbar() {\r\n    ToolbarItemFactory.register({\r\n        name: ToolbarItemName.SelectCanvas,\r\n        tooltip: strings.editorPage.toolbar.select,\r\n        icon: \"fa-mouse-pointer\",\r\n        group: ToolbarItemGroup.Canvas,\r\n        type: ToolbarItemType.State,\r\n        accelerators: [\"V\", \"v\"],\r\n    });\r\n\r\n    ToolbarItemFactory.register({\r\n        name: ToolbarItemName.DrawRectangle,\r\n        tooltip: strings.editorPage.toolbar.drawRectangle,\r\n        icon: \"fa-vector-square\",\r\n        group: ToolbarItemGroup.Canvas,\r\n        type: ToolbarItemType.State,\r\n        accelerators: [\"R\", \"r\"],\r\n    });\r\n\r\n    ToolbarItemFactory.register({\r\n        name: ToolbarItemName.DrawPolygon,\r\n        tooltip: strings.editorPage.toolbar.drawPolygon,\r\n        icon: \"fa-draw-polygon\",\r\n        group: ToolbarItemGroup.Canvas,\r\n        type: ToolbarItemType.State,\r\n        accelerators: [\"P\", \"p\"],\r\n    });\r\n\r\n    ToolbarItemFactory.register({\r\n        name: ToolbarItemName.CopyRectangle,\r\n        tooltip: strings.editorPage.toolbar.copyRectangle,\r\n        icon: \"far fa-clone\",\r\n        group: ToolbarItemGroup.Canvas,\r\n        type: ToolbarItemType.State,\r\n        accelerators: [\"CmdOrCtrl+W\", \"CmdOrCtrl+w\"],\r\n    });\r\n\r\n    ToolbarItemFactory.register({\r\n        name: ToolbarItemName.CopyRegions,\r\n        tooltip: strings.editorPage.toolbar.copy,\r\n        icon: \"fa-copy\",\r\n        group: ToolbarItemGroup.Regions,\r\n        type: ToolbarItemType.Action,\r\n        accelerators: [\"CmdOrCtrl+C\", \"CmdOrCtrl+c\"],\r\n    });\r\n\r\n    ToolbarItemFactory.register({\r\n        name: ToolbarItemName.CutRegions,\r\n        tooltip: strings.editorPage.toolbar.cut,\r\n        icon: \"fa-cut\",\r\n        group: ToolbarItemGroup.Regions,\r\n        type: ToolbarItemType.Action,\r\n        accelerators: [\"CmdOrCtrl+X\", \"CmdOrCtrl+x\"],\r\n    });\r\n\r\n    ToolbarItemFactory.register({\r\n        name: ToolbarItemName.PasteRegions,\r\n        tooltip: strings.editorPage.toolbar.paste,\r\n        icon: \"fa-paste\",\r\n        group: ToolbarItemGroup.Regions,\r\n        type: ToolbarItemType.Action,\r\n        accelerators: [\"CmdOrCtrl+V\", \"CmdOrCtrl+v\"],\r\n    });\r\n\r\n    ToolbarItemFactory.register({\r\n        name: ToolbarItemName.RemoveAllRegions,\r\n        tooltip: strings.editorPage.toolbar.removeAllRegions,\r\n        icon: \"fa-ban\",\r\n        group: ToolbarItemGroup.Regions,\r\n        type: ToolbarItemType.Action,\r\n        accelerators: [\"CmdOrCtrl+Delete\", \"CmdOrCtrl+Backspace\"],\r\n    });\r\n\r\n    ToolbarItemFactory.register({\r\n        name: ToolbarItemName.ActiveLearning,\r\n        tooltip: strings.editorPage.toolbar.activeLearning,\r\n        icon: \"fas fa-graduation-cap\",\r\n        group: ToolbarItemGroup.Canvas,\r\n        type: ToolbarItemType.Action,\r\n        accelerators: [\"CmdOrCtrl+D\", \"CmdOrCtrl+d\"],\r\n    });\r\n\r\n    ToolbarItemFactory.register({\r\n        name: ToolbarItemName.PreviousAsset,\r\n        tooltip: strings.editorPage.toolbar.previousAsset,\r\n        icon: \"fas fa-arrow-circle-up\",\r\n        group: ToolbarItemGroup.Navigation,\r\n        type: ToolbarItemType.Action,\r\n        accelerators: [\"ArrowUp\", \"W\", \"w\"],\r\n    });\r\n\r\n    ToolbarItemFactory.register({\r\n        name: ToolbarItemName.NextAsset,\r\n        tooltip: strings.editorPage.toolbar.nextAsset,\r\n        icon: \"fas fa-arrow-circle-down\",\r\n        group: ToolbarItemGroup.Navigation,\r\n        type: ToolbarItemType.Action,\r\n        accelerators: [\"ArrowDown\", \"S\", \"s\"],\r\n    });\r\n\r\n    ToolbarItemFactory.register({\r\n        name: ToolbarItemName.SaveProject,\r\n        tooltip: strings.editorPage.toolbar.saveProject,\r\n        icon: \"fa-save\",\r\n        group: ToolbarItemGroup.Project,\r\n        type: ToolbarItemType.Action,\r\n        accelerators: [\"CmdOrCtrl+S\", \"CmdOrCtrl+s\"],\r\n    }, SaveProject);\r\n\r\n    ToolbarItemFactory.register({\r\n        name: ToolbarItemName.ExportProject,\r\n        tooltip: strings.editorPage.toolbar.exportProject,\r\n        icon: \"fa-external-link-square-alt\",\r\n        group: ToolbarItemGroup.Project,\r\n        type: ToolbarItemType.Action,\r\n        accelerators: [\"CmdOrCtrl+E\", \"CmdOrCtrl+e\"],\r\n    }, ExportProject);\r\n}\r\n","import { ToolbarItem } from \"./toolbarItem\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n/**\r\n * @name - Export Project\r\n * @description - Toolbar item to export current project\r\n */\r\nexport class ExportProject extends ToolbarItem {\r\n    protected onItemClick = async () => {\r\n        const infoId = toast.info(`Started export for ${this.props.project.name}...`, { autoClose: false });\r\n        const results = await this.props.actions.exportProject(this.props.project);\r\n\r\n        toast.dismiss(infoId);\r\n\r\n        if (!results || (results && results.errors.length === 0)) {\r\n            toast.success(`Export completed successfully!`);\r\n        } else if (results && results.errors.length > 0) {\r\n            toast.warn(`Successfully exported ${results.completed.length}/${results.count} assets`);\r\n        }\r\n    }\r\n}\r\n","import { ToolbarItem } from \"./toolbarItem\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n/**\r\n * @name - Save Project\r\n * @description - Toolbar item to save current project\r\n */\r\nexport class SaveProject extends ToolbarItem {\r\n    protected onItemClick = async () => {\r\n        try {\r\n            await this.props.actions.saveProject(this.props.project);\r\n            toast.success(`${this.props.project.name} saved successfully!`);\r\n        } catch (e) {\r\n            toast.error(`Error saving ${this.props.project.name}`);\r\n        }\r\n    }\r\n}\r\n","import { Env } from \"./common/environment\";\r\nimport { reactAI } from \"react-appinsights\";\r\nimport history from \"./history\";\r\nimport { ApplicationInsights, IExceptionTelemetry, SeverityLevel } from \"@microsoft/applicationinsights-web\";\r\nimport { version } from \"../package.json\";\r\nimport { isElectron } from \"./common/hostProcess\";\r\nimport { Action } from \"redux\";\r\nimport { IAppError } from \"./models/applicationState\";\r\nimport { config } from \"dotenv\";\r\n\r\n// vott-app-insights\r\nconfig();\r\nconst instrumentationKey = process.env.REACT_APP_INSTRUMENTATION_KEY;\r\n\r\nlet debug = false;\r\nlet maxBatchSize = 250;\r\n\r\nif (Env.get() !== \"production\") {\r\n    // for development/testing\r\n    // myho-appinsights\r\n    debug = true;\r\n    maxBatchSize = 0;  // send telemetry as soon as it's collected\r\n}\r\n\r\nlet appInsights;\r\n\r\n/**\r\n * create an app insights connection for web version\r\n * do nothing for electron mode\r\n */\r\nexport function setUpAppInsights() {\r\n    if (isElectron()) {\r\n        return;\r\n    }\r\n\r\n    reactAI.setContext({\r\n        AppVersion: version,\r\n    });\r\n\r\n    const config = {\r\n        instrumentationKey,\r\n        maxBatchSize,\r\n        extensions: [reactAI],\r\n        extensionConfig: {\r\n            [reactAI.extensionId]: {\r\n                debug,\r\n                history,  // required for tracking router changes\r\n            },\r\n        },\r\n    };\r\n\r\n    appInsights = new ApplicationInsights({config});\r\n    appInsights.loadAppInsights();\r\n}\r\n\r\n/**\r\n * send exception event to AppInsights\r\n * @param appError object containing the error type and error message\r\n */\r\nexport function trackError(appError: IAppError): void {\r\n    if (isElectron()) {\r\n        return;\r\n    }\r\n\r\n    const error = new Error(appError.errorCode);\r\n    const exceptionTelemetry: IExceptionTelemetry = {\r\n        error,\r\n        properties: {\r\n            message: appError.message,\r\n        },\r\n        severityLevel: SeverityLevel.Error,\r\n    };\r\n\r\n    appInsights.trackException(exceptionTelemetry);\r\n}\r\n\r\n/**\r\n * send custom event tracking redux action\r\n * @param action a redux action\r\n */\r\nexport function trackReduxAction(action: Action): void {\r\n    if (isElectron()) {\r\n        return;\r\n    }\r\n\r\n    appInsights.trackEvent({\r\n        name: action.type,\r\n    });\r\n}\r\n","var map = {\n\t\"./azureCustomVision.json\": 1174,\n\t\"./azureCustomVision.ui.json\": 559,\n\t\"./cntk.json\": 1175,\n\t\"./cntk.ui.json\": 560,\n\t\"./csv.json\": 1176,\n\t\"./csv.ui.json\": 561,\n\t\"./pascalVOC.json\": 1177,\n\t\"./pascalVOC.ui.json\": 562,\n\t\"./tensorFlowRecords.json\": 1178,\n\t\"./tensorFlowRecords.ui.json\": 563,\n\t\"./vottJson.json\": 1179,\n\t\"./vottJson.ui.json\": 564\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1173;","var map = {\n\t\"./azureCustomVision.ui.json\": 559,\n\t\"./cntk.ui.json\": 560,\n\t\"./csv.ui.json\": 561,\n\t\"./pascalVOC.ui.json\": 562,\n\t\"./tensorFlowRecords.ui.json\": 563,\n\t\"./vottJson.ui.json\": 564\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1180;","import os from \"os\";\r\nimport { ExportProvider, IExportResults } from \"./exportProvider\";\r\nimport { IAssetMetadata, IExportProviderOptions, IProject } from \"../../models/applicationState\";\r\nimport HtmlFileReader from \"../../common/htmlFileReader\";\r\nimport Guard from \"../../common/guard\";\r\nimport { splitTestAsset } from \"./testAssetsSplitHelper\";\r\n\r\nenum ExportSplit {\r\n    Test,\r\n    Train,\r\n}\r\n\r\n/**\r\n * Export options for CNTK export provider\r\n */\r\nexport interface ICntkExportProviderOptions extends IExportProviderOptions {\r\n    /** The test / train split ratio for exporting data */\r\n    testTrainSplit?: number;\r\n}\r\n\r\n/**\r\n * CNTK Export provider\r\n */\r\nexport class CntkExportProvider extends ExportProvider<ICntkExportProviderOptions> {\r\n    private exportFolderName: string;\r\n\r\n    constructor(project: IProject, options: ICntkExportProviderOptions) {\r\n        super(project, options);\r\n        Guard.null(options);\r\n\r\n        this.exportFolderName = `${this.project.name.replace(/\\s/g, \"-\")}-CNTK-export`;\r\n    }\r\n\r\n    public async export(): Promise<IExportResults> {\r\n        await this.createFolderStructure();\r\n        const assetsToExport = await this.getAssetsForExport();\r\n        const testAssets: string[] = [];\r\n\r\n        const testSplit = (100 - (this.options.testTrainSplit || 80)) / 100;\r\n        if (testSplit > 0 && testSplit <= 1) {\r\n            const splittedAssets = splitTestAsset(assetsToExport, this.project.tags, testSplit);\r\n            testAssets.push(...splittedAssets);\r\n        }\r\n\r\n        const results = await assetsToExport.mapAsync(async (assetMetadata) => {\r\n            try {\r\n                const exportSplit = testAssets.find((am) => am === assetMetadata.asset.id)\r\n                    ? ExportSplit.Test\r\n                    : ExportSplit.Train;\r\n\r\n                await this.exportAssetFrame(assetMetadata, exportSplit);\r\n                return {\r\n                    asset: assetMetadata,\r\n                    success: true,\r\n                };\r\n            } catch (e) {\r\n                return {\r\n                    asset: assetMetadata,\r\n                    success: false,\r\n                    error: e,\r\n                };\r\n            }\r\n        });\r\n\r\n        return {\r\n            completed: results.filter((r) => r.success),\r\n            errors: results.filter((r) => !r.success),\r\n            count: results.length,\r\n        };\r\n    }\r\n\r\n    private async exportAssetFrame(assetMetadata: IAssetMetadata, exportSplit: ExportSplit) {\r\n        const labelData = [];\r\n        const boundingBoxData = [];\r\n\r\n        assetMetadata.regions.forEach((region) => {\r\n            region.tags.forEach((tagName) => {\r\n                labelData.push(tagName);\r\n                // tslint:disable-next-line:max-line-length\r\n                boundingBoxData.push(`${region.boundingBox.left}\\t${region.boundingBox.left + region.boundingBox.width}\\t${region.boundingBox.top}\\t${region.boundingBox.top + region.boundingBox.height}`);\r\n            });\r\n        });\r\n\r\n        const buffer = await HtmlFileReader.getAssetArray(assetMetadata.asset);\r\n        const folderName = exportSplit === ExportSplit.Train ? \"positive\" : \"testImages\";\r\n        const labelsPath = `${this.exportFolderName}/${folderName}/${assetMetadata.asset.name}.bboxes.labels.tsv`;\r\n        const boundingBoxPath = `${this.exportFolderName}/${folderName}/${assetMetadata.asset.name}.bboxes.tsv`;\r\n        const binaryPath = `${this.exportFolderName}/${folderName}/${assetMetadata.asset.name}`;\r\n\r\n        await Promise.all([\r\n            this.storageProvider.writeText(labelsPath, labelData.join(os.EOL)),\r\n            this.storageProvider.writeText(boundingBoxPath, boundingBoxData.join(os.EOL)),\r\n            this.storageProvider.writeBinary(binaryPath, Buffer.from(buffer)),\r\n        ]);\r\n    }\r\n\r\n    private async createFolderStructure(): Promise<void> {\r\n        const positiveFolder = `${this.exportFolderName}/positive`;\r\n        const negativeFolder = `${this.exportFolderName}/negative`;\r\n        const testImagesFolder = `${this.exportFolderName}/testImages`;\r\n\r\n        await this.storageProvider.createContainer(this.exportFolderName);\r\n\r\n        await [positiveFolder, negativeFolder, testImagesFolder]\r\n            .forEachAsync(async (folderPath) => {\r\n                await this.storageProvider.createContainer(folderPath);\r\n            });\r\n    }\r\n}\r\n","import _ from \"lodash\";\r\nimport shortid from \"shortid\";\r\nimport { StorageProviderFactory } from \"../providers/storage/storageProviderFactory\";\r\nimport {\r\n    IProject, ISecurityToken, AppError,\r\n    ErrorCode, ModelPathType, IActiveLearningSettings,\r\n} from \"../models/applicationState\";\r\nimport Guard from \"../common/guard\";\r\nimport { constants } from \"../common/constants\";\r\nimport { ExportProviderFactory } from \"../providers/export/exportProviderFactory\";\r\nimport { decryptProject, encryptProject } from \"../common/utils\";\r\nimport packageJson from \"../../package.json\";\r\nimport { ExportAssetState } from \"../providers/export/exportProvider\";\r\nimport { IExportFormat } from \"vott-react\";\r\n\r\n/**\r\n * Functions required for a project service\r\n * @member save - Save a project\r\n * @member delete - Delete a project\r\n */\r\nexport interface IProjectService {\r\n    load(project: IProject, securityToken?: ISecurityToken): Promise<IProject>;\r\n    save(project: IProject, securityToken?: ISecurityToken): Promise<IProject>;\r\n    delete(project: IProject): Promise<void>;\r\n    isDuplicate(project: IProject, projectList: IProject[]): boolean;\r\n}\r\n\r\nconst defaultActiveLearningSettings: IActiveLearningSettings = {\r\n    autoDetect: false,\r\n    predictTag: true,\r\n    modelPathType: ModelPathType.Coco,\r\n};\r\n\r\nconst defaultExportOptions: IExportFormat = {\r\n    providerType: \"vottJson\",\r\n    providerOptions: {\r\n        assetState: ExportAssetState.Visited,\r\n        includeImages: true,\r\n    },\r\n};\r\n\r\n/**\r\n * @name - Project Service\r\n * @description - Functions for dealing with projects\r\n */\r\nexport default class ProjectService implements IProjectService {\r\n    /**\r\n     * Loads a project\r\n     * @param project The project JSON to load\r\n     * @param securityToken The security token used to decrypt sensitive project settings\r\n     */\r\n    public load(project: IProject, securityToken?: ISecurityToken): Promise<IProject> {\r\n        Guard.null(project);\r\n\r\n        try {\r\n            const loadedProject = project.useSecurityToken\r\n                ? decryptProject(project, securityToken)\r\n                : { ...project };\r\n\r\n            // Ensure tags is always initialized to an array\r\n            if (!loadedProject.tags) {\r\n                loadedProject.tags = [];\r\n            }\r\n\r\n            // Initialize active learning settings if they don't exist\r\n            if (!loadedProject.activeLearningSettings) {\r\n                loadedProject.activeLearningSettings = defaultActiveLearningSettings;\r\n            }\r\n\r\n            // Initialize export settings if they don't exist\r\n            if (!loadedProject.exportFormat) {\r\n                loadedProject.exportFormat = defaultExportOptions;\r\n            }\r\n\r\n            this.ensureBackwardsCompatibility(loadedProject);\r\n\r\n            return Promise.resolve({ ...loadedProject });\r\n        } catch (e) {\r\n            const error = new AppError(ErrorCode.ProjectInvalidSecurityToken, \"Error decrypting project settings\");\r\n            return Promise.reject(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Save a project\r\n     * @param project - Project to save\r\n     * @param securityToken - Security Token to encrypt\r\n     */\r\n    public async save(project: IProject, securityToken?: ISecurityToken): Promise<IProject> {\r\n        Guard.null(project);\r\n\r\n        if (!project.id) {\r\n            project.id = shortid.generate();\r\n        }\r\n\r\n        // Ensure tags is always initialized to an array\r\n        if (!project.tags) {\r\n            project.tags = [];\r\n        }\r\n\r\n        // Initialize active learning settings if they don't exist\r\n        if (!project.activeLearningSettings) {\r\n            project.activeLearningSettings = defaultActiveLearningSettings;\r\n        }\r\n\r\n        // Initialize export settings if they don't exist\r\n        if (!project.exportFormat) {\r\n            project.exportFormat = defaultExportOptions;\r\n        }\r\n\r\n        project.version = packageJson.version;\r\n\r\n        const storageProvider = StorageProviderFactory.createFromConnection(project.targetConnection);\r\n        await this.saveExportSettings(project);\r\n        project = project.useSecurityToken\r\n            ? encryptProject(project, securityToken)\r\n            : { ...project };\r\n\r\n        await storageProvider.writeText(\r\n            `${project.name}${constants.projectFileExtension}`,\r\n            JSON.stringify(project, null, 4),\r\n        );\r\n\r\n        return project;\r\n    }\r\n\r\n    /**\r\n     * Delete a project\r\n     * @param project - Project to delete\r\n     */\r\n    public async delete(project: IProject): Promise<void> {\r\n        Guard.null(project);\r\n\r\n        const storageProvider = StorageProviderFactory.createFromConnection(project.targetConnection);\r\n\r\n        // Delete all asset metadata files created for project\r\n        const deleteFiles = _.values(project.assets)\r\n            .map((asset) => storageProvider.deleteFile(`${asset.id}${constants.assetMetadataFileExtension}`));\r\n\r\n        await Promise.all(deleteFiles);\r\n        await storageProvider.deleteFile(`${project.name}${constants.projectFileExtension}`);\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not the project would cause a duplicate at the target connection\r\n     * @param project The project to validate\r\n     * @param projectList The list of known projects\r\n     */\r\n    public isDuplicate(project: IProject, projectList: IProject[]): boolean {\r\n        const duplicateProjects = projectList.find((p) =>\r\n            p.id !== project.id &&\r\n            p.name === project.name &&\r\n            JSON.stringify(p.targetConnection.providerOptions) ===\r\n            JSON.stringify(project.targetConnection.providerOptions),\r\n        );\r\n        return (duplicateProjects !== undefined);\r\n    }\r\n\r\n    private async saveExportSettings(project: IProject): Promise<void> {\r\n        if (!project.exportFormat || !project.exportFormat.providerType) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const exportProvider = ExportProviderFactory.createFromProject(project);\r\n\r\n        if (!exportProvider.save) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        project.exportFormat.providerOptions = await exportProvider.save(project.exportFormat);\r\n    }\r\n\r\n    /**\r\n     * Ensures backwards compatibility with project\r\n     * @param project The project to update\r\n     */\r\n    private ensureBackwardsCompatibility(project: IProject) {\r\n        const projectVersion = project.version.toLowerCase();\r\n\r\n        if (projectVersion.startsWith(\"2.0.0\")) {\r\n            // Required for backwards compatibility with v2.0.0 release\r\n            if (project.exportFormat.providerType === \"tensorFlowPascalVOC\") {\r\n                project.exportFormat.providerType = \"pascalVOC\";\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Action, Dispatch } from \"redux\";\r\nimport ProjectService from \"../../services/projectService\";\r\nimport { ActionTypes } from \"./actionTypes\";\r\nimport { AssetService } from \"../../services/assetService\";\r\nimport { ExportProviderFactory } from \"../../providers/export/exportProviderFactory\";\r\nimport {\r\n    AppError,\r\n    ErrorCode,\r\n    IApplicationState,\r\n    IAsset,\r\n    IAssetMetadata,\r\n    IProject,\r\n} from \"../../models/applicationState\";\r\nimport { createAction, createPayloadAction, IPayloadAction } from \"./actionCreators\";\r\nimport { IExportResults } from \"../../providers/export/exportProvider\";\r\nimport { appInfo } from \"../../common/appInfo\";\r\nimport { strings } from \"../../common/strings\";\r\n\r\n/**\r\n * Actions to be performed in relation to projects\r\n */\r\nexport default interface IProjectActions {\r\n    loadProject(project: IProject): Promise<IProject>;\r\n    saveProject(project: IProject): Promise<IProject>;\r\n    deleteProject(project: IProject): Promise<void>;\r\n    closeProject(): void;\r\n    exportProject(project: IProject): Promise<void> | Promise<IExportResults>;\r\n    loadAssets(project: IProject): Promise<IAsset[]>;\r\n    loadAssetMetadata(project: IProject, asset: IAsset): Promise<IAssetMetadata>;\r\n    saveAssetMetadata(project: IProject, assetMetadata: IAssetMetadata): Promise<IAssetMetadata>;\r\n    updateProjectTag(project: IProject, oldTagName: string, newTagName: string): Promise<IAssetMetadata[]>;\r\n    deleteProjectTag(project: IProject, tagName): Promise<IAssetMetadata[]>;\r\n}\r\n\r\n/**\r\n * Dispatches Load Project action and resolves with IProject\r\n * @param project - Project to load\r\n */\r\nexport function loadProject(project: IProject):\r\n    (dispatch: Dispatch, getState: () => IApplicationState) => Promise<IProject> {\r\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\r\n        const appState = getState();\r\n        const projectService = new ProjectService();\r\n\r\n        // Lookup security token used to decrypt project settings\r\n        const projectToken = appState.appSettings.securityTokens\r\n            .find((securityToken) => securityToken.name === project.securityToken);\r\n\r\n        if (project.useSecurityToken && !projectToken) {\r\n            throw new AppError(ErrorCode.SecurityTokenNotFound, \"Security Token Not Found\");\r\n        }\r\n        const loadedProject = await projectService.load(project, projectToken);\r\n\r\n        dispatch(loadProjectAction(loadedProject));\r\n        return loadedProject;\r\n    };\r\n}\r\n\r\n/**\r\n * Dispatches Save Project action and resolves with IProject\r\n * @param project - Project to save\r\n */\r\nexport function saveProject(project: IProject)\r\n    : (dispatch: Dispatch, getState: () => IApplicationState) => Promise<IProject> {\r\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\r\n        const appState = getState();\r\n        const projectService = new ProjectService();\r\n\r\n        if (projectService.isDuplicate(project, appState.recentProjects)) {\r\n            throw new AppError(ErrorCode.ProjectDuplicateName, `Project with name '${project.name}\r\n                already exists with the same target connection '${project.targetConnection.name}'`);\r\n        }\r\n\r\n        const projectToken = appState.appSettings.securityTokens\r\n            .find((securityToken) => securityToken.name === project.securityToken);\r\n\r\n        if (project.useSecurityToken && !projectToken) {\r\n            throw new AppError(ErrorCode.SecurityTokenNotFound, \"Security Token Not Found\");\r\n        }\r\n\r\n        const savedProject = await projectService.save(project, projectToken);\r\n        dispatch(saveProjectAction(savedProject));\r\n\r\n        // Reload project after save actions\r\n        await loadProject(savedProject)(dispatch, getState);\r\n\r\n        return savedProject;\r\n    };\r\n}\r\n\r\n/**\r\n * Dispatches Delete Project action and resolves with project\r\n * @param project - Project to delete\r\n */\r\nexport function deleteProject(project: IProject)\r\n    : (dispatch: Dispatch, getState: () => IApplicationState) => Promise<void> {\r\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\r\n        const appState = getState();\r\n        const projectService = new ProjectService();\r\n\r\n        // Lookup security token used to decrypt project settings\r\n        const projectToken = appState.appSettings.securityTokens\r\n            .find((securityToken) => securityToken.name === project.securityToken);\r\n\r\n        if (project.useSecurityToken && !projectToken) {\r\n            throw new AppError(ErrorCode.SecurityTokenNotFound, \"Security Token Not Found\");\r\n        }\r\n\r\n        const decryptedProject = await projectService.load(project, projectToken);\r\n\r\n        await projectService.delete(decryptedProject);\r\n        dispatch(deleteProjectAction(decryptedProject));\r\n    };\r\n}\r\n\r\n/**\r\n * Dispatches Close Project action\r\n */\r\nexport function closeProject(): (dispatch: Dispatch) => void {\r\n    return (dispatch: Dispatch): void => {\r\n        dispatch({ type: ActionTypes.CLOSE_PROJECT_SUCCESS });\r\n    };\r\n}\r\n\r\n/**\r\n * Gets assets from project, dispatches load assets action and returns assets\r\n * @param project - Project from which to load assets\r\n */\r\nexport function loadAssets(project: IProject): (dispatch: Dispatch) => Promise<IAsset[]> {\r\n    return async (dispatch: Dispatch) => {\r\n        const assetService = new AssetService(project);\r\n        const assets = await assetService.getAssets();\r\n        dispatch(loadProjectAssetsAction(assets));\r\n\r\n        return assets;\r\n    };\r\n}\r\n\r\n/**\r\n * Load metadata from asset within project\r\n * @param project - Project from which to load asset metadata\r\n * @param asset - Asset from which to load metadata\r\n */\r\nexport function loadAssetMetadata(project: IProject, asset: IAsset): (dispatch: Dispatch) => Promise<IAssetMetadata> {\r\n    return async (dispatch: Dispatch) => {\r\n        const assetService = new AssetService(project);\r\n        const assetMetadata = await assetService.getAssetMetadata(asset);\r\n        dispatch(loadAssetMetadataAction(assetMetadata));\r\n\r\n        return { ...assetMetadata };\r\n    };\r\n}\r\n\r\n/**\r\n * Save metadata from asset within project\r\n * @param project - Project from which to save asset metadata\r\n * @param assetMetadata - Metadata for asset within project\r\n */\r\nexport function saveAssetMetadata(\r\n    project: IProject,\r\n    assetMetadata: IAssetMetadata): (dispatch: Dispatch) => Promise<IAssetMetadata> {\r\n    const newAssetMetadata = { ...assetMetadata, version: appInfo.version };\r\n\r\n    return async (dispatch: Dispatch) => {\r\n        const assetService = new AssetService(project);\r\n        const savedMetadata = await assetService.save(newAssetMetadata);\r\n        dispatch(saveAssetMetadataAction(savedMetadata));\r\n\r\n        return { ...savedMetadata };\r\n    };\r\n}\r\n\r\n/**\r\n * Updates a project and all asset references from oldTagName to newTagName\r\n * @param project The project to update tags\r\n * @param oldTagName The old tag name\r\n * @param newTagName The new tag name\r\n */\r\nexport function updateProjectTag(project: IProject, oldTagName: string, newTagName: string)\r\n    : (dispatch: Dispatch, getState: () => IApplicationState) => Promise<IAssetMetadata[]> {\r\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\r\n        // Find tags to rename\r\n        const assetService = new AssetService(project);\r\n        const assetUpdates = await assetService.renameTag(oldTagName, newTagName);\r\n\r\n        // Save updated assets\r\n        await assetUpdates.forEachAsync(async (assetMetadata) => {\r\n            await saveAssetMetadata(project, assetMetadata)(dispatch);\r\n        });\r\n\r\n        const currentProject = getState().currentProject;\r\n        const updatedProject = {\r\n            ...currentProject,\r\n            tags: project.tags.map((t) => (t.name === oldTagName) ? { ...t, name: newTagName } : t),\r\n        };\r\n\r\n        // Save updated project tags\r\n        await saveProject(updatedProject)(dispatch, getState);\r\n        dispatch(updateProjectTagAction(updatedProject));\r\n\r\n        return assetUpdates;\r\n    };\r\n}\r\n\r\n/**\r\n * Updates a project and all asset references from oldTagName to newTagName\r\n * @param project The project to delete tags\r\n * @param tagName The tag to delete\r\n */\r\nexport function deleteProjectTag(project: IProject, tagName)\r\n    : (dispatch: Dispatch, getState: () => IApplicationState) => Promise<IAssetMetadata[]> {\r\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\r\n        // Find tags to rename\r\n        const assetService = new AssetService(project);\r\n        const assetUpdates = await assetService.deleteTag(tagName);\r\n\r\n        // Save updated assets\r\n        await assetUpdates.forEachAsync(async (assetMetadata) => {\r\n            await saveAssetMetadata(project, assetMetadata)(dispatch);\r\n        });\r\n\r\n        const currentProject = getState().currentProject;\r\n        const updatedProject = {\r\n            ...currentProject,\r\n            tags: project.tags.filter((t) => t.name !== tagName),\r\n        };\r\n\r\n        // Save updated project tags\r\n        await saveProject(updatedProject)(dispatch, getState);\r\n        dispatch(deleteProjectTagAction(updatedProject));\r\n\r\n        return assetUpdates;\r\n    };\r\n}\r\n\r\n/**\r\n * Initialize export provider, get export data and dispatch export project action\r\n * @param project - Project to export\r\n */\r\nexport function exportProject(project: IProject): (dispatch: Dispatch) => Promise<void> | Promise<IExportResults> {\r\n    return async (dispatch: Dispatch) => {\r\n        if (!project.exportFormat) {\r\n            throw new AppError(ErrorCode.ExportFormatNotFound, strings.errors.exportFormatNotFound.message);\r\n        }\r\n\r\n        if (project.exportFormat && project.exportFormat.providerType) {\r\n            const exportProvider = ExportProviderFactory.create(\r\n                project.exportFormat.providerType,\r\n                project,\r\n                project.exportFormat.providerOptions);\r\n\r\n            const results = await exportProvider.export();\r\n            dispatch(exportProjectAction(project));\r\n\r\n            return results as IExportResults;\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Load project action type\r\n */\r\nexport interface ILoadProjectAction extends IPayloadAction<string, IProject> {\r\n    type: ActionTypes.LOAD_PROJECT_SUCCESS;\r\n}\r\n\r\n/**\r\n * Close project action type\r\n */\r\nexport interface ICloseProjectAction extends Action<string> {\r\n    type: ActionTypes.CLOSE_PROJECT_SUCCESS;\r\n}\r\n\r\n/**\r\n * Save project action type\r\n */\r\nexport interface ISaveProjectAction extends IPayloadAction<string, IProject> {\r\n    type: ActionTypes.SAVE_PROJECT_SUCCESS;\r\n}\r\n\r\n/**\r\n * Delete project action type\r\n */\r\nexport interface IDeleteProjectAction extends IPayloadAction<string, IProject> {\r\n    type: ActionTypes.DELETE_PROJECT_SUCCESS;\r\n}\r\n\r\n/**\r\n * Load project assets action type\r\n */\r\nexport interface ILoadProjectAssetsAction extends IPayloadAction<string, IAsset[]> {\r\n    type: ActionTypes.LOAD_PROJECT_ASSETS_SUCCESS;\r\n}\r\n\r\n/**\r\n * Load asset metadata action type\r\n */\r\nexport interface ILoadAssetMetadataAction extends IPayloadAction<string, IAssetMetadata> {\r\n    type: ActionTypes.LOAD_ASSET_METADATA_SUCCESS;\r\n}\r\n\r\n/**\r\n * Save asset metadata action type\r\n */\r\nexport interface ISaveAssetMetadataAction extends IPayloadAction<string, IAssetMetadata> {\r\n    type: ActionTypes.SAVE_ASSET_METADATA_SUCCESS;\r\n}\r\n\r\n/**\r\n * Export project action type\r\n */\r\nexport interface IExportProjectAction extends IPayloadAction<string, IProject> {\r\n    type: ActionTypes.EXPORT_PROJECT_SUCCESS;\r\n}\r\n\r\n/**\r\n * Update Project Tag action type\r\n */\r\nexport interface IUpdateProjectTagAction extends IPayloadAction<string, IProject> {\r\n    type: ActionTypes.UPDATE_PROJECT_TAG_SUCCESS;\r\n}\r\n\r\n/**\r\n * Delete project tag action type\r\n */\r\nexport interface IDeleteProjectTagAction extends IPayloadAction<string, IProject> {\r\n    type: ActionTypes.DELETE_PROJECT_TAG_SUCCESS;\r\n}\r\n\r\n/**\r\n * Instance of Load Project action\r\n */\r\nexport const loadProjectAction = createPayloadAction<ILoadProjectAction>(ActionTypes.LOAD_PROJECT_SUCCESS);\r\n/**\r\n * Instance of Close Project action\r\n */\r\nexport const closeProjectAction = createAction<ICloseProjectAction>(ActionTypes.CLOSE_PROJECT_SUCCESS);\r\n/**\r\n * Instance of Save Project action\r\n */\r\nexport const saveProjectAction = createPayloadAction<ISaveProjectAction>(ActionTypes.SAVE_PROJECT_SUCCESS);\r\n/**\r\n * Instance of Delete Project action\r\n */\r\nexport const deleteProjectAction = createPayloadAction<IDeleteProjectAction>(ActionTypes.DELETE_PROJECT_SUCCESS);\r\n/**\r\n * Instance of Load Project Assets action\r\n */\r\nexport const loadProjectAssetsAction =\r\n    createPayloadAction<ILoadProjectAssetsAction>(ActionTypes.LOAD_PROJECT_ASSETS_SUCCESS);\r\n/**\r\n * Instance of Load Asset Metadata action\r\n */\r\nexport const loadAssetMetadataAction =\r\n    createPayloadAction<ILoadAssetMetadataAction>(ActionTypes.LOAD_ASSET_METADATA_SUCCESS);\r\n/**\r\n * Instance of Save Asset Metadata action\r\n */\r\nexport const saveAssetMetadataAction =\r\n    createPayloadAction<ISaveAssetMetadataAction>(ActionTypes.SAVE_ASSET_METADATA_SUCCESS);\r\n/**\r\n * Instance of Export Project action\r\n */\r\nexport const exportProjectAction =\r\n    createPayloadAction<IExportProjectAction>(ActionTypes.EXPORT_PROJECT_SUCCESS);\r\n/**\r\n * Instance of Update project tag action\r\n */\r\nexport const updateProjectTagAction =\r\n    createPayloadAction<IUpdateProjectTagAction>(ActionTypes.UPDATE_PROJECT_TAG_SUCCESS);\r\n/**\r\n * Instance of Delete project tag action\r\n */\r\nexport const deleteProjectTagAction =\r\n    createPayloadAction<IDeleteProjectTagAction>(ActionTypes.DELETE_PROJECT_TAG_SUCCESS);\r\n","import { Action, Dispatch } from \"redux\";\r\nimport { IpcRendererProxy } from \"../../common/ipcRendererProxy\";\r\nimport { ActionTypes } from \"./actionTypes\";\r\nimport { createPayloadAction, createAction, IPayloadAction } from \"./actionCreators\";\r\nimport { IAppSettings } from \"../../models/applicationState\";\r\nimport { IProject, IApplicationState } from \"../../models/applicationState\";\r\nimport { generateKey } from \"../../common/crypto\";\r\n\r\n/**\r\n * Actions to make changes to application settings\r\n * @member toggleDevTools - Open or close dev tools\r\n * @member reloadApplication - Reload application\r\n */\r\nexport default interface IApplicationActions {\r\n    toggleDevTools(show: boolean): Promise<void>;\r\n    reloadApplication(): Promise<void>;\r\n    saveAppSettings(appSettings: IAppSettings): IAppSettings;\r\n    ensureSecurityToken(project: IProject): IAppSettings;\r\n}\r\n\r\n/**\r\n * Open or close dev tools\r\n * @param show - Dev tools is open\r\n */\r\nexport function toggleDevTools(show: boolean): (dispatch: Dispatch) => Promise<void> {\r\n    return (dispatch: Dispatch) => {\r\n        return IpcRendererProxy.send(\"TOGGLE_DEV_TOOLS\", show)\r\n            .then(() => {\r\n                dispatch(toggleDevToolsAction(show));\r\n            });\r\n    };\r\n}\r\n\r\n/**\r\n * Reload application\r\n */\r\nexport function reloadApplication(): (dispatch: Dispatch) => Promise<void> {\r\n    return (dispatch: Dispatch) => {\r\n        return IpcRendererProxy.send(\"RELOAD_APP\")\r\n            .then(() => {\r\n                dispatch(refreshApplicationAction());\r\n            });\r\n    };\r\n}\r\n\r\n/**\r\n * Save app settings\r\n */\r\nexport function saveAppSettings(appSettings: IAppSettings): (dispatch: Dispatch) => Promise<IAppSettings> {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(saveAppSettingsAction(appSettings));\r\n        return Promise.resolve(appSettings);\r\n    };\r\n}\r\n\r\n/**\r\n * Ensures that a valid security token is associated with the project, otherwise creates one\r\n * @param project The project to validate\r\n */\r\nexport function ensureSecurityToken(project: IProject):\r\n    (dispatch: Dispatch, getState: () => IApplicationState) => Promise<IAppSettings> {\r\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\r\n        const appState = getState();\r\n        let securityToken = appState.appSettings.securityTokens\r\n            .find((st) => st.name === project.securityToken);\r\n\r\n        if (securityToken) {\r\n            return appState.appSettings;\r\n        }\r\n\r\n        securityToken = {\r\n            name: `${project.name} Token`,\r\n            key: generateKey(),\r\n        };\r\n\r\n        const updatedAppSettings: IAppSettings = {\r\n            devToolsEnabled: appState.appSettings.devToolsEnabled,\r\n            securityTokens: [...appState.appSettings.securityTokens, securityToken],\r\n        };\r\n\r\n        await this.saveAppSettings(updatedAppSettings);\r\n\r\n        project.securityToken = securityToken.name;\r\n        dispatch(ensureSecurityTokenAction(updatedAppSettings));\r\n        return updatedAppSettings;\r\n    };\r\n}\r\n\r\n/**\r\n * Toggle Dev Tools Redux Action type\r\n */\r\nexport interface IToggleDevToolsAction extends IPayloadAction<string, boolean> {\r\n    type: ActionTypes.TOGGLE_DEV_TOOLS_SUCCESS;\r\n}\r\n\r\n/**\r\n * Refresh app action type\r\n */\r\nexport interface IRefreshApplicationAction extends Action<string> {\r\n    type: ActionTypes.REFRESH_APP_SUCCESS;\r\n}\r\n\r\n/**\r\n * Save app settings action type\r\n */\r\nexport interface ISaveAppSettingsAction extends IPayloadAction<string, IAppSettings> {\r\n    type: ActionTypes.SAVE_APP_SETTINGS_SUCCESS;\r\n}\r\n\r\n/**\r\n * Ensure project security token action type\r\n */\r\nexport interface IEnsureSecurityTokenAction extends IPayloadAction<string, IAppSettings> {\r\n    type: ActionTypes.ENSURE_SECURITY_TOKEN_SUCCESS;\r\n}\r\n\r\n/**\r\n * Instance of toggle dev tools action\r\n */\r\nexport const toggleDevToolsAction = createPayloadAction<IToggleDevToolsAction>(ActionTypes.TOGGLE_DEV_TOOLS_SUCCESS);\r\n/**\r\n * Instance of refresh app action\r\n */\r\nexport const refreshApplicationAction = createAction<IRefreshApplicationAction>(ActionTypes.REFRESH_APP_SUCCESS);\r\n/**\r\n * Instance of save app settings action\r\n */\r\nexport const saveAppSettingsAction = createPayloadAction<ISaveAppSettingsAction>(ActionTypes.SAVE_APP_SETTINGS_SUCCESS);\r\n/**\r\n * Instance of Export Project action\r\n */\r\nexport const ensureSecurityTokenAction =\r\n    createPayloadAction<IEnsureSecurityTokenAction>(ActionTypes.ENSURE_SECURITY_TOKEN_SUCCESS);\r\n","import React, { SyntheticEvent } from \"react\";\r\nimport \"./condensedList.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/**\r\n * Properties for Condensed List Component\r\n * @member title - Title of condensed list\r\n * @member items - Array of items to be rendered\r\n * @member newLinkTo - Link for list items\r\n * @member onClick - Function to call on clicking items\r\n * @member onDelete - Function to call on deleting items\r\n * @member Component - Component to be rendered for list items\r\n */\r\ninterface ICondensedListProps {\r\n    title: string;\r\n    Component: any;\r\n    items: any[];\r\n    newLinkTo?: string;\r\n    onClick?: (item) => void;\r\n    onDelete?: (item) => void;\r\n}\r\n\r\n/**\r\n * @name - Condensed List\r\n * @description - Clickable, deletable and linkable list of items\r\n */\r\nexport default class CondensedList extends React.Component<ICondensedListProps> {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.onItemClick = this.onItemClick.bind(this);\r\n        this.onItemDelete = this.onItemDelete.bind(this);\r\n    }\r\n\r\n    public render() {\r\n        const { title, items, newLinkTo, Component } = this.props;\r\n\r\n        return (\r\n            <div className=\"condensed-list\">\r\n                <h6 className=\"condensed-list-header bg-darker-2 p-2\">\r\n                    <span>{title}</span>\r\n                    {newLinkTo &&\r\n                        <Link to={newLinkTo} className=\"float-right\">\r\n                            <i className=\"fas fa-plus-square\" />\r\n                        </Link>\r\n                    }\r\n                </h6>\r\n                <div className=\"condensed-list-body\">\r\n                    {(!items) &&\r\n                        <div className=\"p-3 text-center\">\r\n                            <i className=\"fas fa-circle-notch fa-spin\" />\r\n                        </div>\r\n                    }\r\n                    {(items && items.length === 0) &&\r\n                        <div className=\"p-3 text-center\">No items found</div>\r\n                    }\r\n                    {(items && items.length > 0) &&\r\n                        <ul className=\"condensed-list-items\">\r\n                            {items.map((item) => <Component key={item.id}\r\n                                item={item}\r\n                                onClick={(e) => this.onItemClick(e, item)}\r\n                                onDelete={(e) => this.onItemDelete(e, item)} />)}\r\n                        </ul>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onItemClick = (e, item) => {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(item);\r\n        }\r\n    }\r\n\r\n    private onItemDelete = (e: SyntheticEvent, item) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        if (this.props.onDelete) {\r\n            this.props.onDelete(item);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Generic list item with an onClick function and a name\r\n * @param param0 - {item: {name: \"\"}, onClick: (item) => void;}\r\n */\r\nexport function ListItem({ item, onClick }) {\r\n    return (\r\n        <li>\r\n            <a onClick={onClick}>\r\n                <span className=\"px-2\">{item.name}</span>\r\n            </a>\r\n        </li>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\r\nimport { strings } from \"../../../../common/strings\";\r\nimport { IConnection, StorageType } from \"../../../../models/applicationState\";\r\nimport { StorageProviderFactory } from \"../../../../providers/storage/storageProviderFactory\";\r\nimport CondensedList, { ListItem } from \"../condensedList/condensedList\";\r\n\r\n/**\r\n * Properties for Cloud File Picker\r\n * @member connections - Array of connections to choose from\r\n * @member onSubmit - Function to call with contents of selected file\r\n * @member onCancel - Optional function to call on modal closed\r\n * @member fileExtension - Filter on files with extension\r\n */\r\nexport interface ICloudFilePickerProps {\r\n    connections: IConnection[];\r\n    onSubmit: (content: string) => void;\r\n\r\n    onCancel?: () => void;\r\n    fileExtension?: string;\r\n}\r\n\r\n/**\r\n * State for Cloud File Picker\r\n * @member isOpen - Cloud File Picker is open\r\n * @member modalHeader - Header for Picker modal\r\n * @member condensedList - List of rendered objects for picking\r\n * @member selectedConnection - Connection selected in picker\r\n * @member selectedFile - File selected in picker\r\n * @member okDisabled - Ok button is disabled\r\n * @member backDisabled - Back button is disabled\r\n */\r\nexport interface ICloudFilePickerState {\r\n    isOpen: boolean;\r\n    modalHeader: string;\r\n    condensedList: any;\r\n    selectedConnection: IConnection;\r\n    selectedFile: string;\r\n    okDisabled: boolean;\r\n    backDisabled: boolean;\r\n}\r\n\r\n/**\r\n * @name - Cloud File Picker\r\n * @description - Modal to choose and read file from cloud connections\r\n */\r\nexport class CloudFilePicker extends React.Component<ICloudFilePickerProps, ICloudFilePickerState> {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.open = this.open.bind(this);\r\n        this.close = this.close.bind(this);\r\n\r\n        this.getInitialState = this.getInitialState.bind(this);\r\n        this.ok = this.ok.bind(this);\r\n        this.back = this.back.bind(this);\r\n        this.connectionList = this.connectionList.bind(this);\r\n        this.onClickConnection = this.onClickConnection.bind(this);\r\n        this.fileList = this.fileList.bind(this);\r\n        this.onClickFile = this.onClickFile.bind(this);\r\n\r\n        this.state = this.getInitialState();\r\n    }\r\n\r\n    public render() {\r\n        const closeBtn = <button className=\"close\" onClick={this.close}>&times;</button>;\r\n\r\n        return(\r\n            <Modal isOpen={this.state.isOpen} centered={true}>\r\n                <ModalHeader toggle={this.close} close={closeBtn}>\r\n                    {this.state.modalHeader}\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    {this.state.condensedList}\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    {this.state.selectedFile || \"\"}\r\n                    <Button\r\n                        className=\"btn btn-success mr-1\"\r\n                        onClick={this.ok}\r\n                        disabled={this.state.okDisabled}>\r\n                        Ok\r\n                    </Button>\r\n                    <Button\r\n                        onClick={this.back}\r\n                        disabled={this.state.backDisabled}>\r\n                        Go Back\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Open Cloud File Picker\r\n     */\r\n    public open(): void {\r\n        this.setState({isOpen: true});\r\n    }\r\n\r\n    /**\r\n     * Close Cloud File Picker\r\n     */\r\n    public close(): void {\r\n        this.setState(this.getInitialState(),\r\n            () => {\r\n                if (this.props.onCancel) {\r\n                    this.props.onCancel();\r\n                }\r\n            },\r\n        );\r\n    }\r\n\r\n    private getInitialState(): ICloudFilePickerState {\r\n        return {\r\n            isOpen: false,\r\n            modalHeader: strings.homePage.openCloudProject.selectConnection,\r\n            condensedList: this.connectionList(),\r\n            selectedConnection: null,\r\n            selectedFile: null,\r\n            okDisabled: true,\r\n            backDisabled: true,\r\n        };\r\n    }\r\n\r\n    private async ok() {\r\n        if (this.state.selectedConnection && this.state.selectedFile) {\r\n            const storageProvider = StorageProviderFactory.createFromConnection(this.state.selectedConnection);\r\n            const content = await storageProvider.readText(this.state.selectedFile);\r\n            this.props.onSubmit(content);\r\n        }\r\n    }\r\n\r\n    private back() {\r\n        this.setState({\r\n            ...this.getInitialState(),\r\n            isOpen: true,\r\n        });\r\n    }\r\n\r\n    private getCondensedList(title: string, items: any[], onClick) {\r\n        return <CondensedList\r\n            title={title}\r\n            items={items}\r\n            Component={ListItem}\r\n            onClick={onClick}\r\n        />;\r\n    }\r\n\r\n    private isCloudConnection(connection: IConnection): boolean {\r\n        try {\r\n            const storageProvider = StorageProviderFactory.createFromConnection(connection);\r\n            return storageProvider.storageType === StorageType.Cloud;\r\n        } catch (e) {\r\n            // Catches connections that are not registered as StorageProviders (e.g. Bing Image search)\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private getCloudConnections(connections: IConnection[]): IConnection[] {\r\n        return connections.filter(this.isCloudConnection);\r\n    }\r\n\r\n    private connectionList() {\r\n        const connections = this.getCloudConnections(this.props.connections);\r\n        return this.getCondensedList(\"Cloud Connections\", connections, (args) => this.onClickConnection(args));\r\n    }\r\n\r\n    private async onClickConnection(args) {\r\n        const connection: IConnection = {\r\n            ...args,\r\n        };\r\n        const fileList = await this.fileList(connection);\r\n        this.setState({\r\n            selectedConnection: connection,\r\n            modalHeader: `Select a file from \"${connection.name}\"`,\r\n            condensedList: fileList,\r\n            backDisabled: false,\r\n        });\r\n    }\r\n\r\n    private async fileList(connection: IConnection) {\r\n        const storageProvider = StorageProviderFactory.createFromConnection(connection);\r\n        const files = await storageProvider.listFiles(\r\n            connection.providerOptions[\"containerName\"],\r\n            this.props.fileExtension);\r\n        const fileItems = [];\r\n        for (let i = 0; i < files.length; i++) {\r\n            fileItems.push({\r\n                id: `file-${i + 1}`,\r\n                name: files[i],\r\n            });\r\n        }\r\n        return this.getCondensedList(\r\n            `${this.props.fileExtension || \"All\"} Files in \"${connection.name}\"`,\r\n            fileItems,\r\n            this.onClickFile,\r\n        );\r\n    }\r\n\r\n    private onClickFile(args) {\r\n        const fileName = args.name;\r\n        this.setState({\r\n            selectedFile: fileName,\r\n            okDisabled: false,\r\n        });\r\n    }\r\n}\r\n","import React, { RefObject } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport MessageBox, { IMessageBoxProps } from \"../messageBox/messageBox\";\r\n\r\n/**\r\n * Properties for Confirm Component\r\n * @member confirmButtonText - Text displayed on 'Confirm' button. Default 'Yes'\r\n * @member cancelButtonText - Text displayed on 'Cancel' button. Default 'No'\r\n * @member confirmButtonColor - Color of 'Confirm' button. Default 'primary'\r\n * @member cancelButtonColor - Color of 'Cancel' button. Default 'secondary'\r\n * @member onConfirm - Function to call on confirm\r\n * @member onCancel - Function to call on cancel\r\n */\r\nexport interface IConfirmProps extends IMessageBoxProps {\r\n    confirmButtonText?: string;\r\n    cancelButtonText?: string;\r\n    confirmButtonColor?: string;\r\n    cancelButtonColor?: string;\r\n    onConfirm: (...params: any[]) => void;\r\n    onCancel?: (...params: any[]) => void;\r\n}\r\n\r\n/**\r\n * State for Confirm Component\r\n * @member params - Open ended parameters that are passed on opening modal\r\n */\r\nexport interface IConfirmState {\r\n    params: any[];\r\n}\r\n\r\n/**\r\n * @name - Confirm\r\n * @description - Dialog for confirming an action\r\n */\r\nexport default class Confirm extends React.Component<IConfirmProps, IConfirmState> {\r\n    private messageBox: RefObject<MessageBox>;\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.state = {\r\n            params: null,\r\n        };\r\n\r\n        this.messageBox = React.createRef<MessageBox>();\r\n\r\n        this.open = this.open.bind(this);\r\n        this.close = this.close.bind(this);\r\n        this.onConfirmClick = this.onConfirmClick.bind(this);\r\n        this.onCancelClick = this.onCancelClick.bind(this);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <MessageBox ref={this.messageBox}\r\n                title={this.props.title}\r\n                message={this.props.message}\r\n                params={this.state.params}\r\n                onCancel={this.onCancelClick}>\r\n                <Button\r\n                    autoFocus={true}\r\n                    color={this.props.confirmButtonColor || \"primary\"}\r\n                    onClick={this.onConfirmClick}>{this.props.confirmButtonText || \"Yes\"}\r\n                </Button>\r\n                <Button\r\n                    color={this.props.cancelButtonColor || \"secondary\"}\r\n                    onClick={this.onCancelClick}>{this.props.cancelButtonText || \"No\"}\r\n                </Button>\r\n            </MessageBox>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Open Confirm Dialog\r\n     * @param params - Array of parameters passed to onConfirm function\r\n     */\r\n    public open(...params: any[]): void {\r\n        this.setState({ params }, () => this.messageBox.current.open());\r\n    }\r\n\r\n    /**\r\n     * Close Confirm Dialog\r\n     */\r\n    public close(): void {\r\n        this.messageBox.current.close();\r\n    }\r\n\r\n    private onConfirmClick() {\r\n        this.props.onConfirm.apply(null, this.state.params);\r\n    }\r\n\r\n    private onCancelClick() {\r\n        if (this.props.onCancel) {\r\n            this.props.onCancel.apply(null, this.state.params);\r\n        }\r\n    }\r\n}\r\n","import React, { SyntheticEvent } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport HtmlFileReader from \"../../../../common/htmlFileReader\";\r\nimport { IFileInfo } from \"../../../../models/applicationState\";\r\n\r\n/**\r\n * Properties for File Picker\r\n * @member onChange - Function to call on change of file selection\r\n * @member onError - Function to call on file picking error\r\n */\r\nexport interface IFilePickerProps {\r\n    onChange: (sender: SyntheticEvent, fileText: IFileInfo) => void;\r\n    onError: (sender: SyntheticEvent, error: any) => void;\r\n}\r\n\r\n/**\r\n * @name - File Picker\r\n * @description - Pick file from local file system\r\n */\r\nexport default class FilePicker extends React.Component<IFilePickerProps> {\r\n    private fileInput;\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.fileInput = React.createRef();\r\n        this.onFileUploaded = this.onFileUploaded.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Call click on current file input\r\n     */\r\n    public upload = () => {\r\n        this.fileInput.current.click();\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <input id={shortid.generate()} ref={this.fileInput} type=\"file\" onChange={this.onFileUploaded} />\r\n        );\r\n    }\r\n\r\n    private onFileUploaded = (e) => {\r\n        if (e.target.files.length === 0) {\r\n            this.props.onError(e, \"No files were selected\");\r\n        }\r\n\r\n        HtmlFileReader.readAsText(e.target.files[0])\r\n            .then((fileInfo) => this.props.onChange(e, fileInfo))\r\n            .catch((err) => this.props.onError(e, err));\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function RecentProjectItem({ item, onClick, onDelete }) {\r\n    return (\r\n        <li className=\"recent-project-item\">\r\n            <a onClick={onClick}>\r\n                <i className=\"fas fa-folder-open\"></i>\r\n                <span className=\"px-2\">{item.name}</span>\r\n                <div className=\"float-right delete-btn\" onClick={onDelete}><i className=\"fas fa-trash\"></i></div>\r\n            </a>\r\n        </li>\r\n    );\r\n}\r\n","import shortid from \"shortid\";\r\nimport {\r\n    IProject, ITag, IConnection, AppError, ErrorCode,\r\n    IAssetMetadata, IRegion, RegionType, AssetState, IFileInfo,\r\n    IAsset, AssetType, ModelPathType,\r\n} from \"../models/applicationState\";\r\nimport { IV1Project, IV1Region } from \"../models/v1Models\";\r\nimport packageJson from \"../../package.json\";\r\nimport { AssetService } from \"./assetService\";\r\nimport HtmlFileReader from \"../common/htmlFileReader\";\r\nimport { normalizeSlashes } from \"../common/utils\";\r\nimport Guard from \"../common/guard\";\r\n\r\n/**\r\n * Functions required for an import service\r\n * @member convertProject - Converts a v1 project to v2 project\r\n */\r\ninterface IImportService {\r\n    convertProject(project: IFileInfo): Promise<IProject>;\r\n    generateAssets(v1Project: IFileInfo, v2Project: IProject): Promise<IAssetMetadata[]>;\r\n}\r\n\r\ninterface IV1Frame {\r\n    name: string | number;\r\n    regions: IV1Region[];\r\n}\r\n\r\n/**\r\n * @name - Import Service\r\n * @description - Functions for importing v1 projects to v2 application\r\n */\r\nexport default class ImportService implements IImportService {\r\n    private assetService: AssetService;\r\n\r\n    /**\r\n     * Converts given v1 project information to v2 format\r\n     * @param projectInfo The project file information and content\r\n     */\r\n    public async convertProject(projectInfo: IFileInfo): Promise<IProject> {\r\n        Guard.null(projectInfo);\r\n\r\n        let originalProject: IV1Project;\r\n        let connection: IConnection;\r\n        let parsedTags: ITag[];\r\n\r\n        try {\r\n            originalProject = JSON.parse(projectInfo.content as string);\r\n        } catch (e) {\r\n            throw new AppError(ErrorCode.ProjectInvalidJson, \"Error parsing JSON\");\r\n        }\r\n\r\n        parsedTags = this.parseTags(originalProject);\r\n        connection = this.generateConnection(projectInfo);\r\n\r\n        // map v1 values to v2 values\r\n        return {\r\n            id: shortid.generate(),\r\n            name: projectInfo.file.name.split(\".\")[0],\r\n            version: packageJson.version,\r\n            useSecurityToken: true,\r\n            securityToken: `${projectInfo.file.name.split(\".\")[0]} Token`,\r\n            description: \"Converted V1 Project\",\r\n            tags: parsedTags,\r\n            sourceConnection: connection,\r\n            targetConnection: connection,\r\n            exportFormat: null,\r\n            videoSettings: {\r\n                frameExtractionRate: originalProject.framerate ? Number(originalProject.framerate) : 15,\r\n            },\r\n            activeLearningSettings: null,\r\n            autoSave: true,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Generate assets based on V1 Project frames and regions\r\n     * @param v1Project Original v1 Project Content and File Information\r\n     * @param v2Project Partially converted v2 project file\r\n     */\r\n    public async generateAssets(v1Project: IFileInfo, v2Project: IProject): Promise<IAssetMetadata[]> {\r\n        Guard.null(v1Project);\r\n        Guard.null(v2Project);\r\n\r\n        let originalProject: IV1Project;\r\n        let generatedAssetMetadata: IAssetMetadata[] = [];\r\n        this.assetService = new AssetService(v2Project);\r\n\r\n        originalProject = JSON.parse(v1Project.content as string);\r\n\r\n        const frames: IV1Frame[] = Object.keys(originalProject.frames).map((frameName) => {\r\n            return {\r\n                name: frameName,\r\n                regions: originalProject.frames[frameName],\r\n            };\r\n        });\r\n\r\n        if (this.isVideoProject(v1Project)) {\r\n            generatedAssetMetadata = await this.generateVideoAssets(v1Project, frames);\r\n        } else {\r\n            generatedAssetMetadata = await this.generateImageAssets(v1Project, frames);\r\n        }\r\n\r\n        return generatedAssetMetadata;\r\n    }\r\n\r\n    /**\r\n     * Generate assets for V1 Image Project frames and regions\r\n     * @param v1Project - v1 Project content and file information\r\n     * @param frames - Array of frames in v1 project\r\n     */\r\n    private async generateImageAssets(v1Project: IFileInfo, frames: IV1Frame[]): Promise<IAssetMetadata[]> {\r\n        const projectPath = normalizeSlashes(v1Project.file.path.replace(/\\.[^/.]+$/, \"\"));\r\n\r\n        return await frames.mapAsync(async (frame) => {\r\n            const filePath = `${projectPath}/${frame.name}`;\r\n            const asset = AssetService.createAssetFromFilePath(filePath);\r\n            const assetState = this.getAssetState(frame);\r\n\r\n            return await this.createAssetMetadata(asset, assetState, frame.regions);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generate assets for V1 Video Project frames and regions\r\n     * @param v1Project - v1 Project content and file information\r\n     * @param frames - Array of frames in v1 project\r\n     */\r\n    private async generateVideoAssets(v1Project: IFileInfo, frames: IV1Frame[]): Promise<IAssetMetadata[]> {\r\n        const parentVideoAsset = await this.createParentVideoAsset(v1Project);\r\n        const originalProject = JSON.parse(v1Project.content as string);\r\n\r\n        const videoFrameAssets = await frames.mapAsync(async (frame) => {\r\n            const frameInt = Number(frame.name);\r\n            const timestamp = (frameInt - 1) / Number(originalProject.framerate);\r\n            const asset = this.createVideoFrameAsset(parentVideoAsset, timestamp);\r\n            const assetState = this.getAssetState(frame);\r\n\r\n            return await this.createAssetMetadata(asset, assetState, frame.regions, parentVideoAsset);\r\n        });\r\n\r\n        const taggedAssets = videoFrameAssets\r\n            .filter((assetMetadata) => assetMetadata.asset.state === AssetState.Tagged);\r\n        const parentAssetState = taggedAssets.length > 0 ? AssetState.Tagged : AssetState.Visited;\r\n        const parentAssetMetadata = await this.createAssetMetadata(parentVideoAsset, parentAssetState, []);\r\n\r\n        return [parentAssetMetadata].concat(videoFrameAssets);\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the specified project is a video project\r\n     * @param v1Project The original v1 project file info\r\n     */\r\n    private isVideoProject(v1Project: IFileInfo): boolean {\r\n        const pathParts = v1Project.file.path.split(/[\\\\\\/]/);\r\n        const fileName = pathParts[pathParts.length - 1];\r\n        const fileNameParts = fileName.split(\".\");\r\n\r\n        return fileNameParts[1] && AssetService.getAssetType(fileNameParts[1]) === AssetType.Video;\r\n    }\r\n\r\n    /**\r\n     * Generate parent asset based on V1 Project video assets\r\n     * @param v1Project - V1 Project Content and File Information\r\n     */\r\n    private async createParentVideoAsset(v1Project: IFileInfo): Promise<IAsset> {\r\n        const filePath = v1Project.file.path.replace(/\\.[^/.]+$/, \"\");\r\n        const parentAsset = AssetService.createAssetFromFilePath(filePath, filePath.replace(/^.*[\\\\\\/]/, \"\"));\r\n        const assetProps = await HtmlFileReader.readAssetAttributes(parentAsset);\r\n\r\n        parentAsset.size = { height: assetProps.height, width: assetProps.width };\r\n        parentAsset.state = AssetState.Visited;\r\n\r\n        return parentAsset;\r\n    }\r\n\r\n    /**\r\n     * Generate connections from v1 project file location\r\n     * @param project - V1 Project Content and File Information\r\n     */\r\n    private generateConnection(project: IFileInfo): IConnection {\r\n        const folderPath = this.isVideoProject(project)\r\n            ? project.file.path.replace(/[^(\\/|\\\\)]*$/, \"\")\r\n            : project.file.path.replace(\".json\", \"\");\r\n\r\n        const connection: IConnection = {\r\n            id: shortid.generate(),\r\n            name: `${project.file.name.split(\".\")[0]} Connection`,\r\n            providerType: \"localFileSystemProxy\",\r\n            providerOptions: {\r\n                folderPath: normalizeSlashes(folderPath),\r\n            },\r\n        };\r\n\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Parse v1 project's tag string and return array of ITags\r\n     * @param project - V1 Project Content and File Information\r\n     */\r\n    private parseTags(project: IV1Project): ITag[] {\r\n        const tagStrings = project.inputTags.split(\",\");\r\n\r\n        return tagStrings\r\n            .map((tagName, index) => {\r\n                return {\r\n                    name: tagName,\r\n                    color: project.tag_colors[index],\r\n                } as ITag;\r\n            })\r\n            .filter((tag) => !!tag.name);\r\n    }\r\n\r\n    /**\r\n     * Generate regions based on V1 Project asset metadata\r\n     * @param metadata - Asset Metadata from asset created from file path\r\n     * @param frameRegions - V1 Regions within the V1 Frame\r\n     */\r\n    private addRegions(metadata: IAssetMetadata, frameRegions: IV1Region[]): void {\r\n        frameRegions.forEach((region) => {\r\n            const generatedRegion: IRegion = {\r\n                id: region.UID,\r\n                type: RegionType.Rectangle,\r\n                tags: region.tags,\r\n                points: [\r\n                    { x: region.x1, y: region.y1 },\r\n                    { x: region.x1, y: region.y2 },\r\n                    { x: region.x2, y: region.y1 },\r\n                    { x: region.x2, y: region.y2 },\r\n                ],\r\n                boundingBox: {\r\n                    height: (region.y2 - region.y1),\r\n                    width: (region.x2 - region.x1),\r\n                    left: region.x1,\r\n                    top: region.y1,\r\n                },\r\n            };\r\n            metadata.regions.push(generatedRegion);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a child video frame asset\r\n     * @param parent The parent video asset\r\n     * @param timestamp The timestamp for the child video frame\r\n     */\r\n    private createVideoFrameAsset(parent: IAsset, timestamp: number): IAsset {\r\n        return {\r\n            ...AssetService.createAssetFromFilePath(`${parent.path}#t=${timestamp}`),\r\n            timestamp,\r\n            parent,\r\n            type: AssetType.VideoFrame,\r\n            size: parent.size,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the v2 asset state for the specified v1 asset frame\r\n     * @param frame The v1 asset frame\r\n     */\r\n    private getAssetState(frame: IV1Frame): AssetState {\r\n        return frame.regions.length > 0 ? AssetState.Tagged : AssetState.Visited;\r\n    }\r\n\r\n    /**\r\n     * Creates an asset metadata for the specified asset\r\n     * @param asset The converted v2 asset\r\n     * @param assetState The new v2 asset state\r\n     * @param frameRegions The v1 asset regions\r\n     * @param parent The v2 parent asset (Used for video assets)\r\n     */\r\n    private async createAssetMetadata(\r\n        asset: IAsset,\r\n        assetState: AssetState,\r\n        frameRegions: IV1Region[],\r\n        parent?: IAsset,\r\n    ): Promise<IAssetMetadata> {\r\n        const metadata = await this.assetService.getAssetMetadata(asset);\r\n        this.addRegions(metadata, frameRegions);\r\n        metadata.asset.state = assetState;\r\n\r\n        if (parent) {\r\n            metadata.asset.parent = parent;\r\n        }\r\n\r\n        if (!metadata.asset.size) {\r\n            metadata.asset.size = await HtmlFileReader.readAssetAttributes(asset);\r\n        }\r\n\r\n        return metadata;\r\n    }\r\n}\r\n","import React, { SyntheticEvent } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { strings, interpolate } from \"../../../../common/strings\";\r\nimport IProjectActions, * as projectActions from \"../../../../redux/actions/projectActions\";\r\nimport IApplicationActions, * as applicationActions from \"../../../../redux/actions/applicationActions\";\r\nimport { CloudFilePicker } from \"../../common/cloudFilePicker/cloudFilePicker\";\r\nimport CondensedList from \"../../common/condensedList/condensedList\";\r\nimport Confirm from \"../../common/confirm/confirm\";\r\nimport FilePicker from \"../../common/filePicker/filePicker\";\r\nimport \"./homePage.scss\";\r\nimport RecentProjectItem from \"./recentProjectItem\";\r\nimport { constants } from \"../../../../common/constants\";\r\nimport {\r\n    IApplicationState, IConnection, IProject, IFileInfo,\r\n    ErrorCode, AppError, IAppError, IAppSettings, IAsset,\r\n} from \"../../../../models/applicationState\";\r\nimport ImportService from \"../../../../services/importService\";\r\nimport { IAssetMetadata } from \"../../../../models/applicationState\";\r\nimport { toast } from \"react-toastify\";\r\nimport MessageBox from \"../../common/messageBox/messageBox\";\r\nimport { isElectron } from \"../../../../common/hostProcess\";\r\n\r\nexport interface IHomePageProps extends RouteComponentProps, React.Props<HomePage> {\r\n    recentProjects: IProject[];\r\n    connections: IConnection[];\r\n    actions: IProjectActions;\r\n    applicationActions: IApplicationActions;\r\n    appSettings: IAppSettings;\r\n    project: IProject;\r\n}\r\n\r\nexport interface IHomePageState {\r\n    cloudPickerOpen: boolean;\r\n}\r\n\r\nfunction mapStateToProps(state: IApplicationState) {\r\n    return {\r\n        recentProjects: state.recentProjects,\r\n        connections: state.connections,\r\n        appSettings: state.appSettings,\r\n        project: state.currentProject,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators(projectActions, dispatch),\r\n        applicationActions: bindActionCreators(applicationActions, dispatch),\r\n    };\r\n}\r\n\r\n@connect(mapStateToProps, mapDispatchToProps)\r\nexport default class HomePage extends React.Component<IHomePageProps, IHomePageState> {\r\n    public state: IHomePageState = {\r\n        cloudPickerOpen: false,\r\n    };\r\n    private filePicker: React.RefObject<FilePicker> = React.createRef();\r\n    private deleteConfirm: React.RefObject<Confirm> = React.createRef();\r\n    private cloudFilePicker: React.RefObject<CloudFilePicker> = React.createRef();\r\n    private importConfirm: React.RefObject<Confirm> = React.createRef();\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"app-homepage\">\r\n                <div className=\"app-homepage-main\">\r\n                    <ul>\r\n                        <li>\r\n                            <a href=\"#\" onClick={this.createNewProject} className=\"p-5 new-project\">\r\n                                <i className=\"fas fa-folder-plus fa-9x\"></i>\r\n                                <h6>{strings.homePage.newProject}</h6>\r\n                            </a>\r\n                        </li>\r\n                        {isElectron() &&\r\n                            <li>\r\n                                <a href=\"#\" className=\"p-5 file-upload\"\r\n                                    onClick={() => this.filePicker.current.upload()} >\r\n                                    <i className=\"fas fa-folder-open fa-9x\"></i>\r\n                                    <h6>{strings.homePage.openLocalProject.title}</h6>\r\n                                </a>\r\n                                <FilePicker ref={this.filePicker}\r\n                                    onChange={this.onProjectFileUpload}\r\n                                    onError={this.onProjectFileUploadError} />\r\n                            </li>\r\n                        }\r\n                        <li>\r\n                            {/*Open Cloud Project*/}\r\n                            <a href=\"#\" onClick={this.handleOpenCloudProjectClick} className=\"p-5 cloud-open-project\">\r\n                                <i className=\"fas fa-cloud fa-9x\"></i>\r\n                                <h6>{strings.homePage.openCloudProject.title}</h6>\r\n                            </a>\r\n                            <CloudFilePicker\r\n                                ref={this.cloudFilePicker}\r\n                                connections={this.props.connections}\r\n                                onSubmit={(content) => this.loadSelectedProject(JSON.parse(content))}\r\n                                fileExtension={constants.projectFileExtension}\r\n                            />\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                {(this.props.recentProjects && this.props.recentProjects.length > 0) &&\r\n                    <div className=\"app-homepage-recent bg-lighter-1\">\r\n                        <CondensedList\r\n                            title={strings.homePage.recentProjects}\r\n                            Component={RecentProjectItem}\r\n                            items={this.props.recentProjects}\r\n                            onClick={this.loadSelectedProject}\r\n                            onDelete={(project) => this.deleteConfirm.current.open(project)} />\r\n                    </div>\r\n                }\r\n                <Confirm title=\"Delete Project\"\r\n                    ref={this.deleteConfirm as any}\r\n                    message={(project: IProject) => `${strings.homePage.deleteProject.confirmation} ${project.name}?`}\r\n                    confirmButtonColor=\"danger\"\r\n                    onConfirm={this.deleteProject} />\r\n                <Confirm title=\"Import Project\"\r\n                    ref={this.importConfirm as any}\r\n                    message={(project: IFileInfo) =>\r\n                        interpolate(strings.homePage.importProject.confirmation, { project })}\r\n                    confirmButtonColor=\"danger\"\r\n                    onConfirm={this.convertProject} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private createNewProject = (e: SyntheticEvent) => {\r\n        this.props.actions.closeProject();\r\n        this.props.history.push(\"/projects/create\");\r\n\r\n        e.preventDefault();\r\n    }\r\n\r\n    private handleOpenCloudProjectClick = () => {\r\n        this.cloudFilePicker.current.open();\r\n    }\r\n\r\n    private onProjectFileUpload = async (e, project) => {\r\n        let projectJson: IProject;\r\n\r\n        try {\r\n            projectJson = JSON.parse(project.content);\r\n        } catch (error) {\r\n            throw new AppError(ErrorCode.ProjectInvalidJson, \"Error parsing JSON\");\r\n        }\r\n\r\n        // need a better check to tell if its v1\r\n        if (projectJson.name === null || projectJson.name === undefined) {\r\n            try {\r\n                await this.importConfirm.current.open(project);\r\n            } catch (e) {\r\n                throw new Error(e.message);\r\n            }\r\n        } else {\r\n            await this.loadSelectedProject(projectJson);\r\n        }\r\n    }\r\n\r\n    private onProjectFileUploadError = (e, error: any) => {\r\n        if (error instanceof AppError) {\r\n            throw error;\r\n        }\r\n\r\n        throw new AppError(ErrorCode.ProjectUploadError, \"Error uploading project file\");\r\n    }\r\n\r\n    private loadSelectedProject = async (project: IProject) => {\r\n        await this.props.actions.loadProject(project);\r\n        this.props.history.push(`/projects/${project.id}/edit`);\r\n    }\r\n\r\n    private deleteProject = async (project: IProject) => {\r\n        try {\r\n            await this.props.actions.deleteProject(project);\r\n            toast.info(interpolate(strings.homePage.messages.deleteSuccess, { project }));\r\n        } catch (error) {\r\n            throw new AppError(ErrorCode.ProjectDeleteError, \"Error deleting project file\");\r\n        }\r\n    }\r\n\r\n    private convertProject = async (projectInfo: IFileInfo) => {\r\n        const importService = new ImportService();\r\n        let generatedAssetMetadata: IAssetMetadata[];\r\n        let project: IProject;\r\n\r\n        try {\r\n            project = await importService.convertProject(projectInfo);\r\n        } catch (e) {\r\n            throw new AppError(ErrorCode.V1ImportError, \"Error converting v1 project file\");\r\n        }\r\n\r\n        this.props.applicationActions.ensureSecurityToken(project);\r\n\r\n        try {\r\n            generatedAssetMetadata = await importService.generateAssets(projectInfo, project);\r\n            await this.props.actions.saveProject(project);\r\n            await this.props.actions.loadProject(project);\r\n            await generatedAssetMetadata.mapAsync((assetMetadata) => {\r\n                return this.props.actions.saveAssetMetadata(this.props.project, assetMetadata);\r\n            });\r\n        } catch (e) {\r\n            throw new Error(`Error importing project information - ${e.message}`);\r\n        }\r\n\r\n        await this.props.actions.saveProject(this.props.project);\r\n        await this.loadSelectedProject(this.props.project);\r\n    }\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport { FieldTemplateProps } from \"react-jsonschema-form\";\r\n\r\nexport default function CustomFieldTemplate(props: FieldTemplateProps) {\r\n    const { id, label, required, description, rawErrors, schema, uiSchema, children } = props;\r\n    const classNames = [];\r\n    if (props.schema.type === \"object\") {\r\n        classNames.push(\"object-wrapper\");\r\n    } else {\r\n        classNames.push(\"form-group\");\r\n    }\r\n\r\n    if (rawErrors && rawErrors.length > 0) {\r\n        classNames.push(\"is-invalid\");\r\n    } else {\r\n        classNames.push(\"is-valid\");\r\n    }\r\n\r\n    return (\r\n        <div className={classNames.join(\" \")}>\r\n            { /* Render label for non-objects except for when an object has defined a ui:field template */}\r\n            {schema.type !== \"array\" &&\r\n                (schema.type !== \"object\" || (schema.type === \"object\" && uiSchema[\"ui:field\"])) &&\r\n                <label htmlFor={id}>{label}{required ? \"*\" : null}</label>\r\n            }\r\n            {schema.type === \"array\" &&\r\n                <Fragment>\r\n                    <h4>{label}</h4>\r\n                    {description && <small>{description}</small>}\r\n                </Fragment>\r\n            }\r\n            {children}\r\n            {schema.type !== \"array\" && description && <small className=\"text-muted\">{description}</small>}\r\n            {rawErrors && rawErrors.length > 0 &&\r\n                <div className=\"invalid-feedback\">\r\n                    {rawErrors.map((errorMessage, idx) => <div key={idx}>{label} {errorMessage}</div>)}\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { LocalFileSystemProxy } from \"../../../../providers/storage/localFileSystemProxy\";\r\nimport { strings } from \"../../../../common/strings\";\r\n\r\n/**\r\n * Properties for Local Folder Picker\r\n * @member id - ID for HTML form control element\r\n * @member value - Initial value for picker\r\n * @member onChange - Function to call on change to selected value\r\n */\r\ninterface ILocalFolderPickerProps {\r\n    id?: string;\r\n    value: string;\r\n    onChange: (value) => void;\r\n}\r\n\r\n/**\r\n * State for Local Folder Picker\r\n * @member value - Selected folder\r\n */\r\ninterface ILocalFolderPickerState {\r\n    value: string;\r\n}\r\n\r\n/**\r\n * @name - Local Folder Picker\r\n * @description - Select folder from local file system\r\n */\r\nexport default class LocalFolderPicker extends React.Component<ILocalFolderPickerProps, ILocalFolderPickerState> {\r\n    private localFileSystem: LocalFileSystemProxy;\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.state = {\r\n            value: this.props.value || \"\",\r\n        };\r\n\r\n        this.localFileSystem = new LocalFileSystemProxy();\r\n        this.selectLocalFolder = this.selectLocalFolder.bind(this);\r\n    }\r\n\r\n    public render() {\r\n        const { id } = this.props;\r\n        const { value } = this.state;\r\n\r\n        return (\r\n            <div className=\"input-group\">\r\n                <input id={id} type=\"text\" className=\"form-control\" value={value} readOnly={true} />\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-primary\"\r\n                        type=\"button\"\r\n                        onClick={this.selectLocalFolder}>{strings.connections.providers.local.selectFolder}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidUpdate(prevProps) {\r\n        if (prevProps.value !== this.props.value) {\r\n            this.setState({\r\n                value: this.props.value,\r\n            });\r\n        }\r\n    }\r\n\r\n    private selectLocalFolder = async () => {\r\n        const filePath = await this.localFileSystem.selectContainer();\r\n        if (filePath) {\r\n            this.setState({\r\n                value: filePath,\r\n            }, () => this.props.onChange(filePath));\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { FieldProps, WidgetProps } from \"react-jsonschema-form\";\r\nimport Guard from \"../../../../common/guard\";\r\n\r\n/**\r\n * Custom field for react-jsonschema-form\r\n * @param Widget UI Widget for form\r\n * @param mapProps Function mapping props to an object\r\n */\r\nexport function CustomField<Props = {}>(Widget: any, mapProps?: (props: FieldProps) => Props) {\r\n    Guard.null(Widget);\r\n\r\n    return function render(props: FieldProps) {\r\n        const widgetProps = mapProps ? mapProps(props) : props;\r\n        return (<Widget {...widgetProps} />);\r\n    };\r\n}\r\n\r\n/**\r\n * Custom widget for react-jsonschema-form\r\n * @param Widget UI Widget for form\r\n * @param mapProps Function mapping component props to form widget props\r\n */\r\nexport function CustomWidget<Props = {}>(Widget: any, mapProps?: (props: WidgetProps) => Props) {\r\n    Guard.null(Widget);\r\n\r\n    return function render(props: WidgetProps) {\r\n        const widgetProps = mapProps ? mapProps(props) : props;\r\n        return (<Widget {...widgetProps} />);\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport Form, { ISubmitEvent, IChangeEvent, Widget } from \"react-jsonschema-form\";\r\nimport { IActiveLearningSettings, ModelPathType } from \"../../../../models/applicationState\";\r\nimport { strings, addLocValues } from \"../../../../common/strings\";\r\nimport CustomFieldTemplate from \"../../common/customField/customFieldTemplate\";\r\nimport LocalFolderPicker from \"../../common/localFolderPicker/localFolderPicker\";\r\nimport { CustomWidget } from \"../../common/customField/customField\";\r\nimport Checkbox from \"rc-checkbox\";\r\n\r\n// tslint:disable-next-line:no-var-requires\r\nconst formSchema = addLocValues(require(\"./activeLearningForm.json\"));\r\n// tslint:disable-next-line:no-var-requires\r\nconst uiSchema = addLocValues(require(\"./activeLearningForm.ui.json\"));\r\n\r\nexport interface IActiveLearningFormProps extends React.Props<ActiveLearningForm> {\r\n    settings: IActiveLearningSettings;\r\n    onSubmit: (settings: IActiveLearningSettings) => void;\r\n    onChange?: (settings: IActiveLearningSettings) => void;\r\n    onCancel?: () => void;\r\n}\r\n\r\nexport interface IActiveLearningFormState {\r\n    classNames: string[];\r\n    formData: IActiveLearningSettings;\r\n    uiSchema: any;\r\n    formSchema: any;\r\n}\r\n\r\nexport class ActiveLearningForm extends React.Component<IActiveLearningFormProps, IActiveLearningFormState> {\r\n    public state: IActiveLearningFormState = {\r\n        classNames: [\"needs-validation\"],\r\n        uiSchema: { ...uiSchema },\r\n        formSchema: { ...formSchema },\r\n        formData: {\r\n            ...this.props.settings,\r\n        },\r\n    };\r\n\r\n    private widgets = {\r\n        localFolderPicker: (LocalFolderPicker as any) as Widget,\r\n        checkbox: CustomWidget(Checkbox, (props) => ({\r\n            checked: props.value,\r\n            onChange: (value) => props.onChange(value.target.checked),\r\n            disabled: props.disabled,\r\n        })),\r\n    };\r\n\r\n    public componentDidUpdate(prevProps: Readonly<IActiveLearningFormProps>) {\r\n        if (this.props.settings !== prevProps.settings) {\r\n            this.setState({ formData: this.props.settings });\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <Form\r\n                className={this.state.classNames.join(\" \")}\r\n                showErrorList={false}\r\n                liveValidate={true}\r\n                noHtml5Validate={true}\r\n                FieldTemplate={CustomFieldTemplate}\r\n                widgets={this.widgets}\r\n                schema={this.state.formSchema}\r\n                uiSchema={this.state.uiSchema}\r\n                formData={this.state.formData}\r\n                onChange={this.onFormChange}\r\n                onSubmit={this.onFormSubmit}>\r\n                <div>\r\n                    <button className=\"btn btn-success mr-1\" type=\"submit\">{strings.projectSettings.save}</button>\r\n                    <button className=\"btn btn-secondary btn-cancel\"\r\n                        type=\"button\"\r\n                        onClick={this.onFormCancel}>{strings.common.cancel}</button>\r\n                </div>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    private onFormChange = (changeEvent: IChangeEvent<IActiveLearningSettings>): void => {\r\n        let updatedSettings = changeEvent.formData;\r\n\r\n        if (changeEvent.formData.modelPathType !== this.state.formData.modelPathType) {\r\n            updatedSettings = {\r\n                ...changeEvent.formData,\r\n                modelPath: null,\r\n                modelUrl: null,\r\n            };\r\n        }\r\n\r\n        this.setState({\r\n            formData: updatedSettings,\r\n        }, () => {\r\n            if (this.props.onChange) {\r\n                this.props.onChange(updatedSettings);\r\n            }\r\n        });\r\n    }\r\n\r\n    private onFormSubmit = (args: ISubmitEvent<IActiveLearningSettings>): void => {\r\n        const settings: IActiveLearningSettings = {\r\n            ...args.formData,\r\n        };\r\n\r\n        this.setState({ formData: settings });\r\n        this.props.onSubmit(settings);\r\n    }\r\n\r\n    private onFormCancel = (): void => {\r\n        if (this.props.onCancel) {\r\n            this.props.onCancel();\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { IActiveLearningSettings, IProject, IApplicationState } from \"../../../../models/applicationState\";\r\nimport IProjectActions, * as projectActions from \"../../../../redux/actions/projectActions\";\r\nimport { strings } from \"../../../../common/strings\";\r\nimport { ActiveLearningForm } from \"./activeLearningForm\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport interface IActiveLearningPageProps extends RouteComponentProps, React.Props<ActiveLearningPage> {\r\n    project: IProject;\r\n    recentProjects: IProject[];\r\n    actions: IProjectActions;\r\n}\r\n\r\nexport interface IActiveLearningPageState {\r\n    settings: IActiveLearningSettings;\r\n}\r\n\r\nfunction mapStateToProps(state: IApplicationState) {\r\n    return {\r\n        project: state.currentProject,\r\n        recentProjects: state.recentProjects,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators(projectActions, dispatch),\r\n    };\r\n}\r\n\r\n@connect(mapStateToProps, mapDispatchToProps)\r\nexport default class ActiveLearningPage extends React.Component<IActiveLearningPageProps, IActiveLearningPageState> {\r\n    public state: IActiveLearningPageState = {\r\n        settings: this.props.project ? this.props.project.activeLearningSettings : null,\r\n    };\r\n\r\n    public async componentDidMount() {\r\n        const projectId = this.props.match.params[\"projectId\"];\r\n        // If we are creating a new project check to see if there is a partial\r\n        // project already created in local storage\r\n        if (!this.props.project && projectId) {\r\n            const projectToLoad = this.props.recentProjects.find((project) => project.id === projectId);\r\n            if (projectToLoad) {\r\n                await this.props.actions.loadProject(projectToLoad);\r\n            }\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: Readonly<IActiveLearningPageProps>) {\r\n        if (prevProps.project !== this.props.project) {\r\n            this.setState({ settings: this.props.project.activeLearningSettings });\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"project-settings-page\">\r\n                <div className=\"project-settings-page-settings m-3\">\r\n                    <h3>\r\n                        <i className=\"fas fa-graduation-cap\" />\r\n                        <span className=\"px-2\">\r\n                            {strings.activeLearning.title}\r\n                        </span>\r\n                    </h3>\r\n                    <div className=\"m-3\">\r\n                        <ActiveLearningForm\r\n                            settings={this.state.settings}\r\n                            onSubmit={this.onFormSubmit}\r\n                            onCancel={this.onFormCancel} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onFormSubmit = async (settings: IActiveLearningSettings): Promise<void> => {\r\n        const updatedProject: IProject = {\r\n            ...this.props.project,\r\n            activeLearningSettings: settings,\r\n        };\r\n\r\n        await this.props.actions.saveProject(updatedProject);\r\n        toast.success(strings.activeLearning.messages.saveSuccess);\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    private onFormCancel = (): void => {\r\n        this.props.history.goBack();\r\n    }\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport { ObjectFieldTemplateProps } from \"react-jsonschema-form\";\r\n\r\nexport function ObjectFieldTemplate(props: ObjectFieldTemplateProps) {\r\n    return (\r\n        <Fragment>\r\n            {props.title}\r\n            {props.description}\r\n            {props.properties.map((item) => item.content)}\r\n        </Fragment>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { ArrayFieldTemplateProps } from \"react-jsonschema-form\";\r\nimport { strings } from \"../../../../common/strings\";\r\n\r\nexport function ArrayFieldTemplate(props: ArrayFieldTemplateProps) {\r\n    return (\r\n        <div>\r\n            {props.canAdd &&\r\n                <div className=\"array-field-toolbar my-3\">\r\n                    <button type=\"button\" className=\"btn btn-info\" onClick={props.onAddClick}>\r\n                        <i className=\"fas fa-plus-circle\"></i>\r\n                        <span className=\"ml-1\">Add {props.schema.title}</span>\r\n                    </button>\r\n                </div>\r\n            }\r\n            {props.items.map((item) => {\r\n                return <div className=\"form-row\" key={item.index}>\r\n                    {item.children}\r\n                    {item.hasRemove &&\r\n                        <div className=\"array-item-toolbar\">\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-sm btn-danger\"\r\n                                onClick={item.onDropIndexClick(item.index)}>\r\n                                <i className=\"fas fa-trash\"></i>\r\n                                <span className=\"ml-1\">{strings.common.delete}</span>\r\n                            </button>\r\n                        </div>\r\n                    }\r\n                </div>;\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n","import React, { RefObject, SyntheticEvent } from \"react\";\r\n\r\n/**\r\n * Protected input properties\r\n * @member value - The value to bind to the component\r\n * @member securityToken - Optional value used to encrypt/decrypt the value\r\n */\r\nexport interface IProtectedInputProps extends React.Props<ProtectedInput> {\r\n    id: string;\r\n    value: string;\r\n    readOnly?: boolean;\r\n    onChange: (value: string) => void;\r\n}\r\n\r\n/** Protected input state\r\n * @member showKey - Whether or not the input field renders as text or password field type\r\n * @member decryptedValue - The decrypted value to bind to the input field\r\n */\r\nexport interface IProtectedInputState {\r\n    showKey: boolean;\r\n    value: string;\r\n}\r\n\r\n/**\r\n * Protected input Component\r\n * @description - Used for sensitive fields such as passwords, keys, tokens, etc\r\n */\r\nexport class ProtectedInput extends React.Component<IProtectedInputProps, IProtectedInputState> {\r\n    private inputElement: RefObject<HTMLInputElement> = React.createRef<HTMLInputElement>();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showKey: false,\r\n            value: this.props.value || \"\",\r\n        };\r\n\r\n        this.toggleKeyVisibility = this.toggleKeyVisibility.bind(this);\r\n        this.copyKey = this.copyKey.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.props.onChange(this.props.value);\r\n    }\r\n\r\n    public render() {\r\n        const { id, readOnly } = this.props;\r\n        const { showKey, value } = this.state;\r\n\r\n        return (\r\n            <div className=\"input-group\">\r\n                <input id={id}\r\n                    ref={this.inputElement}\r\n                    type={showKey ? \"text\" : \"password\"}\r\n                    readOnly={readOnly}\r\n                    className=\"form-control\"\r\n                    value={value}\r\n                    onChange={this.onChange} />\r\n                <div className=\"input-group-append\">\r\n                    <button type=\"button\"\r\n                        title={showKey ? \"Hide\" : \"Show\"}\r\n                        className=\"btn btn-primary btn-visibility\"\r\n                        onClick={this.toggleKeyVisibility}>\r\n                        <i className={showKey ? \"fas fa-eye-slash\" : \"fas fa-eye\"}></i>\r\n                    </button>\r\n                    <button type=\"button\"\r\n                        title=\"Copy\"\r\n                        className=\"btn btn-primary btn-copy\"\r\n                        onClick={this.copyKey}>\r\n                        <i className=\"fas fa-copy\"></i>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onChange(e: SyntheticEvent) {\r\n        const input = e.target as HTMLInputElement;\r\n        const value = input.value ? input.value : undefined;\r\n        this.setState({ value }, () => this.props.onChange(value));\r\n    }\r\n\r\n    private toggleKeyVisibility() {\r\n        this.setState({\r\n            showKey: !this.state.showKey,\r\n        });\r\n    }\r\n\r\n    private async copyKey() {\r\n        const clipboard = (navigator as any).clipboard;\r\n        await clipboard.writeText(this.inputElement.current.value);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { strings, addLocValues } from \"../../../../common/strings\";\r\nimport Form, { FormValidation, Widget } from \"react-jsonschema-form\";\r\nimport { ObjectFieldTemplate } from \"../../common/objectField/objectFieldTemplate\";\r\nimport CustomFieldTemplate from \"../../common/customField/customFieldTemplate\";\r\nimport { ArrayFieldTemplate } from \"../../common/arrayField/arrayFieldTemplate\";\r\nimport { IAppSettings } from \"../../../../models/applicationState\";\r\nimport { ProtectedInput } from \"../../common/protectedInput/protectedInput\";\r\nimport { CustomField } from \"../../common/customField/customField\";\r\nimport { generateKey } from \"../../../../common/crypto\";\r\n// tslint:disable-next-line:no-var-requires\r\nconst formSchema = addLocValues(require(\"./appSettingsForm.json\"));\r\n// tslint:disable-next-line:no-var-requires\r\nconst uiSchema = addLocValues(require(\"./appSettingsForm.ui.json\"));\r\n\r\nexport interface IAppSettingsFormProps extends React.Props<AppSettingsForm> {\r\n    appSettings: IAppSettings;\r\n    onSubmit: (appSettings: IAppSettings) => void;\r\n    onCancel?: () => void;\r\n}\r\n\r\nexport interface IAppSettingsFormState {\r\n    classNames: string[];\r\n    formSchema: any;\r\n    uiSchema: any;\r\n    appSettings: IAppSettings;\r\n}\r\n\r\nexport class AppSettingsForm extends React.Component<IAppSettingsFormProps, IAppSettingsFormState> {\r\n    private fields = {\r\n        securityToken: CustomField(ProtectedInput, (props) => ({\r\n            id: props.idSchema.$id,\r\n            value: props.formData || generateKey(),\r\n            onChange: props.onChange,\r\n        })),\r\n    };\r\n\r\n    constructor(props: IAppSettingsFormProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            formSchema: { ...formSchema },\r\n            uiSchema: { ...uiSchema },\r\n            appSettings: { ...this.props.appSettings },\r\n            classNames: [\"needs-validation\"],\r\n        };\r\n\r\n        this.onFormValidate = this.onFormValidate.bind(this);\r\n        this.onFormCancel = this.onFormCancel.bind(this);\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: IAppSettingsFormProps) {\r\n        if (prevProps.appSettings !== this.props.appSettings) {\r\n            this.setState({\r\n                appSettings: { ...this.props.appSettings },\r\n            });\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"app-settings-page-form p-3\">\r\n                <h3 className=\"mb-3\">\r\n                    <i className=\"fas fa-cog fa-1x\"></i>\r\n                    <span className=\"px-2\">{strings.appSettings.title}</span>\r\n                </h3>\r\n                <div className=\"m-3\">\r\n                    <Form\r\n                        className={this.state.classNames.join(\" \")}\r\n                        showErrorList={false}\r\n                        liveValidate={true}\r\n                        noHtml5Validate={true}\r\n                        fields={this.fields}\r\n                        ObjectFieldTemplate={ObjectFieldTemplate}\r\n                        FieldTemplate={CustomFieldTemplate}\r\n                        ArrayFieldTemplate={ArrayFieldTemplate}\r\n                        validate={this.onFormValidate}\r\n                        schema={this.state.formSchema}\r\n                        uiSchema={this.state.uiSchema}\r\n                        formData={this.state.appSettings}\r\n                        onSubmit={(form) => this.props.onSubmit(form.formData)}>\r\n                        <div>\r\n                            <button type=\"submit\" className=\"btn btn-success mr-1\">{strings.appSettings.save}</button>\r\n                            <button type=\"button\"\r\n                                className=\"btn btn-secondary btn-cancel\"\r\n                                onClick={this.onFormCancel}>{strings.common.cancel}</button>\r\n                        </div>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onFormValidate(appSettings: IAppSettings, errors: FormValidation) {\r\n        if (this.state.classNames.indexOf(\"was-validated\") === -1) {\r\n            this.setState({\r\n                classNames: [...this.state.classNames, \"was-validated\"],\r\n            });\r\n        }\r\n\r\n        return errors;\r\n    }\r\n\r\n    private onFormCancel() {\r\n        if (this.props.onCancel) {\r\n            this.props.onCancel();\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport IApplicationActions, * as applicationActions from \"../../../../redux/actions/applicationActions\";\r\nimport { IApplicationState, IAppSettings } from \"../../../../models/applicationState\";\r\nimport \"./appSettingsPage.scss\";\r\nimport { strings } from \"../../../../common/strings\";\r\nimport { AppSettingsForm } from \"./appSettingsForm\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { appInfo } from \"../../../../common/appInfo\";\r\nimport { isElectron } from \"../../../../common/hostProcess\";\r\n\r\n/**\r\n * Props for App Settings Page\r\n * @member appSettings - Current Application settings\r\n * @member connections - Application connections\r\n * @member actions - Application actions\r\n */\r\nexport interface IAppSettingsProps extends RouteComponentProps, React.Props<AppSettingsPage> {\r\n    appSettings: IAppSettings;\r\n    actions: IApplicationActions;\r\n}\r\n\r\n/**\r\n * State for App Settings Page\r\n * @member formSchema - JSON Form Schema for page\r\n * @member uiSchema - JSON Form UI Schema for page\r\n * @member appSettings - Application settings\r\n */\r\nfunction mapStateToProps(state: IApplicationState) {\r\n    return {\r\n        appSettings: state.appSettings,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators(applicationActions, dispatch),\r\n    };\r\n}\r\n\r\n/**\r\n * Page for viewing and editing application settings\r\n */\r\n@connect(mapStateToProps, mapDispatchToProps)\r\nexport default class AppSettingsPage extends React.Component<IAppSettingsProps> {\r\n    constructor(props: IAppSettingsProps) {\r\n        super(props);\r\n\r\n        this.toggleDevTools = this.toggleDevTools.bind(this);\r\n        this.reloadApp = this.reloadApp.bind(this);\r\n        this.onFormSubmit = this.onFormSubmit.bind(this);\r\n        this.onFormCancel = this.onFormCancel.bind(this);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"app-settings-page\">\r\n                <AppSettingsForm\r\n                    appSettings={this.props.appSettings}\r\n                    onSubmit={this.onFormSubmit}\r\n                    onCancel={this.onFormCancel} />\r\n                <div className=\"app-settings-page-sidebar p-3 bg-lighter-1\">\r\n                    <div className=\"my-3\">\r\n                        <p>{`${strings.appSettings.version.description} ${appInfo.version}`}</p>\r\n                    </div>\r\n                    <div className=\"my-3\">\r\n                        <p>{`${strings.appSettings.commit}: `} {process.env.REACT_APP_COMMIT_SHA}</p>\r\n                    </div>\r\n                    { isElectron() &&\r\n                    <span>\r\n                        <div className=\"my-3\">\r\n                            <p>{strings.appSettings.devTools.description}</p>\r\n                            <button id=\"toggleDevTools\" className=\"btn btn-primary btn-sm\"\r\n                                onClick={this.toggleDevTools}>{strings.appSettings.devTools.button}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"my-3\">\r\n                            <p>{strings.appSettings.reload.description}</p>\r\n                            <button id=\"refreshApp\" className=\"btn btn-primary btn-sm\"\r\n                                onClick={this.reloadApp}>{strings.appSettings.reload.button}\r\n                            </button>\r\n                        </div>\r\n                    </span>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private async onFormSubmit(appSettings: IAppSettings) {\r\n        await this.props.actions.saveAppSettings(appSettings);\r\n        toast.success(strings.appSettings.messages.saveSuccess);\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    private onFormCancel() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    private toggleDevTools = async () => {\r\n        await this.props.actions.toggleDevTools(!this.props.appSettings.devToolsEnabled);\r\n    }\r\n\r\n    private reloadApp = async () => {\r\n        await this.props.actions.reloadApplication();\r\n    }\r\n}\r\n","import shortid from \"shortid\";\r\nimport Guard from \"../common/guard\";\r\nimport { IConnection } from \"../models/applicationState\";\r\nimport { AssetProviderFactory } from \"../providers/storage/assetProviderFactory\";\r\n\r\n/**\r\n * Functions required for a connection service\r\n * @member save - Save a connection\r\n */\r\nexport interface IConnectionService {\r\n    save(connection: IConnection): Promise<IConnection>;\r\n}\r\n\r\n/**\r\n * @name - Connection Service\r\n * @description - Functions for dealing with project connections\r\n */\r\nexport default class ConnectionService implements IConnectionService {\r\n\r\n    /**\r\n     * Save a connection\r\n     * @param connection - Connection to save\r\n     */\r\n    public save(connection: IConnection) {\r\n        Guard.null(connection);\r\n\r\n        return new Promise<IConnection>(async (resolve, reject) => {\r\n            try {\r\n                if (!connection.id) {\r\n                    connection.id = shortid.generate();\r\n                }\r\n\r\n                const assetProvider = AssetProviderFactory.createFromConnection(connection);\r\n                if (assetProvider.initialize) {\r\n                    await assetProvider.initialize();\r\n                }\r\n\r\n                resolve(connection);\r\n            } catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import shortid from \"shortid\";\r\nimport { IConnection } from \"../../models/applicationState\";\r\nimport { ActionTypes } from \"./actionTypes\";\r\nimport { IPayloadAction, createPayloadAction } from \"./actionCreators\";\r\nimport { Dispatch } from \"redux\";\r\nimport ConnectionService from \"../../services/connectionService\";\r\n\r\n/**\r\n * Actions to be performed in relation to connections\r\n */\r\nexport default interface IConnectionActions {\r\n    loadConnection(connection: IConnection): Promise<IConnection>;\r\n    saveConnection(connection: IConnection): Promise<IConnection>;\r\n    deleteConnection(connection: IConnection): Promise<void>;\r\n}\r\n\r\n/**\r\n * Dispatches Load Connection action and resolves with IConnection\r\n * @param connection - Connection to load\r\n */\r\nexport function loadConnection(connection: IConnection): (dispatch: Dispatch) => Promise<IConnection> {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(loadConnectionAction(connection));\r\n        return Promise.resolve(connection);\r\n    };\r\n}\r\n\r\n/**\r\n * Dispatches Save Connection action and resolves with IConnection\r\n * @param connection - Connection to save\r\n */\r\nexport function saveConnection(connection: IConnection): (dispatch: Dispatch) => Promise<IConnection> {\r\n    return async (dispatch: Dispatch) => {\r\n        const connectionService = new ConnectionService();\r\n        await connectionService.save(connection);\r\n        dispatch(saveConnectionAction(connection));\r\n        return Promise.resolve(connection);\r\n    };\r\n}\r\n\r\n/**\r\n * Dispatches Delete Connection action and resolves with IConnection\r\n * @param connection - Connection to delete\r\n */\r\nexport function deleteConnection(connection: IConnection): (dispatch: Dispatch) => Promise<void> {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(deleteConnectionAction(connection));\r\n        return Promise.resolve();\r\n    };\r\n}\r\n\r\n/**\r\n * Load connection action type\r\n */\r\nexport interface ILoadConnectionAction extends IPayloadAction<string, IConnection> {\r\n    type: ActionTypes.LOAD_CONNECTION_SUCCESS;\r\n}\r\n\r\n/**\r\n * Save connection action type\r\n */\r\nexport interface ISaveConnectionAction extends IPayloadAction<string, IConnection> {\r\n    type: ActionTypes.SAVE_CONNECTION_SUCCESS;\r\n}\r\n\r\n/**\r\n * Delete connection action type\r\n */\r\nexport interface IDeleteConnectionAction extends IPayloadAction<string, IConnection> {\r\n    type: ActionTypes.DELETE_CONNECTION_SUCCESS;\r\n}\r\n\r\n/**\r\n * Instance of load connection action\r\n */\r\nexport const loadConnectionAction = createPayloadAction<ILoadConnectionAction>(ActionTypes.LOAD_CONNECTION_SUCCESS);\r\n/**\r\n * Instance of save connection action\r\n */\r\nexport const saveConnectionAction = createPayloadAction<ISaveConnectionAction>(ActionTypes.SAVE_CONNECTION_SUCCESS);\r\n/**\r\n * Instance of delete connection action\r\n */\r\nexport const deleteConnectionAction =\r\n    createPayloadAction<IDeleteConnectionAction>(ActionTypes.DELETE_CONNECTION_SUCCESS);\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { StorageProviderFactory } from \"../../../../providers/storage/storageProviderFactory\";\r\nimport { AssetProviderFactory } from \"../../../../providers/storage/assetProviderFactory\";\r\n\r\n/**\r\n * Properties for Connection Provider Picker\r\n * @member onChange - Function to call on change of selected value\r\n * @member id - ID of HTML select element\r\n * @member value - Selected value of picker\r\n */\r\nexport interface IConnectionProviderPickerProps {\r\n    onChange: (value: string) => void;\r\n    id: string;\r\n    value: string;\r\n}\r\n\r\n/**\r\n * Creates HTML select object for selecting an asset or storage provider\r\n * @param props Properties for picker\r\n */\r\nexport default function ConnectionProviderPicker(props: IConnectionProviderPickerProps) {\r\n    const storageProviders = _.values(StorageProviderFactory.providers);\r\n    const assetProviders = _.values(AssetProviderFactory.providers);\r\n\r\n    const allProviders = _([])\r\n        .concat(assetProviders)\r\n        .concat(storageProviders)\r\n        .uniqBy(\"name\")\r\n        .orderBy(\"displayName\")\r\n        .value();\r\n\r\n    function onChange(e) {\r\n        props.onChange(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <select id={props.id}\r\n            className=\"form-control\"\r\n            value={props.value}\r\n            onChange={onChange}>\r\n            <option value=\"\">Select Provider</option>\r\n            {\r\n                allProviders.map((provider) =>\r\n                    <option key={provider.name} value={provider.name}>\r\n                        {provider.displayName}\r\n                    </option>)\r\n            }\r\n        </select>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Form, { Widget, IChangeEvent, FormValidation } from \"react-jsonschema-form\";\r\nimport { IConnection } from \"../../../../models/applicationState\";\r\nimport LocalFolderPicker from \"../../common/localFolderPicker/localFolderPicker\";\r\nimport { strings, addLocValues } from \"../../../../common/strings\";\r\nimport CustomFieldTemplate from \"../../common/customField/customFieldTemplate\";\r\nimport ConnectionProviderPicker from \"../../common/connectionProviderPicker/connectionProviderPicker\";\r\nimport { ProtectedInput } from \"../../common/protectedInput/protectedInput\";\r\nimport Checkbox from \"rc-checkbox\";\r\nimport \"rc-checkbox/assets/index.css\";\r\nimport { CustomWidget } from \"../../common/customField/customField\";\r\nimport { isBrowser } from \"../../../../common/hostProcess\";\r\n// tslint:disable-next-line:no-var-requires\r\nconst formSchema = addLocValues(require(\"./connectionForm.json\"));\r\n// tslint:disable-next-line:no-var-requires\r\nconst uiSchema = addLocValues(require(\"./connectionForm.ui.json\"));\r\n\r\n/**\r\n * Properties for Connection form\r\n * @member connection - Form being viewed/edited\r\n * @member onSubmit - Function called upon form submission\r\n * @member onCancel - Function called upon cancellation of form\r\n */\r\nexport interface IConnectionFormProps extends React.Props<ConnectionForm> {\r\n    connection: IConnection;\r\n    onSubmit: (connection: IConnection) => void;\r\n    onCancel?: () => void;\r\n}\r\n\r\n/**\r\n * State for Connection Form\r\n * @member providerName - Name of connection provider\r\n * @member formSchema - JSON Form Schema\r\n * @member uiSchema - JSON Form UI Schema\r\n * @member formData - Current state of form data as a Connection\r\n * @member classNames - HTML Class names for form element\r\n */\r\nexport interface IConnectionFormState {\r\n    providerName: string;\r\n    formSchema: any;\r\n    uiSchema: any;\r\n    formData: IConnection;\r\n    classNames: string[];\r\n}\r\n\r\n/**\r\n * Form for viewing, creating and editing connections\r\n */\r\nexport default class ConnectionForm extends React.Component<IConnectionFormProps, IConnectionFormState> {\r\n    private widgets = {\r\n        localFolderPicker: (LocalFolderPicker as any) as Widget,\r\n        connectionProviderPicker: (ConnectionProviderPicker as any) as Widget,\r\n        protectedInput: (ProtectedInput as any) as Widget,\r\n        checkbox: CustomWidget(Checkbox, (props) => ({\r\n            checked: props.value,\r\n            onChange: (value) => props.onChange(value.target.checked),\r\n            disabled: props.disabled,\r\n        })),\r\n    };\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.state = {\r\n            classNames: [\"needs-validation\"],\r\n            formSchema: { ...formSchema },\r\n            uiSchema: { ...uiSchema },\r\n            providerName: this.props.connection ? this.props.connection.providerType : null,\r\n            formData: this.props.connection,\r\n        };\r\n\r\n        if (this.props.connection) {\r\n            this.bindForm(this.props.connection);\r\n        }\r\n\r\n        this.onFormCancel = this.onFormCancel.bind(this);\r\n        this.onFormValidate = this.onFormValidate.bind(this);\r\n        this.onFormChange = this.onFormChange.bind(this);\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: IConnectionFormProps) {\r\n        if (prevProps.connection !== this.props.connection) {\r\n            this.bindForm(this.props.connection);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"app-connections-page-detail m-3\">\r\n                <h3>\r\n                    <i className=\"fas fa-plug fa-1x\"></i>\r\n                    <span className=\"px-2\">\r\n                        {strings.connections.settings}\r\n                    </span>\r\n                </h3>\r\n                <div className=\"m-3\">\r\n                    { isBrowser() && this.state.providerName === \"bingImageSearch\" &&\r\n                    <div className=\"alert alert-warning\" role=\"alert\">\r\n                        <i className=\"fas fa-exclamation-circle mr-1\" aria-hidden=\"true\"></i>\r\n                        { strings.connections.imageCorsWarning }\r\n                    </div>\r\n                    }\r\n                    { isBrowser() && this.state.providerName === \"azureBlobStorage\" &&\r\n                    <div className=\"alert alert-warning\" role=\"alert\">\r\n                        <i className=\"fas fa-exclamation-circle mr-1\" aria-hidden=\"true\"></i>\r\n                        { strings.formatString(\r\n                            strings.connections.blobCorsWarning,\r\n                            <a href=\"https://aka.ms/blob-cors\" target=\"_blank\">{strings.connections.azDocLinkText}</a>)\r\n                        }\r\n                    </div>\r\n                    }\r\n                    <Form\r\n                        className={this.state.classNames.join(\" \")}\r\n                        showErrorList={false}\r\n                        liveValidate={true}\r\n                        noHtml5Validate={true}\r\n                        FieldTemplate={CustomFieldTemplate}\r\n                        validate={this.onFormValidate}\r\n                        widgets={this.widgets}\r\n                        schema={this.state.formSchema}\r\n                        uiSchema={this.state.uiSchema}\r\n                        formData={this.state.formData}\r\n                        onChange={this.onFormChange}\r\n                        onSubmit={(form) => this.props.onSubmit(form.formData)}>\r\n                        <div>\r\n                            <button className=\"btn btn-success mr-1\" type=\"submit\">{strings.connections.save}</button>\r\n                            <button className=\"btn btn-secondary btn-cancel\"\r\n                                type=\"button\"\r\n                                onClick={this.onFormCancel}>{strings.common.cancel}</button>\r\n                        </div>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onFormValidate(connection: IConnection, errors: FormValidation) {\r\n        if (connection.providerType === \"\") {\r\n            errors.providerType.addError(\"is a required property\");\r\n        }\r\n\r\n        if (this.state.classNames.indexOf(\"was-validated\") === -1) {\r\n            this.setState({\r\n                classNames: [...this.state.classNames, \"was-validated\"],\r\n            });\r\n        }\r\n\r\n        return errors;\r\n    }\r\n\r\n    private onFormChange = (args: IChangeEvent<IConnection>) => {\r\n        const providerType = args.formData.providerType;\r\n\r\n        if (providerType !== this.state.providerName) {\r\n            this.bindForm(args.formData, true);\r\n        } else {\r\n            this.setState({\r\n                formData: args.formData,\r\n            });\r\n        }\r\n    }\r\n\r\n    private onFormCancel() {\r\n        if (this.props.onCancel) {\r\n            this.props.onCancel();\r\n        }\r\n    }\r\n\r\n    private bindForm(connection: IConnection, resetProviderOptions: boolean = false) {\r\n        const providerType = connection ? connection.providerType : null;\r\n        let newFormSchema: any = this.state.formSchema;\r\n        let newUiSchema: any = this.state.uiSchema;\r\n\r\n        if (providerType) {\r\n            const providerSchema = addLocValues(require(`../../../../providers/storage/${providerType}.json`));\r\n            const providerUiSchema = addLocValues(require(`../../../../providers/storage/${providerType}.ui.json`));\r\n\r\n            newFormSchema = { ...formSchema };\r\n            newFormSchema.properties[\"providerOptions\"] = providerSchema;\r\n\r\n            newUiSchema = { ...uiSchema };\r\n            newUiSchema[\"providerOptions\"] = providerUiSchema;\r\n        } else {\r\n            newFormSchema = { ...formSchema };\r\n            delete newFormSchema.properties[\"providerOptions\"];\r\n\r\n            newUiSchema = { ...uiSchema };\r\n            delete newUiSchema[\"providerOptions\"];\r\n\r\n            resetProviderOptions = true;\r\n        }\r\n\r\n        const formData = { ...connection };\r\n        if (resetProviderOptions) {\r\n            formData.providerOptions = {};\r\n        }\r\n\r\n        this.setState({\r\n            providerName: providerType,\r\n            formSchema: newFormSchema,\r\n            uiSchema: newUiSchema,\r\n            formData,\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport default function ConnectionItem({ item, onClick, onDelete }) {\r\n    return (\r\n        <li onClick={onClick}>\r\n            <NavLink to={`/connections/${item.id}`}>\r\n                <i className=\"fas fa-edit\"></i>\r\n                <span className=\"px-2\">{item.name}</span>\r\n                <div className=\"float-right delete-btn\" onClick={onDelete}><i className=\"fas fa-trash\"></i></div>\r\n            </NavLink>\r\n        </li>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, RouteComponentProps } from \"react-router-dom\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { strings, interpolate } from \"../../../../common/strings\";\r\nimport { IApplicationState, IConnection } from \"../../../../models/applicationState\";\r\nimport IConnectionActions, * as connectionActions from \"../../../../redux/actions/connectionActions\";\r\nimport CondensedList from \"../../common/condensedList/condensedList\";\r\nimport Confirm from \"../../common/confirm/confirm\";\r\nimport ConnectionForm from \"./connectionForm\";\r\nimport ConnectionItem from \"./connectionItem\";\r\nimport \"./connectionsPage.scss\";\r\nimport { toast } from \"react-toastify\";\r\nimport { AssetProviderFactory } from \"../../../../providers/storage/assetProviderFactory\";\r\n\r\n/**\r\n * Properties for Connection Page\r\n * @member connections - Array of Connections\r\n * @member actions - Actions to perform\r\n */\r\nexport interface IConnectionPageProps extends RouteComponentProps, React.Props<ConnectionPage> {\r\n    connections: IConnection[];\r\n    actions: IConnectionActions;\r\n}\r\n\r\n/**\r\n * State of Connection Page\r\n * @member connection - Connection currently being viewed/edited\r\n */\r\nexport interface IConnectionPageState {\r\n    connection: IConnection;\r\n}\r\n\r\nfunction mapStateToProps(state: IApplicationState) {\r\n    return {\r\n        connections: state.connections,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators(connectionActions, dispatch),\r\n    };\r\n}\r\n\r\n/**\r\n * Page for viewing/editing connections\r\n */\r\n@connect(mapStateToProps, mapDispatchToProps)\r\nexport default class ConnectionPage extends React.Component<IConnectionPageProps, IConnectionPageState> {\r\n    private confirmDelete: React.RefObject<Confirm>;\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.state = {\r\n            connection: null,\r\n        };\r\n\r\n        this.confirmDelete = React.createRef<Confirm>();\r\n        this.onFormSubmit = this.onFormSubmit.bind(this);\r\n        this.onFormCancel = this.onFormCancel.bind(this);\r\n        this.onConnectionDelete = this.onConnectionDelete.bind(this);\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        const connectionId = this.props.match.params[\"connectionId\"];\r\n        if (connectionId) {\r\n            this.loadConnection(connectionId);\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate = (prevProps) => {\r\n        const prevConnectionId = prevProps.match.params[\"connectionId\"];\r\n        const newConnectionId = this.props.match.params[\"connectionId\"];\r\n\r\n        if (prevConnectionId !== newConnectionId) {\r\n            this.loadConnection(newConnectionId);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"app-connections-page\">\r\n                <div className=\"app-connections-page-list bg-lighter-1\">\r\n                    <CondensedList\r\n                        title={strings.connections.title}\r\n                        newLinkTo={\"/connections/create\"}\r\n                        onDelete={(connection) => this.confirmDelete.current.open(connection)}\r\n                        Component={ConnectionItem}\r\n                        items={this.props.connections} />\r\n                </div>\r\n\r\n                <Confirm ref={this.confirmDelete}\r\n                    title=\"Delete Connection\"\r\n                    // tslint:disable-next-line:max-line-length\r\n                    message={(connection: IConnection) => `Are you sure you want to delete the connection '${connection.name}'?`}\r\n                    confirmButtonColor=\"danger\"\r\n                    onConfirm={(connection) => this.onConnectionDelete(connection)} />\r\n\r\n                <Route exact path=\"/connections\" render={(props) =>\r\n                    <div className=\"app-connections-page-detail m-3\">\r\n                        <h6>{strings.connections.instructions}</h6>\r\n                    </div>\r\n                } />\r\n\r\n                <Route exact path=\"/connections/:connectionId\" render={(props) =>\r\n                    <ConnectionForm\r\n                        connection={this.state.connection}\r\n                        onSubmit={this.onFormSubmit}\r\n                        onCancel={this.onFormCancel} />\r\n                } />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private async loadConnection(connectionId: string) {\r\n        const connection = this.props.connections.find((connection) => connection.id === connectionId);\r\n        if (connection) {\r\n            this.setState({ connection });\r\n        } else {\r\n            this.setState({ connection: null });\r\n        }\r\n    }\r\n\r\n    private onConnectionDelete = async (connection: IConnection) => {\r\n        await this.props.actions.deleteConnection(connection);\r\n\r\n        toast.info(interpolate(strings.connections.messages.deleteSuccess, { connection }));\r\n\r\n        if (this.state.connection === connection) {\r\n            this.props.history.push(\"/connections\");\r\n            this.setState({ connection: null });\r\n        }\r\n    }\r\n\r\n    private onFormSubmit = async (connection: IConnection) => {\r\n        connection = this.addDefaultPropsIfNewConnection(connection);\r\n        await this.props.actions.saveConnection(connection);\r\n        toast.success(interpolate(strings.connections.messages.saveSuccess, { connection }));\r\n\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    private addDefaultPropsIfNewConnection(connection: IConnection): IConnection {\r\n        const assetProvider = AssetProviderFactory.createFromConnection(connection);\r\n        return !connection.id && assetProvider.addDefaultPropsToNewConnection\r\n            ? assetProvider.addDefaultPropsToNewConnection(connection)\r\n            : connection;\r\n    }\r\n\r\n    private onFormCancel() {\r\n        this.props.history.goBack();\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { IAssetProps } from \"./assetPreview\";\r\n\r\n/**\r\n * ImageAsset component used to render all image assets\r\n */\r\nexport class ImageAsset extends React.Component<IAssetProps> {\r\n    private image: React.RefObject<HTMLImageElement> = React.createRef();\r\n\r\n    public render() {\r\n        return (\r\n            <img ref={this.image}\r\n                src={this.props.asset.path}\r\n                onLoad={this.onLoad}\r\n                onError={this.props.onError}\r\n                crossOrigin=\"anonymous\" />);\r\n    }\r\n\r\n    private onLoad = () => {\r\n        if (this.props.onLoaded) {\r\n            this.props.onLoaded(this.image.current);\r\n        }\r\n        if (this.props.onActivated) {\r\n            this.props.onActivated(this.image.current);\r\n        }\r\n        if (this.props.onDeactivated) {\r\n            this.props.onDeactivated(this.image.current);\r\n        }\r\n    }\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport { Player } from \"video-react\";\r\nimport { KeyboardBinding } from \"../keyboardBinding/keyboardBinding\";\r\nimport { KeyEventType } from \"../keyboardManager/keyboardManager\";\r\n\r\nexport interface ICustomVideoPlayerButtonProps {\r\n    order: number;\r\n    onClick: () => void;\r\n    icon?: string;\r\n    accelerators?: string[];\r\n    tooltip?: string;\r\n    player?: Player;\r\n}\r\n\r\nexport class CustomVideoPlayerButton extends React.Component<ICustomVideoPlayerButtonProps> {\r\n    public render() {\r\n        return (\r\n            <Fragment>\r\n                {this.props.accelerators &&\r\n                    <KeyboardBinding keyEventType={KeyEventType.KeyDown}\r\n                        displayName={this.props.tooltip}\r\n                        accelerators={this.props.accelerators}\r\n                        handler={this.props.onClick}\r\n                        icon={this.props.icon}/>\r\n                }\r\n                <button\r\n                    type=\"button\"\r\n                    title={this.props.tooltip}\r\n                    className=\"video-react-control video-react-button\"\r\n                    onClick={this.props.onClick}>\r\n                    {this.props.children}\r\n                </button>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n","import React, { SyntheticEvent, Fragment } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport _ from \"lodash\";\r\nimport {\r\n    Player, BigPlayButton, ControlBar, CurrentTimeDisplay,\r\n    TimeDivider, PlaybackRateMenuButton, VolumeMenuButton,\r\n} from \"video-react\";\r\nimport { IAssetProps } from \"./assetPreview\";\r\nimport { IAsset, AssetType, AssetState } from \"../../../../models/applicationState\";\r\nimport { AssetService } from \"../../../../services/assetService\";\r\nimport { CustomVideoPlayerButton } from \"../../common/videoPlayer/customVideoPlayerButton\";\r\nimport { strings } from \"../../../../common/strings\";\r\n\r\n/**\r\n * VideoAsset component properties\r\n */\r\nexport interface IVideoAssetProps extends IAssetProps, React.Props<VideoAsset> {\r\n    /** Whether or not the video asset should start playing automatically */\r\n    autoPlay?: boolean;\r\n    /** The timestamp that the video should seek to upon loading */\r\n    timestamp?: number;\r\n    /** The event handler that is fired when a child video frame is selected (ex. paused, seeked) */\r\n    onChildAssetSelected?: (asset: IAsset) => void;\r\n}\r\n\r\n/** VideoAsset internal component state */\r\nexport interface IVideoAssetState {\r\n    loaded: boolean;\r\n}\r\n\r\n/**\r\n * VideoPlayer internal video state\r\n */\r\nexport interface IVideoPlayerState {\r\n    readyState: number;\r\n    paused: boolean;\r\n    seeking: boolean;\r\n    currentTime: number;\r\n    duration: number;\r\n}\r\n\r\n/**\r\n * VideoAsset component used to display video based assets\r\n */\r\nexport class VideoAsset extends React.Component<IVideoAssetProps> {\r\n    /** Default properties for the VideoAsset if not defined */\r\n    public static defaultProps: IVideoAssetProps = {\r\n        autoPlay: true,\r\n        controlsEnabled: true,\r\n        timestamp: null,\r\n        asset: null,\r\n        childAssets: [],\r\n    };\r\n\r\n    public state: IVideoAssetState = {\r\n        loaded: false,\r\n    };\r\n\r\n    private videoPlayer: React.RefObject<Player> = React.createRef<Player>();\r\n    private timelineElement: Element = null;\r\n\r\n    public render() {\r\n        const { autoPlay, asset } = this.props;\r\n        let videoPath = asset.path;\r\n        if (!autoPlay) {\r\n            videoPath = `${asset.path}#t=5.0`;\r\n        }\r\n\r\n        return (\r\n            <Player ref={this.videoPlayer}\r\n                fluid={false}\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                autoPlay={autoPlay}\r\n                src={videoPath}\r\n                onError={this.props.onError}\r\n                crossOrigin=\"anonymous\">\r\n                <BigPlayButton position=\"center\" />\r\n                {autoPlay &&\r\n                    <ControlBar autoHide={false}>\r\n                        {!this.props.controlsEnabled &&\r\n                            <Fragment>\r\n                                <div className=\"video-react-control-bar-disabled\"></div>\r\n                            </Fragment>\r\n                        }\r\n                        <CustomVideoPlayerButton order={1.1}\r\n                            accelerators={[\"ArrowLeft\", \"A\", \"a\"]}\r\n                            tooltip={strings.editorPage.videoPlayer.previousExpectedFrame.tooltip}\r\n                            onClick={this.movePreviousExpectedFrame}\r\n                            icon={\"fa-caret-left fa-lg\"}\r\n                        >\r\n                            <i className=\"fas fa-caret-left fa-lg\" />\r\n                        </CustomVideoPlayerButton>\r\n                        <CustomVideoPlayerButton order={1.2}\r\n                            accelerators={[\"ArrowRight\", \"D\", \"d\"]}\r\n                            tooltip={strings.editorPage.videoPlayer.nextExpectedFrame.tooltip}\r\n                            onClick={this.moveNextExpectedFrame}\r\n                            icon={\"fa-caret-right fa-lg\"}\r\n                        >\r\n                            <i className=\"fas fa-caret-right fa-lg\" />\r\n                        </CustomVideoPlayerButton>\r\n                        <CurrentTimeDisplay order={1.3} />\r\n                        <TimeDivider order={1.4} />\r\n                        <PlaybackRateMenuButton rates={[5, 2, 1, 0.5, 0.25]} order={7.1} />\r\n                        <VolumeMenuButton enabled order={7.2} />\r\n                        <CustomVideoPlayerButton order={8.1}\r\n                            accelerators={[\"Q\", \"q\"]}\r\n                            tooltip={strings.editorPage.videoPlayer.previousTaggedFrame.tooltip}\r\n                            onClick={this.movePreviousTaggedFrame}\r\n                            icon={\"fas fa-step-backward\"}\r\n                        >\r\n                            <i className=\"fas fa-step-backward\"></i>\r\n                        </CustomVideoPlayerButton>\r\n                        <CustomVideoPlayerButton order={8.2}\r\n                            accelerators={[\"E\", \"e\"]}\r\n                            tooltip={strings.editorPage.videoPlayer.nextTaggedFrame.tooltip}\r\n                            onClick={this.moveNextTaggedFrame}\r\n                            icon={\"fa-step-forward\"}\r\n                        >\r\n                            <i className=\"fas fa-step-forward\"></i>\r\n                        </CustomVideoPlayerButton>\r\n                    </ControlBar>\r\n                }\r\n            </Player >\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        if (this.props.autoPlay) {\r\n            // We only need to subscribe to state change notificeations if autoPlay\r\n            // is true, otherwise the video is simply a preview on the side bar that\r\n            // doesn't change\r\n            this.videoPlayer.current.subscribeToStateChange(this.onVideoStateChange);\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: Readonly<IVideoAssetProps>) {\r\n        if (this.props.asset.id !== prevProps.asset.id) {\r\n            this.setState({ loaded: false });\r\n        }\r\n\r\n        if (this.props.childAssets !== prevProps.childAssets) {\r\n            this.addAssetTimelineTags(this.props.childAssets, this.getVideoPlayerState().duration);\r\n        }\r\n\r\n        if (this.props.timestamp !== prevProps.timestamp) {\r\n            this.seekToTime(this.props.timestamp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Bound to the \"Previous Tagged Frame\" button\r\n     * Seeks the user to the previous tagged video frame\r\n     */\r\n    private movePreviousTaggedFrame = () => {\r\n        const currentTime = this.getVideoPlayerState().currentTime;\r\n        const previousFrame = _\r\n            .reverse(this.props.childAssets)\r\n            .find((asset) => asset.state === AssetState.Tagged && asset.timestamp < currentTime);\r\n\r\n        if (previousFrame) {\r\n            this.seekToTime(previousFrame.timestamp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Bound to the \"Next Tagged Frame\" button\r\n     * Seeks the user to the next tagged video frame\r\n     */\r\n    private moveNextTaggedFrame = () => {\r\n        const currentTime = this.getVideoPlayerState().currentTime;\r\n        const nextFrame = this.props.childAssets\r\n            .find((asset) => asset.state === AssetState.Tagged && asset.timestamp > currentTime);\r\n\r\n        if (nextFrame) {\r\n            this.seekToTime(nextFrame.timestamp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves the videos current position forward one frame based on the current\r\n     * project settings for frame rate extraction\r\n     */\r\n    private moveNextExpectedFrame = () => {\r\n        const currentTime = this.getVideoPlayerState().currentTime;\r\n        // Seek forward from the current time to the next logical frame based on project settings\r\n        const frameSkipTime: number = (1 / this.props.additionalSettings.videoSettings.frameExtractionRate);\r\n        const seekTime: number = (currentTime + frameSkipTime);\r\n        this.seekToTime(seekTime);\r\n    }\r\n\r\n    /**\r\n     * Moves the videos current position backward one frame based on the current\r\n     * project settings for frame rate extraction\r\n     */\r\n    private movePreviousExpectedFrame = () => {\r\n        const currentTime = this.getVideoPlayerState().currentTime;\r\n        // Seek backwards from the current time to the next logical frame based on project settings\r\n        const frameSkipTime: number = (1 / this.props.additionalSettings.videoSettings.frameExtractionRate);\r\n        const seekTime: number = (currentTime - frameSkipTime);\r\n        this.seekToTime(seekTime);\r\n    }\r\n\r\n    /**\r\n     * Seeks the current video to the passed in time stamp, pausing the video before hand\r\n     * @param seekTime - Time (in seconds) in the video to seek to\r\n     */\r\n    private seekToTime = (seekTime: number) => {\r\n        const playerState = this.getVideoPlayerState();\r\n\r\n        if (seekTime >= 0 && playerState.currentTime !== seekTime) {\r\n            // Verifies if the seek operation should continue\r\n            if (this.props.onBeforeAssetChanged) {\r\n                if (!this.props.onBeforeAssetChanged()) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // Before seeking, pause the video\r\n            if (!playerState.paused) {\r\n                this.videoPlayer.current.pause();\r\n            }\r\n            this.videoPlayer.current.seek(seekTime);\r\n        }\r\n    }\r\n\r\n    private onVideoStateChange = (state: Readonly<IVideoPlayerState>, prev: Readonly<IVideoPlayerState>) => {\r\n        if (!this.state.loaded && state.readyState === 4 && state.readyState !== prev.readyState) {\r\n            // Video initial load complete\r\n            this.raiseLoaded();\r\n            this.raiseActivated();\r\n\r\n            if (this.props.autoPlay) {\r\n                this.videoPlayer.current.play();\r\n            }\r\n        } else if (state.paused && (state.currentTime !== prev.currentTime || state.seeking !== prev.seeking)) {\r\n            // Video is paused, make sure we are on a key frame, and if we are not, seek to that\r\n            // before raising the child selected event\r\n            if (this.isValidKeyFrame()) {\r\n                this.raiseChildAssetSelected(state);\r\n                this.raiseDeactivated();\r\n            }\r\n        } else if (!state.paused && state.paused !== prev.paused) {\r\n            // Video has resumed playing\r\n            this.raiseActivated();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Raises the \"loaded\" event if available\r\n     */\r\n    private raiseLoaded = () => {\r\n        this.setState({\r\n            loaded: true,\r\n        }, () => {\r\n            if (this.props.onLoaded) {\r\n                this.props.onLoaded(this.videoPlayer.current.video.video);\r\n            }\r\n\r\n            // Once the video is loaded, add any asset timeline tags\r\n            this.addAssetTimelineTags(this.props.childAssets, this.getVideoPlayerState().duration);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Raises the \"childAssetSelected\" event if available\r\n     */\r\n    private raiseChildAssetSelected = (state: Readonly<IVideoPlayerState>) => {\r\n        if (this.props.onChildAssetSelected) {\r\n            const rootAsset = this.props.asset.parent || this.props.asset;\r\n            const childPath = `${rootAsset.path}#t=${state.currentTime}`;\r\n            const childAsset = AssetService.createAssetFromFilePath(childPath);\r\n            childAsset.state = AssetState.NotVisited;\r\n            childAsset.type = AssetType.VideoFrame;\r\n            childAsset.parent = rootAsset;\r\n            childAsset.timestamp = state.currentTime;\r\n            childAsset.size = { ...this.props.asset.size };\r\n\r\n            this.props.onChildAssetSelected(childAsset);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Raises the \"activated\" event if available\r\n     */\r\n    private raiseActivated = () => {\r\n        if (this.props.onActivated) {\r\n            this.props.onActivated(this.videoPlayer.current.video.video);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Raises the \"deactivated event if available\"\r\n     */\r\n    private raiseDeactivated = () => {\r\n        if (this.props.onDeactivated) {\r\n            this.props.onDeactivated(this.videoPlayer.current.video.video);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move to the nearest key frame from where the video's current\r\n     * position is\r\n     * @returns true if moved to a new position; false otherwise\r\n     */\r\n    private isValidKeyFrame = (): boolean => {\r\n        if (!this.props.additionalSettings) {\r\n            return false;\r\n        }\r\n\r\n        const keyFrameTime = (1 / this.props.additionalSettings.videoSettings.frameExtractionRate);\r\n        const timestamp = this.getVideoPlayerState().currentTime;\r\n\r\n        // Calculate the nearest key frame\r\n        const numberKeyFrames = Math.round(timestamp / keyFrameTime);\r\n        const seekTime = +(numberKeyFrames * keyFrameTime).toFixed(6);\r\n\r\n        if (seekTime !== timestamp) {\r\n            this.seekToTime(seekTime);\r\n        }\r\n\r\n        return seekTime === timestamp;\r\n    }\r\n\r\n    /**\r\n     * Draws small lines to show where visited and tagged frames are on\r\n     * the video line\r\n     * @param childAssets - Array of child assets in the video\r\n     * @param videoDuration - Length (in seconds) of the video\r\n     */\r\n    private addAssetTimelineTags = (childAssets: any[], videoDuration: number) => {\r\n        if (!this.props.autoPlay) {\r\n            return;\r\n        }\r\n\r\n        const assetTimelineTagLines = this.renderTimeline(childAssets, videoDuration);\r\n        const timelineSelector = \".editor-page-content-main-body .video-react-progress-control .video-timeline-root\";\r\n        this.timelineElement = document.querySelector(timelineSelector);\r\n\r\n        if (!this.timelineElement) {\r\n            const progressControlSelector = \".editor-page-content-main-body .video-react-progress-control\";\r\n            const progressHolderElement = document.querySelector(progressControlSelector);\r\n\r\n            // If we found an element to hold the tags, add them to it\r\n            if (progressHolderElement) {\r\n                this.timelineElement = document.createElement(\"div\");\r\n                this.timelineElement.className = \"video-timeline-root\";\r\n                progressHolderElement.appendChild(this.timelineElement);\r\n            }\r\n        }\r\n\r\n        if (this.timelineElement) {\r\n            // Render the child asset elements to the dom\r\n            ReactDOM.render(assetTimelineTagLines, this.timelineElement);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders the timeline markers for the specified child assets\r\n     * @param childAssets - Array of child assets in the video\r\n     * @param videoDuration - Length (in seconds) of the video\r\n     */\r\n    private renderTimeline = (childAssets: IAsset[], videoDuration: number) => {\r\n        return (\r\n            <div className={\"video-timeline-container\"}>\r\n                {childAssets.map((childAsset) => this.renderChildAssetMarker(childAsset, videoDuration))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Renders a timeline marker for the specified child asset\r\n     * @param childAsset The child asset to render\r\n     * @param videoDuration The total video duration\r\n     */\r\n    private renderChildAssetMarker = (childAsset: IAsset, videoDuration: number) => {\r\n        const className = childAsset.state === AssetState.Tagged ? \"video-timeline-tagged\" : \"video-timeline-visited\";\r\n        const childPosition: number = (childAsset.timestamp / videoDuration);\r\n        const style = { left: `${childPosition * 100}%` };\r\n\r\n        return (\r\n            <div key={childAsset.timestamp}\r\n                onClick={() => this.seekToTime(childAsset.timestamp)}\r\n                className={className}\r\n                style={style} />\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the current video player state\r\n     */\r\n    private getVideoPlayerState = (): Readonly<IVideoPlayerState> => {\r\n        return this.videoPlayer.current.getState().player;\r\n    }\r\n}\r\n","import React, { SyntheticEvent } from \"react\";\r\nimport { IAsset, AssetType, IProjectVideoSettings } from \"../../../../models/applicationState\";\r\nimport { strings } from \"../../../../common/strings\";\r\nimport { ImageAsset } from \"./imageAsset\";\r\nimport { VideoAsset } from \"./videoAsset\";\r\nimport { TFRecordAsset } from \"./tfrecordAsset\";\r\n\r\nexport interface IGenericContentSource {\r\n    width: number;\r\n    height: number;\r\n    offsetWidth: number;\r\n    offsetHeight: number;\r\n    offsetTop: number;\r\n    offsetLeft: number;\r\n}\r\nexport type ContentSource = HTMLImageElement | HTMLVideoElement | IGenericContentSource;\r\n\r\n/**\r\n * AssetPreview component properties\r\n */\r\nexport interface IAssetProps {\r\n    /** The Asset to preview */\r\n    asset: IAsset;\r\n    /** The child assets (ex. video frames) of the parent asset */\r\n    childAssets?: IAsset[];\r\n    /** Additional settings for this asset */\r\n    additionalSettings?: IAssetPreviewSettings;\r\n    /** Specifies whether the asset controls are enabled */\r\n    controlsEnabled?: boolean;\r\n    /** Event handler that fires when the asset has been loaded */\r\n    onLoaded?: (ContentSource: ContentSource) => void;\r\n    /** Event handler that fires when the asset has been activated (ex. Video resumes playing) */\r\n    onActivated?: (contentSource: ContentSource) => void;\r\n    /** Event handler that fires when the asset has been deactivated (ex. Canvas tools takes over) */\r\n    onDeactivated?: (contentSource: ContentSource) => void;\r\n    /** Event handler that fires when a child asset is selected (ex. Paused on a video frame) */\r\n    onChildAssetSelected?: (asset: IAsset) => void;\r\n    /** Event handler that fires when an error occurred loading an asset */\r\n    onError?: (event: React.SyntheticEvent) => void;\r\n    /** Event handler that fires when the loaded asset has changed */\r\n    onAssetChanged?: (asset: IAsset) => void;\r\n    /** Event handler that fires right before an asset has changed */\r\n    onBeforeAssetChanged?: () => boolean;\r\n}\r\n\r\n/**\r\n * Properties for Asset Preview\r\n * @member asset - Asset for preview\r\n */\r\nexport interface IAssetPreviewProps extends IAssetProps, React.Props<AssetPreview> {\r\n    autoPlay?: boolean;\r\n}\r\n\r\n/**\r\n * State for Asset Preview\r\n * @member loaded - Asset is loaded\r\n */\r\nexport interface IAssetPreviewState {\r\n    loaded: boolean;\r\n    hasError: boolean;\r\n}\r\n\r\n/**\r\n * Settings used by the various asset previews\r\n * @member videoSettings - Video settings for this asset\r\n */\r\nexport interface IAssetPreviewSettings {\r\n    videoSettings: IProjectVideoSettings;\r\n}\r\n\r\n/**\r\n * @name - Asset Preview\r\n * @description - Small preview of assets for selection in editor page\r\n */\r\nexport class AssetPreview extends React.Component<IAssetPreviewProps, IAssetPreviewState> {\r\n    /** Default properties for component if not defined */\r\n    public static defaultProps: IAssetPreviewProps = {\r\n        asset: null,\r\n        childAssets: [],\r\n        autoPlay: false,\r\n        controlsEnabled: true,\r\n    };\r\n\r\n    /** The internal state for the component */\r\n    public state: IAssetPreviewState = {\r\n        loaded: false,\r\n        hasError: false,\r\n    };\r\n\r\n    public componentDidUpdate(prevProps: Readonly<IAssetPreviewProps>) {\r\n        if (this.props.asset.id !== prevProps.asset.id) {\r\n            this.setState({\r\n                loaded: false,\r\n                hasError: false,\r\n            });\r\n\r\n            if (this.props.onAssetChanged) {\r\n                this.props.onAssetChanged(this.props.asset);\r\n            }\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const { loaded, hasError } = this.state;\r\n        const size = this.props.asset.size;\r\n        const classNames = [\"asset-preview\"];\r\n        if (size) {\r\n            if (size.width > size.height) {\r\n                classNames.push(\"landscape\");\r\n            } else {\r\n                classNames.push(\"portrait\");\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className={classNames.join(\" \")}>\r\n                <div className=\"asset-preview-container\">\r\n                    {!loaded &&\r\n                        <div className=\"asset-loading\">\r\n                            <div className=\"asset-loading-spinner\">\r\n                                <i className=\"fas fa-circle-notch fa-spin\" />\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {hasError &&\r\n                        <div className=\"asset-error text-danger\">\r\n                            <i className=\"fas fa-2x fa-exclamation-circle\" />\r\n                            <p className=\"m-2\">{strings.editorPage.assetError}</p>\r\n                        </div>\r\n                    }\r\n                    {!hasError &&\r\n                        this.renderAsset()\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderAsset = () => {\r\n        const { asset, childAssets, autoPlay } = this.props;\r\n        const rootAsset = asset.parent || asset;\r\n\r\n        switch (asset.type) {\r\n            case AssetType.Image:\r\n                return <ImageAsset asset={rootAsset}\r\n                    additionalSettings={this.props.additionalSettings}\r\n                    onLoaded={this.onAssetLoad}\r\n                    onError={this.onError}\r\n                    onActivated={this.props.onActivated}\r\n                    onDeactivated={this.props.onDeactivated} />;\r\n            case AssetType.Video:\r\n            case AssetType.VideoFrame:\r\n                return <VideoAsset asset={rootAsset}\r\n                    controlsEnabled={this.props.controlsEnabled}\r\n                    additionalSettings={this.props.additionalSettings}\r\n                    childAssets={childAssets}\r\n                    timestamp={asset.timestamp}\r\n                    autoPlay={autoPlay}\r\n                    onLoaded={this.onAssetLoad}\r\n                    onError={this.onError}\r\n                    onBeforeAssetChanged={this.props.onBeforeAssetChanged}\r\n                    onChildAssetSelected={this.onChildAssetSelected}\r\n                    onActivated={this.props.onActivated}\r\n                    onDeactivated={this.props.onDeactivated} />;\r\n            case AssetType.TFRecord:\r\n                return <TFRecordAsset asset={asset}\r\n                    onLoaded={this.onAssetLoad}\r\n                    onError={this.onError}\r\n                    onActivated={this.props.onActivated}\r\n                    onDeactivated={this.props.onDeactivated} />;\r\n            default:\r\n                return <div className=\"asset-error\">{strings.editorPage.assetError}</div>;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal event handler for when the referenced asset has been loaded\r\n     * @param contentSource The visual HTML element of the asset (img/video tag)\r\n     */\r\n    private onAssetLoad = (contentSource: ContentSource) => {\r\n        this.setState({\r\n            loaded: true,\r\n        }, () => {\r\n            if (this.props.onLoaded) {\r\n                this.props.onLoaded(contentSource);\r\n            }\r\n        });\r\n    }\r\n\r\n    private onError = (e: SyntheticEvent) => {\r\n        this.setState({\r\n            hasError: true,\r\n            loaded: true,\r\n        }, () => {\r\n            if (this.props.onError) {\r\n                this.props.onError(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    private onChildAssetSelected = (asset: IAsset) => {\r\n        if (this.props.onBeforeAssetChanged) {\r\n            if (!this.props.onBeforeAssetChanged()) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.props.onChildAssetSelected) {\r\n            this.props.onChildAssetSelected(asset);\r\n        }\r\n\r\n        if (this.props.onAssetChanged) {\r\n            this.props.onAssetChanged(asset);\r\n        }\r\n    }\r\n}\r\n","import React, { MouseEvent } from \"react\";\r\nimport { ITag } from \"../../../../models/applicationState\";\r\n\r\nexport enum TagEditMode {\r\n    Color = \"color\",\r\n    Name = \"name\",\r\n}\r\n\r\nexport interface ITagClickProps {\r\n    ctrlKey?: boolean;\r\n    altKey?: boolean;\r\n    clickedColor?: boolean;\r\n}\r\n\r\n/**\r\n * Properties for tag input item\r\n */\r\nexport interface ITagInputItemProps {\r\n    /** Tag represented by item */\r\n    tag: ITag;\r\n    /** Index of tag within tags array */\r\n    index: number;\r\n    /** Tag is currently being edited */\r\n    isBeingEdited: boolean;\r\n    /** Tag is currently locked for application */\r\n    isLocked: boolean;\r\n    /** Tag is currently selected */\r\n    isSelected: boolean;\r\n    /** Tag is currently applied to one of the selected regions */\r\n    appliedToSelectedRegions: boolean;\r\n    /** Function to call upon clicking item */\r\n    onClick: (tag: ITag, props: ITagClickProps) => void;\r\n    /** Apply updates to tag */\r\n    onChange: (oldTag: ITag, newTag: ITag) => void;\r\n}\r\n\r\nexport interface ITagInputItemState {\r\n    /** Tag is currently being edited */\r\n    isBeingEdited: boolean;\r\n    /** Tag is currently locked for application */\r\n    isLocked: boolean;\r\n    /** Mode of tag editing (text or color) */\r\n    tagEditMode: TagEditMode;\r\n}\r\n\r\nexport default class TagInputItem extends React.Component<ITagInputItemProps, ITagInputItemState> {\r\n    public state: ITagInputItemState = {\r\n        isBeingEdited: false,\r\n        isLocked: false,\r\n        tagEditMode: null,\r\n    };\r\n\r\n    public render() {\r\n        const style: any = {\r\n            background: this.props.tag.color,\r\n        };\r\n        return (\r\n            <div className={\"tag-item-block\"}>\r\n                {\r\n                    this.props.tag &&\r\n                    <li className={this.getItemClassName()} style={style}>\r\n                        <div\r\n                            className={`tag-color`}\r\n                            onClick={this.onColorClick}>\r\n                        </div>\r\n                        <div\r\n                            className={\"tag-content\"}\r\n                            onClick={this.onNameClick}>\r\n                            {this.getTagContent()}\r\n                        </div>\r\n                        {\r\n                            this.state.isLocked &&\r\n                            <div></div>\r\n                        }\r\n                    </li>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: ITagInputItemProps) {\r\n        if (prevProps.isBeingEdited !== this.props.isBeingEdited) {\r\n            this.setState({\r\n                isBeingEdited: this.props.isBeingEdited,\r\n            });\r\n        }\r\n\r\n        if (prevProps.isLocked !== this.props.isLocked) {\r\n            this.setState({\r\n                isLocked: this.props.isLocked,\r\n            });\r\n        }\r\n    }\r\n\r\n    private onColorClick = (e: MouseEvent) => {\r\n        e.stopPropagation();\r\n\r\n        const ctrlKey = e.ctrlKey || e.metaKey;\r\n        const altKey = e.altKey;\r\n        this.setState({\r\n            tagEditMode: TagEditMode.Color,\r\n        }, () => this.props.onClick(this.props.tag, { ctrlKey, altKey, clickedColor: true }));\r\n    }\r\n\r\n    private onNameClick = (e: MouseEvent) => {\r\n        e.stopPropagation();\r\n\r\n        const ctrlKey = e.ctrlKey || e.metaKey;\r\n        const altKey = e.altKey;\r\n        this.setState({\r\n            tagEditMode: TagEditMode.Name,\r\n        }, () => this.props.onClick(this.props.tag, { ctrlKey, altKey }));\r\n    }\r\n\r\n    private getItemClassName = () => {\r\n        const classNames = [\"tag-item\"];\r\n        if (this.props.isSelected) {\r\n            classNames.push(\"tag-item-selected\");\r\n        }\r\n        if (this.props.appliedToSelectedRegions) {\r\n            classNames.push(\"tag-item-applied\");\r\n        }\r\n        return classNames.join(\" \");\r\n    }\r\n\r\n    private getTagContent = () => {\r\n        const displayIndex = this.getDisplayIndex();\r\n        return (\r\n            <div className={\"tag-name-container\"}>\r\n                <div className=\"tag-name-body\">\r\n                    {\r\n                        (this.state.isBeingEdited && this.state.tagEditMode === TagEditMode.Name)\r\n                            ?\r\n                            <input\r\n                                className={`tag-name-editor ${this.getContentClassName()}`}\r\n                                type=\"text\"\r\n                                defaultValue={this.props.tag.name}\r\n                                onKeyDown={(e) => this.handleNameEdit(e)}\r\n                                autoFocus={true}\r\n                            />\r\n                            :\r\n                            <span title={this.props.tag.name} className={this.getContentClassName()}>\r\n                                {this.props.tag.name}\r\n                            </span>\r\n                    }\r\n                </div>\r\n                <div className=\"tag-lock-icon\">\r\n                    {this.props.isLocked &&\r\n                        <i className=\"fas fa-lock\" />\r\n                    }\r\n                </div>\r\n                <div className={\"tag-index\"}>\r\n                    {(displayIndex !== null) && <span>[{displayIndex}]</span>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleNameEdit = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            const newTagName = e.target.value;\r\n            this.props.onChange(this.props.tag, {\r\n                ...this.props.tag,\r\n                name: newTagName,\r\n            });\r\n        } else if (e.key === \"Escape\") {\r\n            this.setState({\r\n                isBeingEdited: false,\r\n            });\r\n        }\r\n    }\r\n\r\n    private getContentClassName = () => {\r\n        const classNames = [\"tag-name-text px-2\"];\r\n        if (this.state.isBeingEdited && this.state.tagEditMode === TagEditMode.Color) {\r\n            classNames.push(\" tag-color-edit\");\r\n        }\r\n        return classNames.join(\" \");\r\n    }\r\n\r\n    private getDisplayIndex = () => {\r\n        const index = this.props.index;\r\n        const displayIndex = (index === 9) ? 0 : index + 1;\r\n        return (displayIndex < 10) ? displayIndex : null;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { GithubPicker, CirclePicker } from \"react-color\";\r\n\r\nexport interface IColorPickerProps {\r\n    show: boolean;\r\n    color: string;\r\n    colors: string[];\r\n    onEditColor: (color: string) => void;\r\n}\r\n\r\nexport class ColorPicker extends React.Component<IColorPickerProps> {\r\n\r\n    private pickerBackground = \"#252526\";\r\n\r\n    public render() {\r\n        return (\r\n            this.props.show &&\r\n            this.GithubPicker()\r\n        );\r\n    }\r\n\r\n    private onChange = (color) => {\r\n        this.props.onEditColor(color.hex);\r\n    }\r\n\r\n    private GithubPicker = () => {\r\n        return (\r\n            <div className=\"color-picker\">\r\n                <GithubPicker\r\n                    color={{hex: this.props.color}}\r\n                    onChangeComplete={this.onChange}\r\n                    colors={this.props.colors}\r\n                    width={160}\r\n                    styles={{\r\n                        default: {\r\n                            card: {\r\n                                background: this.pickerBackground,\r\n                            },\r\n                        },\r\n                    }}\r\n                    triangle={\"hide\"}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private CirclePicker = () => {\r\n        return (\r\n            <div className=\"circle-picker-container\">\r\n                <CirclePicker\r\n                    width={200}\r\n                    onChange={this.onChange}\r\n                    colors={this.props.colors}\r\n                    hex={this.props.color}\r\n                    circleSize={25}\r\n                />\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { SyntheticEvent } from \"react\";\r\nimport { strings } from \"../../../../common/strings\";\r\nimport { ITag } from \"../../../../models/applicationState\";\r\nimport \"./tagInput.scss\";\r\n\r\n/** Properties for tag input toolbar */\r\nexport interface ITagInputToolbarProps {\r\n    /** Currently selected tag */\r\n    selectedTag: ITag;\r\n    /** Function to call when add tags button is clicked */\r\n    onAddTags: () => void;\r\n    /** Function to call when search tags button is clicked */\r\n    onSearchTags: () => void;\r\n    /** Function to call when lock tags button is clicked */\r\n    onLockTag: (tag: ITag) => void;\r\n    /** Function to call when edit tag button is clicked */\r\n    onEditTag: (tag: ITag) => void;\r\n    /** Function to call when delete button is clicked */\r\n    onDelete: (tag: ITag) => void;\r\n    /** Function to call when one of the re-order buttons is clicked */\r\n    onReorder: (tag: ITag, displacement: number) => void;\r\n}\r\n\r\ninterface ITagInputToolbarItemProps {\r\n    displayName: string;\r\n    className: string;\r\n    icon: string;\r\n    handler: () => void;\r\n    accelerators?: string[];\r\n}\r\n\r\nexport default class TagInputToolbar extends React.Component<ITagInputToolbarProps> {\r\n    public render() {\r\n        return (\r\n            <div className=\"tag-input-toolbar\">\r\n                {\r\n                    this.getToolbarItems().map((itemConfig) =>\r\n                        <div key={itemConfig.displayName} className={`tag-input-toolbar-item ${itemConfig.className}`}\r\n                            onClick={(e) => this.onToolbarItemClick(e, itemConfig)}>\r\n                            <i className={`tag-input-toolbar-icon fas ${itemConfig.icon}`} />\r\n                        </div>,\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onToolbarItemClick = (e: SyntheticEvent, itemConfig: ITagInputToolbarItemProps): void => {\r\n        e.stopPropagation();\r\n        itemConfig.handler();\r\n    }\r\n\r\n    private getToolbarItems = (): ITagInputToolbarItemProps[] => {\r\n        return [\r\n            {\r\n                displayName: strings.tags.toolbar.add,\r\n                className: \"plus\",\r\n                icon: \"fa-plus-circle\",\r\n                handler: this.handleAdd,\r\n            },\r\n            {\r\n                displayName: strings.tags.toolbar.search,\r\n                className: \"search\",\r\n                icon: \"fa-search\",\r\n                handler: this.handleSearch,\r\n            },\r\n            {\r\n                displayName: strings.tags.toolbar.lock,\r\n                className: \"lock\",\r\n                icon: \"fa-lock\",\r\n                handler: this.handleLock,\r\n            },\r\n            {\r\n                displayName: strings.tags.toolbar.edit,\r\n                className: \"edit\",\r\n                icon: \"fa-edit\",\r\n                handler: this.handleEdit,\r\n            },\r\n            {\r\n                displayName: strings.tags.toolbar.moveUp,\r\n                className: \"up\",\r\n                icon: \"fa-arrow-circle-up\",\r\n                handler: this.handleArrowUp,\r\n            },\r\n            {\r\n                displayName: strings.tags.toolbar.moveDown,\r\n                className: \"down\",\r\n                icon: \"fa-arrow-circle-down\",\r\n                handler: this.handleArrowDown,\r\n            },\r\n            {\r\n                displayName: strings.tags.toolbar.delete,\r\n                className: \"delete\",\r\n                icon: \"fa-trash\",\r\n                handler: this.handleDelete,\r\n            },\r\n        ];\r\n    }\r\n\r\n    private handleAdd = () => {\r\n        this.props.onAddTags();\r\n    }\r\n\r\n    private handleSearch = () => {\r\n        this.props.onSearchTags();\r\n    }\r\n\r\n    private handleLock = () => {\r\n        this.props.onLockTag(this.props.selectedTag);\r\n    }\r\n\r\n    private handleEdit = () => {\r\n        this.props.onEditTag(this.props.selectedTag);\r\n    }\r\n\r\n    private handleArrowUp = () => {\r\n        this.props.onReorder(this.props.selectedTag, -1);\r\n    }\r\n\r\n    private handleArrowDown = () => {\r\n        this.props.onReorder(this.props.selectedTag, 1);\r\n    }\r\n\r\n    private handleDelete = () => {\r\n        this.props.onDelete(this.props.selectedTag);\r\n    }\r\n}\r\n","import React, { KeyboardEvent, RefObject } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Align from \"rc-align\";\r\nimport { randomIntInRange } from \"../../../../common/utils\";\r\nimport { IRegion, ITag } from \"../../../../models/applicationState\";\r\nimport { ColorPicker } from \"../colorPicker\";\r\nimport \"./tagInput.scss\";\r\nimport \"../condensedList/condensedList.scss\";\r\nimport TagInputItem, { ITagInputItemProps, ITagClickProps } from \"./tagInputItem\";\r\nimport TagInputToolbar from \"./tagInputToolbar\";\r\nimport { toast } from \"react-toastify\";\r\nimport { strings } from \"../../../../common/strings\";\r\n// tslint:disable-next-line:no-var-requires\r\nconst tagColors = require(\"../../common/tagColors.json\");\r\n\r\nexport interface ITagInputProps {\r\n    /** Current list of tags */\r\n    tags: ITag[];\r\n    /** Function called on tags change */\r\n    onChange: (tags: ITag[]) => void;\r\n    /** Currently selected regions in canvas */\r\n    selectedRegions?: IRegion[];\r\n    /** Tags that are currently locked for editing experience */\r\n    lockedTags?: string[];\r\n    /** Updates to locked tags */\r\n    onLockedTagsChange?: (locked: string[]) => void;\r\n    /** Place holder for input text box */\r\n    placeHolder?: string;\r\n    /** Function to call on clicking individual tag */\r\n    onTagClick?: (tag: ITag) => void;\r\n    /** Function to call on clicking individual tag while holding CTRL key */\r\n    onCtrlTagClick?: (tag: ITag) => void;\r\n    /** Function to call when tag is renamed */\r\n    onTagRenamed?: (tagName: string, newTagName: string) => void;\r\n    /** Function to call when tag is deleted */\r\n    onTagDeleted?: (tagName: string) => void;\r\n    /** Always show tag input box */\r\n    showTagInputBox?: boolean;\r\n    /** Always show tag search box */\r\n    showSearchBox?: boolean;\r\n}\r\n\r\nexport interface ITagInputState {\r\n    tags: ITag[];\r\n    clickedColor: boolean;\r\n    showColorPicker: boolean;\r\n    addTags: boolean;\r\n    searchTags: boolean;\r\n    searchQuery: string;\r\n    selectedTag: ITag;\r\n    editingTag: ITag;\r\n    portalElement: Element;\r\n    editingTagNode: Element;\r\n}\r\n\r\nfunction defaultDOMNode(): Element {\r\n    return document.createElement(\"div\");\r\n}\r\n\r\nexport class TagInput extends React.Component<ITagInputProps, ITagInputState> {\r\n\r\n    public state: ITagInputState = {\r\n        tags: this.props.tags || [],\r\n        clickedColor: false,\r\n        showColorPicker: false,\r\n        addTags: this.props.showTagInputBox,\r\n        searchTags: this.props.showSearchBox,\r\n        searchQuery: \"\",\r\n        selectedTag: null,\r\n        editingTag: null,\r\n        editingTagNode: null,\r\n        portalElement: defaultDOMNode(),\r\n    };\r\n\r\n    private tagItemRefs: Map<string, TagInputItem> = new Map<string, TagInputItem>();\r\n    private portalDiv = document.createElement(\"div\");\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"tag-input condensed-list\">\r\n                <h6 className=\"condensed-list-header tag-input-header bg-darker-2 p-2\">\r\n                    <span className=\"condensed-list-title tag-input-title\">Tags</span>\r\n                    <TagInputToolbar\r\n                        selectedTag={this.state.selectedTag}\r\n                        onAddTags={() => this.setState({ addTags: !this.state.addTags })}\r\n                        onSearchTags={() => this.setState({\r\n                            searchTags: !this.state.searchTags,\r\n                            searchQuery: \"\",\r\n                        })}\r\n                        onEditTag={this.onEditTag}\r\n                        onLockTag={this.onLockTag}\r\n                        onDelete={this.deleteTag}\r\n                        onReorder={this.onReOrder}\r\n                    />\r\n                </h6>\r\n                <div className=\"condensed-list-body\">\r\n                    {\r\n                        this.state.searchTags &&\r\n                        <div className=\"tag-input-text-input-row search-input\">\r\n                            <input\r\n                                className=\"tag-search-box\"\r\n                                type=\"text\"\r\n                                onKeyDown={this.onSearchKeyDown}\r\n                                onChange={(e) => this.setState({ searchQuery: e.target.value })}\r\n                                placeholder=\"Search tags\"\r\n                                autoFocus={true}\r\n                            />\r\n                            <i className=\"tag-row-icon fas fa-search\" />\r\n                        </div>\r\n                    }\r\n                    {this.getColorPickerPortal()}\r\n                    <div className=\"tag-input-items\">\r\n                        {this.renderTagItems()}\r\n                    </div>\r\n                    {\r\n                        this.state.addTags &&\r\n                        <div className=\"tag-input-text-input-row new-tag-input\">\r\n                            <input\r\n                                className=\"tag-input-box\"\r\n                                type=\"text\"\r\n                                onKeyDown={this.onAddTagKeyDown}\r\n                                placeholder=\"Add new tag\"\r\n                                autoFocus={true}\r\n                            />\r\n                            <i className=\"tag-input-row-icon fas fa-tag\" />\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        document.body.appendChild(this.portalDiv);\r\n        this.setState({\r\n            portalElement: ReactDOM.findDOMNode(this.portalDiv) as Element,\r\n        });\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        document.body.removeChild(this.portalDiv);\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: ITagInputProps) {\r\n        if (prevProps.tags !== this.props.tags) {\r\n            this.setState({\r\n                tags: this.props.tags,\r\n            });\r\n        }\r\n\r\n        if (prevProps.selectedRegions !== this.props.selectedRegions && this.props.selectedRegions.length > 0) {\r\n            this.setState({\r\n                selectedTag: null,\r\n            });\r\n        }\r\n    }\r\n\r\n    private getTagNode = (tag: ITag): Element => {\r\n        const itemRef = tag ? this.tagItemRefs.get(tag.name) : null;\r\n        return (itemRef ? ReactDOM.findDOMNode(itemRef) : defaultDOMNode()) as Element;\r\n    }\r\n\r\n    private onEditTag = (tag: ITag) => {\r\n        const { editingTag } = this.state;\r\n        const newEditingTag = (editingTag && editingTag.name === tag.name) ? null : tag;\r\n        this.setState({\r\n            editingTag: newEditingTag,\r\n            editingTagNode: this.getTagNode(newEditingTag),\r\n        });\r\n        if (this.state.clickedColor) {\r\n            this.setState({\r\n                showColorPicker: !this.state.showColorPicker,\r\n            });\r\n        }\r\n    }\r\n\r\n    private onLockTag = (tag: ITag) => {\r\n        if (!tag) {\r\n            return;\r\n        }\r\n        let lockedTags = [...this.props.lockedTags];\r\n        if (lockedTags.find((t) => t === tag.name)) {\r\n            lockedTags = lockedTags.filter((t) => t !== tag.name);\r\n        } else {\r\n            lockedTags.push(tag.name);\r\n        }\r\n        this.props.onLockedTagsChange(lockedTags);\r\n    }\r\n\r\n    private onReOrder = (tag: ITag, displacement: number) => {\r\n        if (!tag) {\r\n            return;\r\n        }\r\n        const tags = [...this.state.tags];\r\n        const currentIndex = tags.indexOf(tag);\r\n        const newIndex = currentIndex + displacement;\r\n        if (newIndex < 0 || newIndex >= tags.length) {\r\n            return;\r\n        }\r\n        tags.splice(currentIndex, 1);\r\n        tags.splice(newIndex, 0, tag);\r\n        this.setState({\r\n            tags,\r\n        }, () => this.props.onChange(tags));\r\n    }\r\n\r\n    private handleColorChange = (color: string) => {\r\n        const tag = this.state.editingTag;\r\n        const tags = this.state.tags.map((t) => {\r\n            return (t.name === tag.name) ? { name: t.name, color } : t;\r\n        });\r\n        this.setState({\r\n            tags,\r\n            editingTag: null,\r\n            showColorPicker: false,\r\n        }, () => this.props.onChange(tags));\r\n    }\r\n\r\n    private updateTag = (tag: ITag, newTag: ITag) => {\r\n        if (tag.name === newTag.name && tag.color === newTag.color) {\r\n            return;\r\n        }\r\n        if (!newTag.name.length) {\r\n            toast.warn(strings.tags.warnings.emptyName);\r\n            return;\r\n        }\r\n        const nameChange = tag.name !== newTag.name;\r\n        if (nameChange && this.state.tags.some((t) => t.name === newTag.name)) {\r\n            toast.warn(strings.tags.warnings.existingName);\r\n            return;\r\n        }\r\n        if (nameChange && this.props.onTagRenamed) {\r\n            this.props.onTagRenamed(tag.name, newTag.name);\r\n            return;\r\n        }\r\n        const tags = this.state.tags.map((t) => {\r\n            return (t.name === tag.name) ? newTag : t;\r\n        });\r\n        this.setState({\r\n            tags,\r\n            editingTag: null,\r\n            selectedTag: newTag,\r\n        }, () => {\r\n            this.props.onChange(tags);\r\n        });\r\n    }\r\n\r\n    private getColorPickerPortal = () => {\r\n        return (\r\n            <div>\r\n                {\r\n                    ReactDOM.createPortal(\r\n                        <Align align={this.getAlignConfig()} target={this.getTarget}>\r\n                            <div className=\"tag-input-color-picker\">\r\n                                {\r\n                                    this.state.showColorPicker &&\r\n                                    <ColorPicker\r\n                                        color={this.state.editingTag && this.state.editingTag.color}\r\n                                        colors={tagColors}\r\n                                        onEditColor={this.handleColorChange}\r\n                                        show={this.state.showColorPicker}\r\n                                    />\r\n                                }\r\n                            </div>\r\n                        </Align>\r\n                        , this.state.portalElement)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getAlignConfig = () => {\r\n        const coords = this.getEditingTagCoords();\r\n        const isNearBottom = coords && coords.top > (window.innerHeight / 2);\r\n        const alignCorner = isNearBottom ? \"b\" : \"t\";\r\n        const verticalOffset = isNearBottom ? 6 : -6;\r\n        return {\r\n            // Align top right of source node (color picker) with top left of target node (tag row)\r\n            points: [`${alignCorner}r`, `${alignCorner}l`],\r\n            // Offset source node by 10px in x and 20px in y\r\n            offset: [0, verticalOffset],\r\n            // Offset targetNode by 30% of target node width in x and 40% of target node height\r\n            // targetOffset: [\"30%\", \"40%\"],\r\n            // Auto adjust position when source node is overflowed\r\n            // overflow: {adjustX: true, adjustY: true}\r\n        };\r\n    }\r\n\r\n    private getEditingTagCoords = () => {\r\n        const node = this.state.editingTagNode;\r\n        return (node) ? node.getBoundingClientRect() : null;\r\n    }\r\n\r\n    private getTarget = () => {\r\n        return this.state.editingTagNode || document;\r\n    }\r\n\r\n    private renderTagItems = () => {\r\n        let props = this.createTagItemProps();\r\n        const query = this.state.searchQuery;\r\n        this.tagItemRefs.clear();\r\n\r\n        if (query.length) {\r\n            props = props.filter((prop) => prop.tag.name.toLowerCase().includes(query.toLowerCase()));\r\n        }\r\n\r\n        return props.map((prop) =>\r\n            <TagInputItem\r\n                key={prop.tag.name}\r\n                ref={(item) => this.setTagItemRef(item, prop.tag)}\r\n                {...prop}\r\n            />);\r\n    }\r\n\r\n    private setTagItemRef = (item: TagInputItem, tag: ITag) => {\r\n        this.tagItemRefs.set(tag.name, item);\r\n        return item;\r\n    }\r\n\r\n    private createTagItemProps = (): ITagInputItemProps[] => {\r\n        const tags = this.state.tags;\r\n        const selectedRegionTagSet = this.getSelectedRegionTagSet();\r\n\r\n        return tags.map((tag) => (\r\n            {\r\n                tag,\r\n                index: tags.findIndex((t) => t.name === tag.name),\r\n                isLocked: this.props.lockedTags && this.props.lockedTags.findIndex((t) => t === tag.name) > -1,\r\n                isBeingEdited: this.state.editingTag && this.state.editingTag.name === tag.name,\r\n                isSelected: this.state.selectedTag && this.state.selectedTag.name === tag.name,\r\n                appliedToSelectedRegions: selectedRegionTagSet.has(tag.name),\r\n                onClick: this.handleClick,\r\n                onChange: this.updateTag,\r\n            } as ITagInputItemProps\r\n        ));\r\n    }\r\n\r\n    private getSelectedRegionTagSet = (): Set<string> => {\r\n        const result = new Set<string>();\r\n        if (this.props.selectedRegions) {\r\n            for (const region of this.props.selectedRegions) {\r\n                for (const tag of region.tags) {\r\n                    result.add(tag);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private onAltClick = (tag: ITag, clickedColor: boolean) => {\r\n        const { editingTag } = this.state;\r\n        const newEditingTag = editingTag && editingTag.name === tag.name ? null : tag;\r\n\r\n        this.setState({\r\n            editingTag: newEditingTag,\r\n            editingTagNode: this.getTagNode(newEditingTag),\r\n            clickedColor,\r\n            showColorPicker: !this.state.showColorPicker && clickedColor,\r\n        });\r\n    }\r\n\r\n    private handleClick = (tag: ITag, props: ITagClickProps) => {\r\n        // Lock tags\r\n        if (props.ctrlKey && this.props.onCtrlTagClick) {\r\n            this.props.onCtrlTagClick(tag);\r\n            this.setState({ clickedColor: props.clickedColor });\r\n        } else if (props.altKey) { // Edit tag\r\n            this.onAltClick(tag, props.clickedColor);\r\n        } else { // Select tag\r\n            const { editingTag, selectedTag } = this.state;\r\n            const inEditMode = editingTag && tag.name === editingTag.name;\r\n            const alreadySelected = selectedTag && selectedTag.name === tag.name;\r\n            const newEditingTag = inEditMode ? null : editingTag;\r\n\r\n            this.setState({\r\n                editingTag: newEditingTag,\r\n                editingTagNode: this.getTagNode(newEditingTag),\r\n                selectedTag: (alreadySelected && !inEditMode) ? null : tag,\r\n                clickedColor: props.clickedColor,\r\n                showColorPicker: false,\r\n            });\r\n\r\n            // Only fire click event if a region is selected\r\n            if (this.props.selectedRegions &&\r\n                this.props.selectedRegions.length > 0 &&\r\n                this.props.onTagClick &&\r\n                !inEditMode) {\r\n                this.props.onTagClick(tag);\r\n            }\r\n        }\r\n    }\r\n\r\n    private deleteTag = (tag: ITag) => {\r\n        if (!tag) {\r\n            return;\r\n        }\r\n        if (this.props.onTagDeleted) {\r\n            this.props.onTagDeleted(tag.name);\r\n            return;\r\n        }\r\n\r\n        const index = this.state.tags.indexOf(tag);\r\n        const tags = this.state.tags.filter((t) => t.name !== tag.name);\r\n\r\n        this.setState({\r\n            tags,\r\n            selectedTag: this.getNewSelectedTag(tags, index),\r\n        }, () => this.props.onChange(tags));\r\n\r\n        if (this.props.lockedTags.find((l) => l === tag.name)) {\r\n            this.props.onLockedTagsChange(\r\n                this.props.lockedTags.filter((lockedTag) => lockedTag !== tag.name),\r\n            );\r\n        }\r\n    }\r\n\r\n    private getNewSelectedTag = (tags: ITag[], previouIndex: number): ITag => {\r\n        return (tags.length) ? tags[Math.min(tags.length - 1, previouIndex)] : null;\r\n    }\r\n\r\n    private onSearchKeyDown = (event: KeyboardEvent): void => {\r\n        if (event.key === \"Escape\") {\r\n            this.setState({\r\n                searchTags: false,\r\n            });\r\n        }\r\n    }\r\n\r\n    private onAddTagKeyDown = (event) => {\r\n        if (event.key === \"Enter\") {\r\n            // validate and add\r\n            const newTag: ITag = {\r\n                name: event.target.value,\r\n                color: this.getNextColor(),\r\n            };\r\n            if (newTag.name.length && !this.state.tags.find((t) => t.name === newTag.name)) {\r\n                this.addTag(newTag);\r\n                event.target.value = \"\";\r\n            } else if (!newTag.name.length) {\r\n                toast.warn(strings.tags.warnings.emptyName);\r\n            } else {\r\n                toast.warn(strings.tags.warnings.existingName);\r\n            }\r\n        }\r\n        if (event.key === \"Escape\") {\r\n            this.setState({\r\n                addTags: false,\r\n            });\r\n        }\r\n    }\r\n\r\n    private getNextColor = () => {\r\n        const tags = this.state.tags;\r\n        if (tags.length > 0) {\r\n            const lastColor = tags[tags.length - 1].color;\r\n            const lastIndex = tagColors.findIndex((color) => color === lastColor);\r\n            let newIndex;\r\n            if (lastIndex > -1) {\r\n                newIndex = (lastIndex + 1) % tagColors.length;\r\n            } else {\r\n                newIndex = randomIntInRange(0, tagColors.length - 1);\r\n            }\r\n            return tagColors[newIndex];\r\n        } else {\r\n            return tagColors[0];\r\n        }\r\n    }\r\n\r\n    private addTag = (tag: ITag) => {\r\n        if (!this.state.tags.find((t) => t.name === tag.name)) {\r\n            const tags = [...this.state.tags, tag];\r\n            this.setState({\r\n                tags,\r\n            }, () => this.props.onChange(tags));\r\n        }\r\n    }\r\n}\r\n","import shortid from \"shortid\";\r\nimport { Point2D } from \"vott-ct/lib/js/CanvasTools/Core/Point2D\";\r\nimport { RegionData, RegionDataType } from \"vott-ct/lib/js/CanvasTools/Core/RegionData\";\r\nimport { Tag } from \"vott-ct/lib/js/CanvasTools/Core/Tag\";\r\nimport { TagsDescriptor } from \"vott-ct/lib/js/CanvasTools/Core/TagsDescriptor\";\r\nimport Guard from \"../../../../common/guard\";\r\nimport { IBoundingBox, IRegion, ITag, RegionType,\r\n    IPoint, AppError, ErrorCode } from \"../../../../models/applicationState\";\r\nimport { strings } from \"../../../../common/strings\";\r\n\r\n/**\r\n * Static functions to assist in operations within Canvas component\r\n */\r\nexport default class CanvasHelpers {\r\n\r\n    public static pasteMargin = 10;\r\n\r\n    /**\r\n     * Adds tag to array if it does not contain the tag,\r\n     * removes tag if already contained. Performs operations in place\r\n     * @param tags Array of tags\r\n     * @param tag Tag to toggle\r\n     */\r\n    public static toggleTag(tags: string[], tag: string): string[] {\r\n        const tagIndex = tags.findIndex((existingTag) => existingTag === tag);\r\n        if (tagIndex === -1) {\r\n            // Tag isn't found within region tags, add it\r\n            return [...tags, tag];\r\n        } else {\r\n            // Tag is within region tags, remove it\r\n            return tags.filter((t) => t !== tag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds tag to tags if not contained\r\n     * @param tags Existing tags array\r\n     * @param tag Tag to be added if missing\r\n     */\r\n    public static addIfMissing(tags: string[], tag: string): string[] {\r\n        if (!tags.find((t) => t === tag)) {\r\n            return [...tags, tag];\r\n        }\r\n        return tags;\r\n    }\r\n\r\n    /**\r\n     * Adds all target tags if missing from tags\r\n     * @param tags Existing tags array\r\n     * @param newTags Tags to be added if not contained\r\n     */\r\n    public static addAllIfMissing(tags: string[], newTags: string[]): string[] {\r\n        let result = [...tags];\r\n        for (const newTag of newTags) {\r\n            result = CanvasHelpers.addIfMissing(result, newTag);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Removes tag from tags if contained\r\n     * @param tags Existing tags array\r\n     * @param tag Tag to be removed if contained in `tags`\r\n     */\r\n    public static removeIfContained(tags: string[], tag: string): string[] {\r\n        return tags.filter((t) => t !== tag);\r\n    }\r\n\r\n    /**\r\n     * Updates any IRegion in `regions` that has the same id as IRegion in `updates`\r\n     * @param regions Original regions\r\n     * @param updates Regions that are to be updated in `regions`\r\n     */\r\n    public static updateRegions(regions: IRegion[], updates: IRegion[]): IRegion[] {\r\n        if (!regions || !updates || !updates.length) {\r\n            return regions;\r\n        }\r\n        const result: IRegion[] = [];\r\n        for (const region of regions) {\r\n            const update = updates.find((r) => r.id === region.id);\r\n            if (update) {\r\n                result.push(update);\r\n            } else {\r\n                result.push(region);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get RegionData (CanvasTools) from IRegion\r\n     * @param region IRegion from Canvas component\r\n     */\r\n    public static getRegionData(region: IRegion): RegionData {\r\n        return new RegionData(region.boundingBox.left,\r\n            region.boundingBox.top,\r\n            region.boundingBox.width,\r\n            region.boundingBox.height,\r\n            region.points.map((point) =>\r\n                new Point2D(point.x, point.y)),\r\n            this.regionTypeToType(region.type));\r\n    }\r\n\r\n    /**\r\n     * Converts a canvas tools RegionData to VoTT IRegion\r\n     * @param regionData The region data to convert\r\n     * @param regionType The region type\r\n     */\r\n    public static fromRegionData(regionData: RegionData, regionType: RegionType): IRegion {\r\n        Guard.null(regionData);\r\n\r\n        return {\r\n            id: shortid.generate(),\r\n            type: regionType,\r\n            boundingBox: {\r\n                left: regionData.x,\r\n                top: regionData.y,\r\n                width: regionData.width,\r\n                height: regionData.height,\r\n            },\r\n            points: regionData.points.map((point) => new Point2D(point.x, point.y)),\r\n            tags: [],\r\n        };\r\n    }\r\n\r\n    public static isEmpty(regionData: RegionData): boolean {\r\n        return regionData.area === 0 && regionData.x === 0 && regionData.y === 0;\r\n    }\r\n\r\n    /**\r\n     * Create TagsDescriptor (CanvasTools) from IRegion\r\n     * @param region IRegion from Canvas\r\n     */\r\n    public static getTagsDescriptor(projectTags: ITag[], region: IRegion): TagsDescriptor {\r\n        if (!projectTags || !projectTags.length) {\r\n            return null;\r\n        }\r\n        Guard.null(region);\r\n\r\n        const tags = region.tags\r\n            .map((tagName) => {\r\n                const projectTag = projectTags.find((projectTag) => projectTag.name === tagName);\r\n                return projectTag ? new Tag(projectTag.name, projectTag.color) : null;\r\n            })\r\n            .filter((tag) => tag !== null);\r\n\r\n        return new TagsDescriptor(tags);\r\n    }\r\n\r\n    /**\r\n     * Gets RegionDataType (CanvasTools) from RegionType\r\n     */\r\n    public static regionTypeToType = (regionType: RegionType) => {\r\n        let type;\r\n        switch (regionType) {\r\n            case RegionType.Rectangle:\r\n                type = RegionDataType.Rect;\r\n                break;\r\n            case RegionType.Polygon:\r\n                type = RegionDataType.Polygon;\r\n                break;\r\n            case RegionType.Point:\r\n                type = RegionDataType.Point;\r\n                break;\r\n            case RegionType.Polyline:\r\n                type = RegionDataType.Polyline;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Duplicates region with a new ID, and moves it to the next available location by intervals\r\n     * of `CanvasHelpers.pasteMargin`.\r\n     * @param regions Regions to duplicate\r\n     * @param others Other regions existing in the asset (used to not put region on top of other region)\r\n     */\r\n    public static duplicateRegionsAndMove =\r\n            (regions: IRegion[], others: IRegion[], width: number, height: number): IRegion[] => {\r\n        const result: IRegion[] = [];\r\n        for (const region of regions) {\r\n            const shiftCoordinates = CanvasHelpers.getShiftCoordinates(region.boundingBox, others, width, height);\r\n\r\n            const newRegion: IRegion = {\r\n                ...region,\r\n                id: shortid.generate(),\r\n                boundingBox: CanvasHelpers.shiftBoundingBox(region.boundingBox, shiftCoordinates),\r\n                points: CanvasHelpers.shiftPoints(region.points, shiftCoordinates),\r\n            };\r\n            result.push(newRegion);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static boundingBoxWithin = (boundingBox: IBoundingBox, width: number, height: number) => {\r\n        return (\r\n            (boundingBox.left + boundingBox.width) < width &&\r\n            (boundingBox.top + boundingBox.height) < height\r\n        );\r\n    }\r\n\r\n    public static fromBoundingBox = (boundingBox: IBoundingBox): IPoint[] => {\r\n        return [\r\n            {\r\n                x: boundingBox.left,\r\n                y: boundingBox.top,\r\n            },\r\n            {\r\n                x: boundingBox.left + boundingBox.width,\r\n                y: boundingBox.top,\r\n            },\r\n            {\r\n                x: boundingBox.left + boundingBox.width,\r\n                y: boundingBox.top + boundingBox.height,\r\n            },\r\n            {\r\n                x: boundingBox.left,\r\n                y: boundingBox.top + boundingBox.height,\r\n            },\r\n        ];\r\n    }\r\n\r\n    private static shiftBoundingBox = (boundingBox: IBoundingBox, shiftCoordinates: IPoint): IBoundingBox => {\r\n        return {\r\n            ...boundingBox,\r\n            left: boundingBox.left + shiftCoordinates.x,\r\n            top: boundingBox.top + shiftCoordinates.y,\r\n        };\r\n    }\r\n\r\n    private static shiftPoints = (points: IPoint[], shiftCoordinates: IPoint) => {\r\n        return points.map((p) => {\r\n            return {\r\n                x: p.x + shiftCoordinates.x,\r\n                y: p.y + shiftCoordinates.y,\r\n            };\r\n        });\r\n    }\r\n\r\n    private static existsRegionAt = (regions: IRegion[], x: number, y: number) => {\r\n        for (const region of regions) {\r\n            if (region.boundingBox.left === x && region.boundingBox.top === y) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private static getShiftCoordinates =\r\n            (boundingBox: IBoundingBox, otherRegions: IRegion[], width: number, height: number): IPoint => {\r\n        let x = boundingBox.left;\r\n        let y = boundingBox.top;\r\n\r\n        let defaultTargetX = 0;\r\n        const defaultTargetY = 0;\r\n\r\n        if (boundingBox.height > height || boundingBox.width > width) {\r\n            throw new AppError(ErrorCode.PasteRegionTooBig, strings.errors.pasteRegionTooBigError.message);\r\n        }\r\n\r\n        if (!CanvasHelpers.boundingBoxWithin(boundingBox, width, height)) {\r\n            x = defaultTargetX;\r\n            y = defaultTargetY;\r\n        }\r\n\r\n        let foundRegionAtTarget = false;\r\n\r\n        while (!foundRegionAtTarget) {\r\n            if (CanvasHelpers.existsRegionAt(otherRegions, x, y)) {\r\n                x += CanvasHelpers.pasteMargin;\r\n                y += CanvasHelpers.pasteMargin;\r\n                foundRegionAtTarget = false;\r\n            } else {\r\n                const result = {\r\n                    x: x - boundingBox.left,\r\n                    y: y - boundingBox.top,\r\n                };\r\n                const tempBoundingBox = {\r\n                    ...boundingBox,\r\n                    left: boundingBox.left + result.x,\r\n                    top: boundingBox.top + result.y,\r\n                };\r\n                if (CanvasHelpers.boundingBoxWithin(tempBoundingBox, width, height)) {\r\n                    return result;\r\n                } else {\r\n                    x = defaultTargetX;\r\n                    y = defaultTargetY;\r\n                    if (CanvasHelpers.existsRegionAt(otherRegions, defaultTargetX, defaultTargetY)) {\r\n                        defaultTargetX += CanvasHelpers.pasteMargin;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","export default class Clipboard {\r\n    public static async writeText(text: string): Promise<void> {\r\n        return (navigator as any).clipboard.writeText(text);\r\n    }\r\n\r\n    public static async writeObject(item: any): Promise<void> {\r\n        return Clipboard.writeText(JSON.stringify(item));\r\n    }\r\n\r\n    public static async readText(): Promise<string> {\r\n        return (navigator as any).clipboard.readText();\r\n    }\r\n\r\n    public static async readObject(): Promise<any> {\r\n        return Clipboard.readText().then((text) => Promise.resolve(JSON.parse(text)));\r\n    }\r\n}\r\n","import { ContentSource } from \"../react/components/common/assetPreview/assetPreview\";\r\nimport { IBoundingBox, ISize } from \"../models/applicationState\";\r\nimport Guard from \"./guard\";\r\n\r\n/**\r\n * Gets the current position of the specified content source\r\n * @param contentSource The HTML element to get position\r\n */\r\nexport function createContentBoundingBox(contentSource: ContentSource): IBoundingBox {\r\n    Guard.null(contentSource);\r\n\r\n    let aspectRatio: number = null;\r\n    if (contentSource instanceof HTMLVideoElement) {\r\n        aspectRatio = contentSource.videoWidth / contentSource.videoHeight;\r\n    } else if (contentSource instanceof HTMLImageElement) {\r\n        aspectRatio = contentSource.naturalWidth / contentSource.naturalHeight;\r\n    } else {\r\n        aspectRatio = contentSource.width / contentSource.height;\r\n    }\r\n\r\n    let size: ISize = null;\r\n\r\n    // Landscape = aspectRatio > 1\r\n    // Portrait  = aspectRatio < 1\r\n    if (aspectRatio >= 1) {\r\n        size = {\r\n            width: contentSource.offsetWidth,\r\n            height: contentSource.offsetWidth / aspectRatio,\r\n        };\r\n\r\n        // Render as landscape except for when the calculated height\r\n        // would be taller than the available area\r\n        return size.height > contentSource.offsetHeight\r\n            ? createPortraitBoundingBox(contentSource, aspectRatio)\r\n            : createLandscapeBoundingBox(contentSource, aspectRatio);\r\n    } else {\r\n        size = {\r\n            width: contentSource.offsetHeight * aspectRatio,\r\n            height: contentSource.offsetHeight,\r\n        };\r\n\r\n        // Render as portrait except for when the calculated width\r\n        // would be wider then the available area\r\n        return size.width > contentSource.offsetWidth\r\n            ? createLandscapeBoundingBox(contentSource, aspectRatio)\r\n            : createPortraitBoundingBox(contentSource, aspectRatio);\r\n    }\r\n}\r\n\r\n/**\r\n * Gets a landscape bounding box for the canvas element based on the content source and aspect ratio\r\n * Disregards generated bars from the browser\r\n * @param contentSource The HTML content element\r\n * @param aspectRatio The requested aspect ratio\r\n */\r\nexport function createLandscapeBoundingBox(contentSource: ContentSource, aspectRatio: number): IBoundingBox {\r\n    Guard.null(contentSource);\r\n\r\n    const size = {\r\n        width: contentSource.offsetWidth,\r\n        height: contentSource.offsetWidth / aspectRatio,\r\n    };\r\n\r\n    return {\r\n        width: size.width,\r\n        height: size.height,\r\n        left: contentSource.offsetLeft,\r\n        top: contentSource.offsetTop + ((contentSource.offsetHeight - size.height) / 2),\r\n    };\r\n}\r\n\r\n/**\r\n * Gets a portrait bounding box for the canvas element based on the content source and aspect ratio\r\n * Disregards generated bars from the browser\r\n * @param contentSource The HTML content element\r\n * @param aspectRatio The requested aspect ratio\r\n */\r\nexport function createPortraitBoundingBox(contentSource: ContentSource, aspectRatio: number): IBoundingBox {\r\n    Guard.null(contentSource);\r\n\r\n    const size = {\r\n        width: contentSource.offsetHeight * aspectRatio,\r\n        height: contentSource.offsetHeight,\r\n    };\r\n\r\n    return {\r\n        width: size.width,\r\n        height: size.height,\r\n        left: contentSource.offsetLeft + ((contentSource.offsetWidth - size.width) / 2),\r\n        top: contentSource.offsetTop,\r\n    };\r\n}\r\n","import React, { Fragment, ReactElement } from \"react\";\r\nimport * as shortid from \"shortid\";\r\nimport { CanvasTools } from \"vott-ct\";\r\nimport { RegionData } from \"vott-ct/lib/js/CanvasTools/Core/RegionData\";\r\nimport {\r\n    EditorMode, IAssetMetadata,\r\n    IProject, IRegion, RegionType,\r\n} from \"../../../../models/applicationState\";\r\nimport CanvasHelpers from \"./canvasHelpers\";\r\nimport { AssetPreview, ContentSource } from \"../../common/assetPreview/assetPreview\";\r\nimport { Editor } from \"vott-ct/lib/js/CanvasTools/CanvasTools.Editor\";\r\nimport Clipboard from \"../../../../common/clipboard\";\r\nimport Confirm from \"../../common/confirm/confirm\";\r\nimport { strings } from \"../../../../common/strings\";\r\nimport { SelectionMode } from \"vott-ct/lib/js/CanvasTools/Interface/ISelectorSettings\";\r\nimport { Rect } from \"vott-ct/lib/js/CanvasTools/Core/Rect\";\r\nimport { createContentBoundingBox } from \"../../../../common/layout\";\r\n\r\nexport interface ICanvasProps extends React.Props<Canvas> {\r\n    selectedAsset: IAssetMetadata;\r\n    editorMode: EditorMode;\r\n    selectionMode: SelectionMode;\r\n    project: IProject;\r\n    lockedTags: string[];\r\n    children?: ReactElement<AssetPreview>;\r\n    onAssetMetadataChanged?: (assetMetadata: IAssetMetadata) => void;\r\n    onSelectedRegionsChanged?: (regions: IRegion[]) => void;\r\n    onCanvasRendered?: (canvas: HTMLCanvasElement) => void;\r\n}\r\n\r\nexport interface ICanvasState {\r\n    currentAsset: IAssetMetadata;\r\n    contentSource: ContentSource;\r\n    enabled: boolean;\r\n}\r\n\r\nexport default class Canvas extends React.Component<ICanvasProps, ICanvasState> {\r\n    public static defaultProps: ICanvasProps = {\r\n        selectionMode: SelectionMode.NONE,\r\n        editorMode: EditorMode.Select,\r\n        selectedAsset: null,\r\n        project: null,\r\n        lockedTags: [],\r\n    };\r\n\r\n    public editor: Editor;\r\n\r\n    public state: ICanvasState = {\r\n        currentAsset: this.props.selectedAsset,\r\n        contentSource: null,\r\n        enabled: false,\r\n    };\r\n\r\n    private canvasZone: React.RefObject<HTMLDivElement> = React.createRef();\r\n    private clearConfirm: React.RefObject<Confirm> = React.createRef();\r\n\r\n    private template: Rect = new Rect(20, 20);\r\n\r\n    public componentDidMount = () => {\r\n        const sz = document.getElementById(\"editor-zone\") as HTMLDivElement;\r\n        this.editor = new CanvasTools.Editor(sz);\r\n        this.editor.autoResize = false;\r\n        this.editor.onSelectionEnd = this.onSelectionEnd;\r\n        this.editor.onRegionMoveEnd = this.onRegionMoveEnd;\r\n        this.editor.onRegionDelete = this.onRegionDelete;\r\n        this.editor.onRegionSelected = this.onRegionSelected;\r\n        this.editor.AS.setSelectionMode({ mode: this.props.selectionMode });\r\n\r\n        window.addEventListener(\"resize\", this.onWindowResize);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.onWindowResize);\r\n    }\r\n\r\n    public componentDidUpdate = async (prevProps: Readonly<ICanvasProps>, prevState: Readonly<ICanvasState>) => {\r\n        // Handles asset changing\r\n        if (this.props.selectedAsset !== prevProps.selectedAsset) {\r\n            this.setState({ currentAsset: this.props.selectedAsset });\r\n        }\r\n\r\n        // Handle selection mode changes\r\n        if (this.props.selectionMode !== prevProps.selectionMode) {\r\n            const options = (this.props.selectionMode === SelectionMode.COPYRECT) ? this.template : null;\r\n            this.editor.AS.setSelectionMode({ mode: this.props.selectionMode, template: options });\r\n        }\r\n\r\n        const assetIdChanged = this.state.currentAsset.asset.id !== prevState.currentAsset.asset.id;\r\n\r\n        // When the selected asset has changed but is still the same asset id\r\n        if (!assetIdChanged && this.state.currentAsset !== prevState.currentAsset) {\r\n            this.refreshCanvasToolsRegions();\r\n        }\r\n\r\n        // When the project tags change re-apply tags to regions\r\n        if (this.props.project.tags !== prevProps.project.tags) {\r\n            this.updateCanvasToolsRegionTags();\r\n        }\r\n\r\n        // Handles when the canvas is enabled & disabled\r\n        if (prevState.enabled !== this.state.enabled) {\r\n            // When the canvas is ready to display\r\n            if (this.state.enabled) {\r\n                this.refreshCanvasToolsRegions();\r\n                this.setContentSource(this.state.contentSource);\r\n                this.editor.AS.setSelectionMode(this.props.selectionMode);\r\n                this.editor.AS.enable();\r\n\r\n                if (this.props.onSelectedRegionsChanged) {\r\n                    this.props.onSelectedRegionsChanged(this.getSelectedRegions());\r\n                }\r\n            } else { // When the canvas has been disabled\r\n                this.editor.AS.disable();\r\n                this.clearAllRegions();\r\n                this.editor.AS.setSelectionMode(SelectionMode.NONE);\r\n            }\r\n        }\r\n    }\r\n\r\n    public render = () => {\r\n        const className = this.state.enabled ? \"canvas-enabled\" : \"canvas-disabled\";\r\n\r\n        return (\r\n            <Fragment>\r\n                <Confirm title={strings.editorPage.canvas.removeAllRegions.title}\r\n                    ref={this.clearConfirm as any}\r\n                    message={strings.editorPage.canvas.removeAllRegions.confirmation}\r\n                    confirmButtonColor=\"danger\"\r\n                    onConfirm={this.removeAllRegions}\r\n                />\r\n                <div id=\"ct-zone\" ref={this.canvasZone} className={className} onClick={(e) => e.stopPropagation()}>\r\n                    <div id=\"selection-zone\">\r\n                        <div id=\"editor-zone\" className=\"full-size\" />\r\n                    </div>\r\n                </div>\r\n                {this.renderChildren()}\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Toggles tag on all selected regions\r\n     * @param selectedTag Tag name\r\n     */\r\n    public applyTag = (tag: string) => {\r\n        const selectedRegions = this.getSelectedRegions();\r\n        const lockedTags = this.props.lockedTags;\r\n        const lockedTagsEmpty = !lockedTags || !lockedTags.length;\r\n        const regionsEmpty = !selectedRegions || !selectedRegions.length;\r\n        if ((!tag && lockedTagsEmpty) || regionsEmpty) {\r\n            return;\r\n        }\r\n        let transformer: (tags: string[], tag: string) => string[];\r\n        if (lockedTagsEmpty) {\r\n            // Tag selected while region(s) selected\r\n            transformer = CanvasHelpers.toggleTag;\r\n        } else if (lockedTags.find((t) => t === tag)) {\r\n            // Tag added to locked tags while region(s) selected\r\n            transformer = CanvasHelpers.addIfMissing;\r\n        } else {\r\n            // Tag removed from locked tags while region(s) selected\r\n            transformer = CanvasHelpers.removeIfContained;\r\n        }\r\n        for (const selectedRegion of selectedRegions) {\r\n            selectedRegion.tags = transformer(selectedRegion.tags, tag);\r\n        }\r\n        this.updateRegions(selectedRegions);\r\n        if (this.props.onSelectedRegionsChanged) {\r\n            this.props.onSelectedRegionsChanged(selectedRegions);\r\n        }\r\n    }\r\n\r\n    public copyRegions = async () => {\r\n        await Clipboard.writeObject(this.getSelectedRegions());\r\n    }\r\n\r\n    public cutRegions = async () => {\r\n        const selectedRegions = this.getSelectedRegions();\r\n        await Clipboard.writeObject(selectedRegions);\r\n        this.deleteRegions(selectedRegions);\r\n    }\r\n\r\n    public pasteRegions = async () => {\r\n        const regionsToPaste: IRegion[] = await Clipboard.readObject();\r\n        const asset = this.state.currentAsset;\r\n        const duplicates = CanvasHelpers.duplicateRegionsAndMove(\r\n            regionsToPaste,\r\n            asset.regions,\r\n            asset.asset.size.width,\r\n            asset.asset.size.height,\r\n        );\r\n        this.addRegions(duplicates);\r\n    }\r\n\r\n    public confirmRemoveAllRegions = () => {\r\n        this.clearConfirm.current.open();\r\n    }\r\n\r\n    public getSelectedRegions = (): IRegion[] => {\r\n        const selectedRegions = this.editor.RM.getSelectedRegionsBounds().map((rb) => rb.id);\r\n        return this.state.currentAsset.regions.filter((r) => selectedRegions.find((id) => r.id === id));\r\n    }\r\n\r\n    public updateCanvasToolsRegionTags = (): void => {\r\n        for (const region of this.state.currentAsset.regions) {\r\n            this.editor.RM.updateTagsById(\r\n                region.id,\r\n                CanvasHelpers.getTagsDescriptor(this.props.project.tags, region),\r\n            );\r\n        }\r\n    }\r\n\r\n    public forceResize = (): void => {\r\n        this.onWindowResize();\r\n    }\r\n\r\n    private removeAllRegions = () => {\r\n        const ids = this.state.currentAsset.regions.map((r) => r.id);\r\n        for (const id of ids) {\r\n            this.editor.RM.deleteRegionById(id);\r\n        }\r\n        this.deleteRegionsFromAsset(this.state.currentAsset.regions);\r\n    }\r\n\r\n    private addRegions = (regions: IRegion[]) => {\r\n        this.addRegionsToCanvasTools(regions);\r\n        this.addRegionsToAsset(regions);\r\n    }\r\n\r\n    private addRegionsToAsset = (regions: IRegion[]) => {\r\n        this.updateAssetRegions(\r\n            this.state.currentAsset.regions.concat(regions),\r\n        );\r\n    }\r\n\r\n    private addRegionsToCanvasTools = (regions: IRegion[]) => {\r\n        for (const region of regions) {\r\n            const regionData = CanvasHelpers.getRegionData(region);\r\n            const scaledRegionData = this.editor.scaleRegionToFrameSize(\r\n                regionData,\r\n                this.state.currentAsset.asset.size.width,\r\n                this.state.currentAsset.asset.size.height);\r\n            this.editor.RM.addRegion(\r\n                region.id,\r\n                scaledRegionData,\r\n                CanvasHelpers.getTagsDescriptor(this.props.project.tags, region),\r\n            );\r\n        }\r\n    }\r\n\r\n    private deleteRegions = (regions: IRegion[]) => {\r\n        this.deleteRegionsFromCanvasTools(regions);\r\n        this.deleteRegionsFromAsset(regions);\r\n    }\r\n\r\n    private deleteRegionsFromAsset = (regions: IRegion[]) => {\r\n        const filteredRegions = this.state.currentAsset.regions.filter((assetRegion) => {\r\n            return !regions.find((r) => r.id === assetRegion.id);\r\n        });\r\n        this.updateAssetRegions(filteredRegions);\r\n    }\r\n\r\n    private deleteRegionsFromCanvasTools = (regions: IRegion[]) => {\r\n        for (const region of regions) {\r\n            this.editor.RM.deleteRegionById(region.id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method that gets called when a new region is drawn\r\n     * @param {RegionData} regionData the RegionData of created region\r\n     * @returns {void}\r\n     */\r\n    private onSelectionEnd = (regionData: RegionData) => {\r\n        if (CanvasHelpers.isEmpty(regionData)) {\r\n            return;\r\n        }\r\n        const id = shortid.generate();\r\n\r\n        this.editor.RM.addRegion(id, regionData, null);\r\n\r\n        this.template = new Rect(regionData.width, regionData.height);\r\n\r\n        // RegionData not serializable so need to extract data\r\n        const scaledRegionData = this.editor.scaleRegionToSourceSize(\r\n            regionData,\r\n            this.state.currentAsset.asset.size.width,\r\n            this.state.currentAsset.asset.size.height,\r\n        );\r\n        const lockedTags = this.props.lockedTags;\r\n        const newRegion = {\r\n            id,\r\n            type: this.editorModeToType(this.props.editorMode),\r\n            tags: lockedTags || [],\r\n            boundingBox: {\r\n                height: scaledRegionData.height,\r\n                width: scaledRegionData.width,\r\n                left: scaledRegionData.x,\r\n                top: scaledRegionData.y,\r\n            },\r\n            points: scaledRegionData.points,\r\n        };\r\n        if (lockedTags && lockedTags.length) {\r\n            this.editor.RM.updateTagsById(id, CanvasHelpers.getTagsDescriptor(this.props.project.tags, newRegion));\r\n        }\r\n        this.updateAssetRegions([...this.state.currentAsset.regions, newRegion]);\r\n        if (this.props.onSelectedRegionsChanged) {\r\n            this.props.onSelectedRegionsChanged([newRegion]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update regions within the current asset\r\n     * @param regions\r\n     * @param selectedRegions\r\n     */\r\n    private updateAssetRegions = (regions: IRegion[]) => {\r\n        const currentAsset: IAssetMetadata = {\r\n            ...this.state.currentAsset,\r\n            regions,\r\n        };\r\n        this.setState({\r\n            currentAsset,\r\n        }, () => {\r\n            this.props.onAssetMetadataChanged(currentAsset);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Method called when moving a region already in the editor\r\n     * @param {string} id the id of the region that was moved\r\n     * @param {RegionData} regionData the RegionData of moved region\r\n     * @returns {void}\r\n     */\r\n    private onRegionMoveEnd = (id: string, regionData: RegionData) => {\r\n        const currentRegions = this.state.currentAsset.regions;\r\n        const movedRegionIndex = currentRegions.findIndex((region) => region.id === id);\r\n        const movedRegion = currentRegions[movedRegionIndex];\r\n        const scaledRegionData = this.editor.scaleRegionToSourceSize(\r\n            regionData,\r\n            this.state.currentAsset.asset.size.width,\r\n            this.state.currentAsset.asset.size.height,\r\n        );\r\n\r\n        if (movedRegion) {\r\n            movedRegion.points = scaledRegionData.points;\r\n            movedRegion.boundingBox = {\r\n                height: scaledRegionData.height,\r\n                width: scaledRegionData.width,\r\n                left: scaledRegionData.x,\r\n                top: scaledRegionData.y,\r\n            };\r\n        }\r\n\r\n        currentRegions[movedRegionIndex] = movedRegion;\r\n        this.updateAssetRegions(currentRegions);\r\n    }\r\n\r\n    /**\r\n     * Method called when deleting a region from the editor\r\n     * @param {string} id the id of the deleted region\r\n     * @returns {void}\r\n     */\r\n    private onRegionDelete = (id: string) => {\r\n        // Remove from Canvas Tools\r\n        this.editor.RM.deleteRegionById(id);\r\n\r\n        // Remove from project\r\n        const currentRegions = this.state.currentAsset.regions;\r\n        const deletedRegionIndex = currentRegions.findIndex((region) => region.id === id);\r\n        currentRegions.splice(deletedRegionIndex, 1);\r\n\r\n        this.updateAssetRegions(currentRegions);\r\n        if (this.props.onSelectedRegionsChanged) {\r\n            this.props.onSelectedRegionsChanged([]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method called when deleting a region from the editor\r\n     * @param {string} id the id of the selected region\r\n     * @param {boolean} multiSelect boolean whether region was selected with multi selection\r\n     * @returns {void}\r\n     */\r\n    private onRegionSelected = (id: string, multiSelect: boolean) => {\r\n        const selectedRegions = this.getSelectedRegions();\r\n        if (this.props.onSelectedRegionsChanged) {\r\n            this.props.onSelectedRegionsChanged(selectedRegions);\r\n        }\r\n        // Gets the scaled region data\r\n        const selectedRegionsData = this.editor.RM.getSelectedRegionsBounds().find((region) => region.id === id);\r\n\r\n        if (selectedRegionsData) {\r\n            this.template = new Rect(selectedRegionsData.width, selectedRegionsData.height);\r\n        }\r\n\r\n        if (this.props.lockedTags && this.props.lockedTags.length) {\r\n            for (const selectedRegion of selectedRegions) {\r\n                selectedRegion.tags = CanvasHelpers.addAllIfMissing(selectedRegion.tags, this.props.lockedTags);\r\n            }\r\n            this.updateRegions(selectedRegions);\r\n        }\r\n    }\r\n\r\n    private renderChildren = () => {\r\n        return React.cloneElement(this.props.children, {\r\n            onAssetChanged: this.onAssetChanged,\r\n            onLoaded: this.onAssetLoaded,\r\n            onError: this.onAssetError,\r\n            onActivated: this.onAssetActivated,\r\n            onDeactivated: this.onAssetDeactivated,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Raised when the asset bound to the asset preview has changed\r\n     */\r\n    private onAssetChanged = () => {\r\n        this.setState({ enabled: false });\r\n    }\r\n\r\n    /**\r\n     * Raised when the underlying asset has completed loading\r\n     */\r\n    private onAssetLoaded = (contentSource: ContentSource) => {\r\n        this.setState({ contentSource });\r\n        this.positionCanvas(contentSource);\r\n    }\r\n\r\n    private onAssetError = () => {\r\n        this.setState({\r\n            enabled: false,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Raised when the asset is taking control over the rendering\r\n     */\r\n    private onAssetActivated = () => {\r\n        this.setState({ enabled: false });\r\n    }\r\n\r\n    /**\r\n     * Raise when the asset is handing off control of rendering\r\n     */\r\n    private onAssetDeactivated = (contentSource: ContentSource) => {\r\n        this.setState({\r\n            contentSource,\r\n            enabled: true,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set the loaded asset content source into the canvas tools canvas\r\n     */\r\n    private setContentSource = async (contentSource: ContentSource) => {\r\n        try {\r\n            await this.editor.addContentSource(contentSource as any);\r\n\r\n            if (this.props.onCanvasRendered) {\r\n                const canvas = this.canvasZone.current.querySelector(\"canvas\");\r\n                this.props.onCanvasRendered(canvas);\r\n            }\r\n        } catch (e) {\r\n            console.warn(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Positions the canvas tools drawing surface to be exactly over the asset content\r\n     */\r\n    private positionCanvas = (contentSource: ContentSource) => {\r\n        if (!contentSource) {\r\n            return;\r\n        }\r\n\r\n        const canvas = this.canvasZone.current;\r\n        if (canvas) {\r\n            const boundingBox = createContentBoundingBox(contentSource);\r\n            canvas.style.top = `${boundingBox.top}px`;\r\n            canvas.style.left = `${boundingBox.left}px`;\r\n            canvas.style.width = `${boundingBox.width}px`;\r\n            canvas.style.height = `${boundingBox.height}px`;\r\n            this.editor.resize(boundingBox.width, boundingBox.height);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resizes and re-renders the canvas when the application window size changes\r\n     */\r\n    private onWindowResize = async () => {\r\n        if (!this.state.contentSource) {\r\n            return;\r\n        }\r\n\r\n        this.positionCanvas(this.state.contentSource);\r\n    }\r\n\r\n    /**\r\n     * Updates regions in both Canvas Tools and the asset data store\r\n     * @param updates Regions to be updated\r\n     * @param updatedSelectedRegions Selected regions with any changes already applied\r\n     */\r\n    private updateRegions = (updates: IRegion[]) => {\r\n        const updatedRegions = CanvasHelpers.updateRegions(this.state.currentAsset.regions, updates);\r\n        for (const update of updates) {\r\n            this.editor.RM.updateTagsById(update.id, CanvasHelpers.getTagsDescriptor(this.props.project.tags, update));\r\n        }\r\n        this.updateAssetRegions(updatedRegions);\r\n        this.updateCanvasToolsRegionTags();\r\n    }\r\n\r\n    /**\r\n     * Updates the background of the canvas and draws the asset's regions\r\n     */\r\n    private clearAllRegions = () => {\r\n        this.editor.RM.deleteAllRegions();\r\n    }\r\n\r\n    private refreshCanvasToolsRegions = () => {\r\n        this.clearAllRegions();\r\n\r\n        if (!this.state.currentAsset.regions || this.state.currentAsset.regions.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Add regions to the canvas\r\n        this.state.currentAsset.regions.forEach((region: IRegion) => {\r\n            const loadedRegionData = CanvasHelpers.getRegionData(region);\r\n            this.editor.RM.addRegion(\r\n                region.id,\r\n                this.editor.scaleRegionToFrameSize(\r\n                    loadedRegionData,\r\n                    this.state.currentAsset.asset.size.width,\r\n                    this.state.currentAsset.asset.size.height,\r\n                ),\r\n                CanvasHelpers.getTagsDescriptor(this.props.project.tags, region));\r\n        });\r\n    }\r\n\r\n    private editorModeToType = (editorMode: EditorMode) => {\r\n        let type;\r\n        switch (editorMode) {\r\n            case EditorMode.CopyRect:\r\n            case EditorMode.Rectangle:\r\n                type = RegionType.Rectangle;\r\n                break;\r\n            case EditorMode.Polygon:\r\n                type = RegionType.Polygon;\r\n                break;\r\n            case EditorMode.Point:\r\n                type = RegionType.Point;\r\n                break;\r\n            case EditorMode.Polyline:\r\n                type = RegionType.Polyline;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return type;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { AutoSizer, List } from \"react-virtualized\";\r\nimport { IAsset, AssetState, ISize } from \"../../../../models/applicationState\";\r\nimport { AssetPreview } from \"../../common/assetPreview/assetPreview\";\r\nimport { strings } from \"../../../../common/strings\";\r\n\r\n/**\r\n * Properties for Editor Side Bar\r\n * @member assets - Array of assets to be previewed\r\n * @member onAssetSelected - Function to call when asset from side bar is selected\r\n * @member selectedAsset - Asset initially selected\r\n * @member thumbnailSize - The size of the asset thumbnails\r\n */\r\nexport interface IEditorSideBarProps {\r\n    assets: IAsset[];\r\n    onAssetSelected: (asset: IAsset) => void;\r\n    onBeforeAssetSelected?: () => boolean;\r\n    selectedAsset?: IAsset;\r\n    thumbnailSize?: ISize;\r\n}\r\n\r\n/**\r\n * State for Editor Side Bar\r\n * @member selectedAsset - Asset selected from side bar\r\n */\r\nexport interface IEditorSideBarState {\r\n    scrollToIndex: number;\r\n}\r\n\r\n/**\r\n * @name - Editor Side Bar\r\n * @description - Side bar for editor page\r\n */\r\nexport default class EditorSideBar extends React.Component<IEditorSideBarProps, IEditorSideBarState> {\r\n    public state: IEditorSideBarState = {\r\n        scrollToIndex: this.props.selectedAsset\r\n            ? this.props.assets.findIndex((asset) => asset.id === this.props.selectedAsset.id)\r\n            : 0,\r\n    };\r\n\r\n    private listRef: React.RefObject<List> = React.createRef();\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"editor-page-sidebar-nav\">\r\n                <AutoSizer>\r\n                    {({ height, width }) => (\r\n                        <List\r\n                            ref={this.listRef}\r\n                            className=\"asset-list\"\r\n                            height={height}\r\n                            width={width}\r\n                            rowCount={this.props.assets.length}\r\n                            rowHeight={() => this.getRowHeight(width)}\r\n                            rowRenderer={this.rowRenderer}\r\n                            overscanRowCount={2}\r\n                            scrollToIndex={this.state.scrollToIndex}\r\n                        />\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: IEditorSideBarProps) {\r\n        if (prevProps.thumbnailSize !== this.props.thumbnailSize) {\r\n            this.listRef.current.recomputeRowHeights();\r\n        }\r\n\r\n        if (!prevProps.selectedAsset && !this.props.selectedAsset) {\r\n            return;\r\n        }\r\n\r\n        if ((!prevProps.selectedAsset && this.props.selectedAsset) ||\r\n            prevProps.selectedAsset.id !== this.props.selectedAsset.id) {\r\n            this.selectAsset(this.props.selectedAsset);\r\n        }\r\n    }\r\n\r\n    private getRowHeight = (width: number) => {\r\n        return width / (4 / 3) + 16;\r\n    }\r\n\r\n    private selectAsset = (selectedAsset: IAsset): void => {\r\n        const scrollToIndex = this.props.assets.findIndex((asset) => asset.id === selectedAsset.id);\r\n\r\n        this.setState({\r\n            scrollToIndex,\r\n        }, () => {\r\n            this.listRef.current.forceUpdateGrid();\r\n        });\r\n    }\r\n\r\n    private onAssetClicked = (asset: IAsset): void => {\r\n        if (this.props.onBeforeAssetSelected) {\r\n            if (!this.props.onBeforeAssetSelected()) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.selectAsset(asset);\r\n        this.props.onAssetSelected(asset);\r\n    }\r\n\r\n    private rowRenderer = ({ key, index, style }): JSX.Element => {\r\n        const asset = this.props.assets[index];\r\n        const selectedAsset = this.props.selectedAsset;\r\n\r\n        return (\r\n            <div key={key} style={style}\r\n                className={this.getAssetCssClassNames(asset, selectedAsset)}\r\n                onClick={() => this.onAssetClicked(asset)}>\r\n                <div className=\"asset-item-image\">\r\n                    {this.renderBadges(asset)}\r\n                    <AssetPreview asset={asset} />\r\n                </div>\r\n                <div className=\"asset-item-metadata\">\r\n                    <span className=\"asset-filename\" title={asset.name}>{asset.name}</span>\r\n                    {asset.size &&\r\n                        <span>\r\n                            {asset.size.width} x {asset.size.height}\r\n                        </span>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderBadges = (asset: IAsset): JSX.Element => {\r\n        switch (asset.state) {\r\n            case AssetState.Tagged:\r\n                return (\r\n                    <span title={strings.editorPage.tagged}\r\n                        className=\"badge badge-tagged\">\r\n                        <i className=\"fas fa-tag\"></i>\r\n                    </span>\r\n                );\r\n            case AssetState.Visited:\r\n                return (\r\n                    <span title={strings.editorPage.visited}\r\n                        className=\"badge badge-visited\">\r\n                        <i className=\"fas fa-eye\"></i>\r\n                    </span>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private getAssetCssClassNames = (asset: IAsset, selectedAsset: IAsset = null): string => {\r\n        const cssClasses = [\"asset-item\"];\r\n        if (selectedAsset && selectedAsset.id === asset.id) {\r\n            cssClasses.push(\"selected\");\r\n        }\r\n\r\n        return cssClasses.join(\" \");\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { IToolbarItemRegistration } from \"../../../../providers/toolbar/toolbarItemFactory\";\r\nimport IProjectActions from \"../../../../redux/actions/projectActions\";\r\nimport { IProject } from \"../../../../models/applicationState\";\r\nimport { IToolbarItemProps, ToolbarItem, ToolbarItemType } from \"../../toolbar/toolbarItem\";\r\nimport \"./editorToolbar.scss\";\r\nimport { ToolbarItemName } from \"../../../../registerToolbar\";\r\n\r\n/**\r\n * Properties for Editor Toolbar\r\n * @member project - Current project being edited\r\n * @member actions - Actions to be performed on project\r\n * @member items - Registered Toolbar items\r\n */\r\nexport interface IEditorToolbarProps {\r\n    project: IProject;\r\n    actions: IProjectActions;\r\n    items: IToolbarItemRegistration[];\r\n    onToolbarItemSelected: (toolbarItem: ToolbarItem) => void;\r\n}\r\n\r\n/**\r\n * State of IEditorToolbar\r\n * @member selectedItem - Item selected from toolbar\r\n */\r\nexport interface IEditorToolbarState {\r\n    selectedItem: ToolbarItemName;\r\n}\r\n\r\n/**\r\n * @name - Editor Toolbar\r\n * @description - Collection of buttons that perform actions in toolbar on editor page\r\n */\r\nexport class EditorToolbar extends React.Component<IEditorToolbarProps, IEditorToolbarState> {\r\n\r\n    public state = {\r\n        selectedItem: ToolbarItemName.SelectCanvas,\r\n    };\r\n\r\n    public render() {\r\n        const groups = _(this.props.items)\r\n            .groupBy(\"config.group\")\r\n            .values()\r\n            .value();\r\n\r\n        return (\r\n            <div className=\"btn-toolbar\" role=\"toolbar\">\r\n                {groups.map((items, idx) =>\r\n                    <div key={idx} className=\"btn-group mr-2\" role=\"group\">\r\n                        {items.map((registration) => {\r\n                            const toolbarItemProps: IToolbarItemProps = {\r\n                                ...registration.config,\r\n                                actions: this.props.actions,\r\n                                project: this.props.project,\r\n                                active: this.isComponentActive(this.state.selectedItem, registration),\r\n                                onClick: this.onToolbarItemSelected,\r\n                            };\r\n                            const ToolbarItem = registration.component;\r\n\r\n                            return <ToolbarItem key={toolbarItemProps.name} {...toolbarItemProps} />;\r\n                        })}\r\n                    </div>,\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onToolbarItemSelected = (toolbarItem: ToolbarItem) => {\r\n        this.setState({\r\n            selectedItem: toolbarItem.props.name,\r\n        }, () => {\r\n            this.props.onToolbarItemSelected(toolbarItem);\r\n        });\r\n    }\r\n\r\n    private isComponentActive(selected: ToolbarItemName, componentRegistration: IToolbarItemRegistration) {\r\n        return selected\r\n            ? selected === componentRegistration.config.name &&\r\n            componentRegistration.config.type === ToolbarItemType.State\r\n            : false;\r\n    }\r\n}\r\n","import * as tfc from \"@tensorflow/tfjs-core\";\r\nimport { LocalFileSystemProxy, ILocalFileSystemProxyOptions } from \"../../providers/storage/localFileSystemProxy\";\r\n\r\nexport class ElectronProxyHandler implements tfc.io.IOHandler {\r\n    protected readonly provider: LocalFileSystemProxy;\r\n\r\n    constructor(folderPath: string, relativePath: boolean) {\r\n        const options: ILocalFileSystemProxyOptions = { folderPath, relativePath };\r\n        this.provider = new LocalFileSystemProxy(options);\r\n    }\r\n\r\n    public async load(): Promise<tfc.io.ModelArtifacts> {\r\n        const modelJSON = JSON.parse(await this.provider.readText(\"/model.json\"));\r\n\r\n        const modelArtifacts: tfc.io.ModelArtifacts = {\r\n            modelTopology: modelJSON.modelTopology,\r\n        };\r\n\r\n        if (modelJSON.weightsManifest != null) {\r\n            const [weightSpecs, weightData] =\r\n                await this.loadWeights(modelJSON.weightsManifest);\r\n            modelArtifacts.weightSpecs = weightSpecs;\r\n            modelArtifacts.weightData = weightData;\r\n        }\r\n\r\n        return modelArtifacts;\r\n    }\r\n\r\n    public async loadClasses(): Promise<JSON> {\r\n        const json = await this.provider.readText(\"/classes.json\");\r\n        return json ? JSON.parse(json) : null;\r\n    }\r\n\r\n    private async loadWeights(weightsManifest: tfc.io.WeightsManifestConfig)\r\n        : Promise<[tfc.io.WeightsManifestEntry[], ArrayBuffer]> {\r\n        const buffers: Buffer[] = [];\r\n        const weightSpecs: tfc.io.WeightsManifestEntry[] = [];\r\n\r\n        for (const group of weightsManifest) {\r\n            for (const shardName of group.paths) {\r\n                const buffer = await this.provider.readBinary(\"/\" + shardName);\r\n                buffers.push(buffer);\r\n            }\r\n            weightSpecs.push(...group.weights);\r\n        }\r\n\r\n        return [weightSpecs, this.toArrayBuffer(buffers)];\r\n    }\r\n\r\n    /**\r\n     * Convert a Buffer or an Array of Buffers to an ArrayBuffer.\r\n     *\r\n     * If the input is an Array of Buffers, they will be concatenated in the\r\n     * specified order to form the output ArrayBuffer.\r\n     */\r\n    private toArrayBuffer(buf: Buffer | Buffer[]): ArrayBuffer {\r\n        if (Array.isArray(buf)) {\r\n            // An Array of Buffers.\r\n            let totalLength = 0;\r\n            for (const buffer of buf) {\r\n                totalLength += buffer.length;\r\n            }\r\n\r\n            const ab = new ArrayBuffer(totalLength);\r\n            const view = new Uint8Array(ab);\r\n            let pos = 0;\r\n            for (const buffer of buf) {\r\n                pos += buffer.copy(view, pos);\r\n            }\r\n            return ab;\r\n        } else {\r\n            // A single Buffer. Return a copy of the underlying ArrayBuffer slice.\r\n            return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\r\n        }\r\n    }\r\n}\r\n","import axios from \"axios\";\r\nimport * as shortid from \"shortid\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport { ElectronProxyHandler } from \"./electronProxyHandler\";\r\nimport { IRegion, RegionType } from \"../../models/applicationState\";\r\nimport { strings } from \"../../common/strings\";\r\n\r\n// tslint:disable-next-line:interface-over-type-literal\r\nexport type DetectedObject = {\r\n    bbox: [number, number, number, number];  // [x, y, width, height]\r\n    class: string;\r\n    score: number;\r\n};\r\n\r\n/**\r\n * Defines supported data types supported by Tensorflow JS\r\n */\r\nexport type ImageObject = tf.Tensor3D | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement;\r\n\r\n/**\r\n * Object Dectection loads active learning models and predicts regions\r\n */\r\nexport class ObjectDetection {\r\n    private modelLoaded: boolean = false;\r\n\r\n    get loaded(): boolean {\r\n        return this.modelLoaded;\r\n    }\r\n\r\n    private model: tf.GraphModel;\r\n    private jsonClasses: JSON;\r\n\r\n    /**\r\n     * Dispose the tensors allocated by the model. You should call this when you\r\n     * are done with the model.\r\n     */\r\n    public dispose() {\r\n        if (this.model) {\r\n            this.model.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load a TensorFlow.js Object Detection model from file: or http URL.\r\n     * @param modelFolderPath file: or http URL to the model\r\n     */\r\n    public async load(modelFolderPath: string) {\r\n        try {\r\n            if (modelFolderPath.toLowerCase().startsWith(\"http://\") ||\r\n                modelFolderPath.toLowerCase().startsWith(\"https://\")) {\r\n                this.model = await tf.loadGraphModel(modelFolderPath + \"/model.json\");\r\n\r\n                const response = await axios.get(modelFolderPath + \"/classes.json\");\r\n                this.jsonClasses = JSON.parse(JSON.stringify(response.data));\r\n            } else {\r\n                const handler = new ElectronProxyHandler(modelFolderPath, false);\r\n                this.model = await tf.loadGraphModel(handler);\r\n                this.jsonClasses = await handler.loadClasses();\r\n            }\r\n\r\n            // Warmup the model.\r\n            const result = await this.model.executeAsync(tf.zeros([1, 300, 300, 3])) as tf.Tensor[];\r\n            result.forEach(async (t) => await t.data());\r\n            result.forEach(async (t) => t.dispose());\r\n            this.modelLoaded = true;\r\n        } catch (err) {\r\n            this.modelLoaded = false;\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Predict Regions from an HTMLImageElement returning list of IRegion.\r\n     * @param image ImageObject to be used for prediction\r\n     * @param predictTag Flag indicates if predict only region bounding box of tag too.\r\n     * @param xRatio Width compression ratio between the HTMLImageElement and the original image.\r\n     * @param yRatio Height compression ratio between the HTMLImageElement and the original image.\r\n     */\r\n    public async predictImage(image: ImageObject, predictTag: boolean, xRatio: number, yRatio: number)\r\n        : Promise<IRegion[]> {\r\n        const regions: IRegion[] = [];\r\n\r\n        const predictions = await this.detect(image);\r\n        predictions.forEach((prediction) => {\r\n            const left = Math.max(0, prediction.bbox[0] * xRatio);\r\n            const top = Math.max(0, prediction.bbox[1] * yRatio);\r\n            const width = Math.max(0, prediction.bbox[2] * xRatio);\r\n            const height = Math.max(0, prediction.bbox[3] * yRatio);\r\n\r\n            regions.push({\r\n                id: shortid.generate(),\r\n                type: RegionType.Rectangle,\r\n                tags: predictTag ? [prediction.class] : [],\r\n                boundingBox: {\r\n                    left,\r\n                    top,\r\n                    width,\r\n                    height,\r\n                },\r\n                points: [{\r\n                    x: left,\r\n                    y: top,\r\n                },\r\n                {\r\n                    x: left + width,\r\n                    y: top,\r\n                },\r\n                {\r\n                    x: left + width,\r\n                    y: top + height,\r\n                },\r\n                {\r\n                    x: left,\r\n                    y: top + height,\r\n                }],\r\n            });\r\n        });\r\n\r\n        return regions;\r\n    }\r\n\r\n    /**\r\n     * Detect objects for an image returning a list of bounding boxes with\r\n     * associated class and score.\r\n     *\r\n     * @param img The image to detect objects from. Can be a tensor or a DOM\r\n     *     element image, video, or canvas.\r\n     * @param maxNumBoxes The maximum number of bounding boxes of detected\r\n     * objects. There can be multiple objects of the same class, but at different\r\n     * locations. Defaults to 20.\r\n     *\r\n     */\r\n    public async detect(img: ImageObject, maxNumBoxes: number = 20): Promise<DetectedObject[]> {\r\n        if (this.model) {\r\n            return this.infer(img, maxNumBoxes);\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Infers through the model.\r\n     *\r\n     * @param img The image to classify. Can be a tensor or a DOM element image,\r\n     * video, or canvas.\r\n     * @param maxNumBoxes The maximum number of bounding boxes of detected\r\n     * objects. There can be multiple objects of the same class, but at different\r\n     * locations. Defaults to 20.\r\n     */\r\n    private async infer(img: ImageObject, maxNumBoxes: number = 20): Promise<DetectedObject[]> {\r\n        const batched = tf.tidy(() => {\r\n            if (!(img instanceof tf.Tensor)) {\r\n                img = tf.browser.fromPixels(img);\r\n            }\r\n            // Reshape to a single-element batch so we can pass it to executeAsync.\r\n            return img.expandDims(0);\r\n        });\r\n        const height = batched.shape[1];\r\n        const width = batched.shape[2];\r\n\r\n        // model returns two tensors:\r\n        // 1. box classification score with shape of [1, 1917, 90]\r\n        // 2. box location with shape of [1, 1917, 1, 4]\r\n        // where 1917 is the number of box detectors, 90 is the number of classes.\r\n        // and 4 is the four coordinates of the box.\r\n        const result = await this.model.executeAsync(batched) as tf.Tensor[];\r\n\r\n        const scores = result[0].dataSync() as Float32Array;\r\n        const boxes = result[1].dataSync() as Float32Array;\r\n\r\n        // clean the webgl tensors\r\n        batched.dispose();\r\n        tf.dispose(result);\r\n\r\n        const [maxScores, classes] = this.calculateMaxScores(scores, result[0].shape[1], result[0].shape[2]);\r\n\r\n        const prevBackend = tf.getBackend();\r\n        // run post process in cpu\r\n        tf.setBackend(\"cpu\");\r\n        const indexTensor = tf.tidy(() => {\r\n            const boxes2 = tf.tensor2d(boxes, [result[1].shape[1], result[1].shape[3]]);\r\n            return tf.image.nonMaxSuppression(boxes2, maxScores, maxNumBoxes, 0.5, 0.5);\r\n        });\r\n\r\n        const indexes = indexTensor.dataSync() as Float32Array;\r\n        indexTensor.dispose();\r\n\r\n        // restore previous backend\r\n        tf.setBackend(prevBackend);\r\n\r\n        return this.buildDetectedObjects(width, height, boxes, maxScores, indexes, classes);\r\n    }\r\n\r\n    private buildDetectedObjects(\r\n        width: number, height: number, boxes: Float32Array, scores: number[],\r\n        indexes: Float32Array, classes: number[]): DetectedObject[] {\r\n        const count = indexes.length;\r\n        const objects: DetectedObject[] = [];\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const bbox = [];\r\n            for (let j = 0; j < 4; j++) {\r\n                bbox[j] = boxes[indexes[i] * 4 + j];\r\n            }\r\n            const minY = bbox[0] * height;\r\n            const minX = bbox[1] * width;\r\n            const maxY = bbox[2] * height;\r\n            const maxX = bbox[3] * width;\r\n            bbox[0] = minX;\r\n            bbox[1] = minY;\r\n            bbox[2] = maxX - minX;\r\n            bbox[3] = maxY - minY;\r\n            objects.push({\r\n                bbox: bbox as [number, number, number, number],\r\n                class: this.getClass(i, indexes, classes),\r\n                score: scores[indexes[i]],\r\n            });\r\n        }\r\n\r\n        return objects;\r\n    }\r\n\r\n    private getClass(index: number, indexes: Float32Array, classes: number[]): string {\r\n        if (this.jsonClasses && index < indexes.length && indexes[index] < classes.length) {\r\n            const classId = classes[indexes[index]] - 1;\r\n            const classObject = this.jsonClasses[classId];\r\n\r\n            return classObject ? classObject.displayName : strings.tags.warnings.unknownTagName;\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    private calculateMaxScores(\r\n        scores: Float32Array, numBoxes: number,\r\n        numClasses: number): [number[], number[]] {\r\n        const maxes = [];\r\n        const classes = [];\r\n        for (let i = 0; i < numBoxes; i++) {\r\n            let max = Number.MIN_VALUE;\r\n            let index = -1;\r\n            for (let j = 0; j < numClasses; j++) {\r\n                if (scores[i * numClasses + j] > max) {\r\n                    max = scores[i * numClasses + j];\r\n                    index = j;\r\n                }\r\n            }\r\n            maxes[i] = max;\r\n            classes[i] = index;\r\n        }\r\n        return [maxes, classes];\r\n    }\r\n}\r\n","import { IAssetMetadata, ModelPathType, IActiveLearningSettings, AssetState } from \"../models/applicationState\";\r\nimport { ObjectDetection } from \"../providers/activeLearning/objectDetection\";\r\nimport Guard from \"../common/guard\";\r\nimport { isElectron } from \"../common/hostProcess\";\r\nimport { Env } from \"../common/environment\";\r\n\r\nexport class ActiveLearningService {\r\n    private objectDetection: ObjectDetection;\r\n    private modelLoaded: boolean = false;\r\n\r\n    constructor(private settings: IActiveLearningSettings) {\r\n        Guard.null(settings);\r\n        this.objectDetection = new ObjectDetection();\r\n    }\r\n\r\n    public isModelLoaded() {\r\n        return this.modelLoaded;\r\n    }\r\n\r\n    public async predictRegions(canvas: HTMLCanvasElement, assetMetadata: IAssetMetadata): Promise<IAssetMetadata> {\r\n        Guard.null(canvas);\r\n        Guard.null(assetMetadata);\r\n\r\n        // If the canvas or asset are invalid return asset metadata\r\n        if (!(canvas.width && canvas.height && assetMetadata.asset && assetMetadata.asset.size)) {\r\n            return assetMetadata;\r\n        }\r\n\r\n        await this.ensureModelLoaded();\r\n\r\n        const xRatio = assetMetadata.asset.size.width / canvas.width;\r\n        const yRatio = assetMetadata.asset.size.height / canvas.height;\r\n        const predictedRegions = await this.objectDetection.predictImage(\r\n            canvas,\r\n            this.settings.predictTag,\r\n            xRatio,\r\n            yRatio,\r\n        );\r\n\r\n        const updatedRegions = [...assetMetadata.regions];\r\n        predictedRegions.forEach((prediction) => {\r\n            const matchingRegion = updatedRegions.find((region) => {\r\n                return region.boundingBox\r\n                    && region.boundingBox.left === prediction.boundingBox.left\r\n                    && region.boundingBox.top === prediction.boundingBox.top\r\n                    && region.boundingBox.width === prediction.boundingBox.width\r\n                    && region.boundingBox.height === prediction.boundingBox.height;\r\n            });\r\n\r\n            if (updatedRegions.length === 0 || !matchingRegion) {\r\n                updatedRegions.push(prediction);\r\n            }\r\n        });\r\n\r\n        return {\r\n            ...assetMetadata,\r\n            regions: updatedRegions,\r\n            asset: {\r\n                ...assetMetadata.asset,\r\n                state: updatedRegions.length > 0 ? AssetState.Tagged : AssetState.Visited,\r\n                predicted: true,\r\n            },\r\n        } as IAssetMetadata;\r\n    }\r\n\r\n    public async ensureModelLoaded(): Promise<void> {\r\n        if (this.modelLoaded) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        await this.loadModel();\r\n        this.modelLoaded = true;\r\n    }\r\n\r\n    private async loadModel() {\r\n        let modelPath = \"\";\r\n        if (this.settings.modelPathType === ModelPathType.Coco) {\r\n            if (isElectron()) {\r\n                const appPath = this.getAppPath();\r\n\r\n                if (Env.get() !== \"production\") {\r\n                    modelPath = appPath + \"/cocoSSDModel\";\r\n                } else {\r\n                    modelPath = appPath + \"/../../cocoSSDModel\";\r\n                }\r\n            } else {\r\n                modelPath = \"https://vott.blob.core.windows.net/coco-ssd-model\";\r\n            }\r\n        } else if (this.settings.modelPathType === ModelPathType.File) {\r\n            if (isElectron()) {\r\n                modelPath = this.settings.modelPath;\r\n            }\r\n        } else {\r\n            modelPath = this.settings.modelUrl;\r\n        }\r\n\r\n        await this.objectDetection.load(modelPath);\r\n    }\r\n\r\n    private getAppPath = () => {\r\n        const remote = (window as any).require(\"electron\").remote as Electron.Remote;\r\n        return remote.app.getAppPath();\r\n    }\r\n}\r\n","import React, { SyntheticEvent } from \"react\";\r\nimport axios, { AxiosRequestConfig } from \"axios\";\r\nimport { FieldProps } from \"react-jsonschema-form\";\r\nimport { interpolate } from \"../../../../common/strings\";\r\n\r\ninterface IKeyValuePair {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\n/**\r\n * Options for External Picker\r\n * @member method - HTTP method\r\n * @member url - URL for request\r\n * @member keySelector - Key attribute from HTTP response\r\n * @member valueSelector - Value attribute from HTTP response\r\n * @member authHeaderName - Authorization header name\r\n * @member authHeaderValue - Authorization header value\r\n */\r\nexport interface IExternalPickerUiOptions {\r\n    method: string;\r\n    url: string;\r\n    keySelector: string;\r\n    valueSelector: string;\r\n    authHeaderName?: string;\r\n    authHeaderValue?: string;\r\n    filter?: IExternalPickerFilter;\r\n}\r\n\r\nexport interface IExternalPickerFilter {\r\n    left: string;\r\n    right: string;\r\n    operator: FilterOperator;\r\n}\r\n\r\nexport enum FilterOperator {\r\n    Equals = \"eq\",\r\n    GreaterThan = \"gt\",\r\n    LessThan = \"lt\",\r\n}\r\n\r\n/**\r\n * Properties for External Picker\r\n * @member options - External Picker UI options\r\n */\r\nexport interface IExternalPickerProps extends FieldProps {\r\n    options: IExternalPickerUiOptions;\r\n}\r\n\r\n/**\r\n * State for External Picker\r\n * @member items - Items loaded from external source as options\r\n */\r\nexport interface IExternalPickerState {\r\n    items: IKeyValuePair[];\r\n}\r\n\r\n/**\r\n * Dropdown that provides options from an external HTTP source\r\n */\r\nexport default class ExternalPicker extends React.Component<IExternalPickerProps, any> {\r\n    public state: IExternalPickerState = {\r\n        items: [],\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <select id={this.props.id}\r\n                className=\"form-control\"\r\n                value={this.props.value}\r\n                onChange={this.onChange}>\r\n                <option value=\"\">Select {this.props.schema.title}</option>\r\n                {this.state.items.map((item) => <option key={item.key} value={item.key}>{item.value}</option>)}\r\n            </select>\r\n        );\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        await this.bindExternalData();\r\n    }\r\n\r\n    public async componentDidUpdate(prevProps: FieldProps) {\r\n        if (prevProps.formContext !== this.props.formContext) {\r\n            await this.bindExternalData();\r\n        }\r\n    }\r\n\r\n    private onChange = (e: SyntheticEvent) => {\r\n        const target = e.target as HTMLSelectElement;\r\n        this.props.onChange(target.value === \"\" ? undefined : target.value);\r\n    }\r\n\r\n    private bindExternalData = async (): Promise<void> => {\r\n        const uiOptions = this.props.options;\r\n        const customHeaders: any = {};\r\n        const authHeaderValue = interpolate(uiOptions.authHeaderValue, {\r\n            props: this.props,\r\n        });\r\n\r\n        if (!authHeaderValue || authHeaderValue === \"undefined\") {\r\n            return;\r\n        }\r\n\r\n        customHeaders[uiOptions.authHeaderName] = authHeaderValue;\r\n\r\n        const config: AxiosRequestConfig = {\r\n            method: uiOptions.method,\r\n            url: interpolate(uiOptions.url, { props: this.props }),\r\n            headers: customHeaders,\r\n        };\r\n\r\n        try {\r\n            const response = await axios.request(config);\r\n\r\n            let rawItems: any[] = response.data;\r\n\r\n            // Optionally filter results if a filter has been defined\r\n            if (uiOptions.filter) {\r\n                rawItems = rawItems.filter((item) => this.filterPredicate(item, uiOptions.filter));\r\n            }\r\n\r\n            const items: IKeyValuePair[] = rawItems.map((item) => {\r\n                return {\r\n                    key: interpolate(uiOptions.keySelector, { item }),\r\n                    value: interpolate(uiOptions.valueSelector, { item }),\r\n                };\r\n            });\r\n\r\n            this.setState({ items });\r\n        } catch (e) {\r\n            this.setState({ items: [] });\r\n            this.props.onChange(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines if the specified item will return as part of the filter\r\n     * @param item The item to evaluate\r\n     * @param filter The filter expression to evaluate against\r\n     */\r\n    private filterPredicate(item: any, filter: IExternalPickerFilter): boolean {\r\n        const left = interpolate(filter.left, { item, props: this.props });\r\n        const right = interpolate(filter.right, { item, props: this.props });\r\n\r\n        switch (filter.operator) {\r\n            case FilterOperator.Equals:\r\n                return left === right;\r\n            case FilterOperator.GreaterThan:\r\n                return left > right;\r\n            case FilterOperator.LessThan:\r\n                return left < right;\r\n            default:\r\n                throw new Error(\"Invalid filter operator\");\r\n        }\r\n    }\r\n}\r\n","import _ from \"lodash\";\r\nimport React, { RefObject } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport SplitPane from \"react-split-pane\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { SelectionMode } from \"vott-ct/lib/js/CanvasTools/Interface/ISelectorSettings\";\r\nimport HtmlFileReader from \"../../../../common/htmlFileReader\";\r\nimport { strings } from \"../../../../common/strings\";\r\nimport {\r\n    AssetState, AssetType, EditorMode, IApplicationState,\r\n    IAppSettings, IAsset, IAssetMetadata, IProject, IRegion,\r\n    ISize, ITag, IAdditionalPageSettings, AppError, ErrorCode,\r\n} from \"../../../../models/applicationState\";\r\nimport { IToolbarItemRegistration, ToolbarItemFactory } from \"../../../../providers/toolbar/toolbarItemFactory\";\r\nimport IApplicationActions, * as applicationActions from \"../../../../redux/actions/applicationActions\";\r\nimport IProjectActions, * as projectActions from \"../../../../redux/actions/projectActions\";\r\nimport { ToolbarItemName } from \"../../../../registerToolbar\";\r\nimport { AssetService } from \"../../../../services/assetService\";\r\nimport { AssetPreview } from \"../../common/assetPreview/assetPreview\";\r\nimport { KeyboardBinding } from \"../../common/keyboardBinding/keyboardBinding\";\r\nimport { KeyEventType } from \"../../common/keyboardManager/keyboardManager\";\r\nimport { TagInput } from \"../../common/tagInput/tagInput\";\r\nimport { ToolbarItem } from \"../../toolbar/toolbarItem\";\r\nimport Canvas from \"./canvas\";\r\nimport CanvasHelpers from \"./canvasHelpers\";\r\nimport \"./editorPage.scss\";\r\nimport EditorSideBar from \"./editorSideBar\";\r\nimport { EditorToolbar } from \"./editorToolbar\";\r\nimport Alert from \"../../common/alert/alert\";\r\nimport Confirm from \"../../common/confirm/confirm\";\r\nimport { ActiveLearningService } from \"../../../../services/activeLearningService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n/**\r\n * Properties for Editor Page\r\n * @member project - Project being edited\r\n * @member recentProjects - Array of projects recently viewed/edited\r\n * @member actions - Project actions\r\n * @member applicationActions - Application setting actions\r\n */\r\nexport interface IEditorPageProps extends RouteComponentProps, React.Props<EditorPage> {\r\n    project: IProject;\r\n    recentProjects: IProject[];\r\n    appSettings: IAppSettings;\r\n    actions: IProjectActions;\r\n    applicationActions: IApplicationActions;\r\n}\r\n\r\n/**\r\n * State for Editor Page\r\n */\r\nexport interface IEditorPageState {\r\n    /** Array of assets in project */\r\n    assets: IAsset[];\r\n    /** The editor mode to set for canvas tools */\r\n    editorMode: EditorMode;\r\n    /** The selection mode to set for canvas tools */\r\n    selectionMode: SelectionMode;\r\n    /** The selected asset for the primary editing experience */\r\n    selectedAsset?: IAssetMetadata;\r\n    /** Currently selected region on current asset */\r\n    selectedRegions?: IRegion[];\r\n    /** The child assets used for nest asset typs */\r\n    childAssets?: IAsset[];\r\n    /** Additional settings for asset previews */\r\n    additionalSettings?: IAdditionalPageSettings;\r\n    /** Most recently selected tag */\r\n    selectedTag: string;\r\n    /** Tags locked for region labeling */\r\n    lockedTags: string[];\r\n    /** Size of the asset thumbnails to display in the side bar */\r\n    thumbnailSize: ISize;\r\n    /**\r\n     * Whether or not the editor is in a valid state\r\n     * State is invalid when a region has not been tagged\r\n     */\r\n    isValid: boolean;\r\n    /** Whether the show invalid region warning alert should display */\r\n    showInvalidRegionWarning: boolean;\r\n}\r\n\r\nfunction mapStateToProps(state: IApplicationState) {\r\n    return {\r\n        recentProjects: state.recentProjects,\r\n        project: state.currentProject,\r\n        appSettings: state.appSettings,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators(projectActions, dispatch),\r\n        applicationActions: bindActionCreators(applicationActions, dispatch),\r\n    };\r\n}\r\n\r\n/**\r\n * @name - Editor Page\r\n * @description - Page for adding/editing/removing tags to assets\r\n */\r\n@connect(mapStateToProps, mapDispatchToProps)\r\nexport default class EditorPage extends React.Component<IEditorPageProps, IEditorPageState> {\r\n    public state: IEditorPageState = {\r\n        selectedTag: null,\r\n        lockedTags: [],\r\n        selectionMode: SelectionMode.RECT,\r\n        assets: [],\r\n        childAssets: [],\r\n        editorMode: EditorMode.Rectangle,\r\n        additionalSettings: {\r\n            videoSettings: (this.props.project) ? this.props.project.videoSettings : null,\r\n            activeLearningSettings: (this.props.project) ? this.props.project.activeLearningSettings : null,\r\n        },\r\n        thumbnailSize: this.props.appSettings.thumbnailSize || { width: 175, height: 155 },\r\n        isValid: true,\r\n        showInvalidRegionWarning: false,\r\n    };\r\n\r\n    private activeLearningService: ActiveLearningService = null;\r\n    private loadingProjectAssets: boolean = false;\r\n    private toolbarItems: IToolbarItemRegistration[] = ToolbarItemFactory.getToolbarItems();\r\n    private canvas: RefObject<Canvas> = React.createRef();\r\n    private renameTagConfirm: React.RefObject<Confirm> = React.createRef();\r\n    private deleteTagConfirm: React.RefObject<Confirm> = React.createRef();\r\n\r\n    public async componentDidMount() {\r\n        const projectId = this.props.match.params[\"projectId\"];\r\n        if (this.props.project) {\r\n            await this.loadProjectAssets();\r\n        } else if (projectId) {\r\n            const project = this.props.recentProjects.find((project) => project.id === projectId);\r\n            await this.props.actions.loadProject(project);\r\n        }\r\n\r\n        this.activeLearningService = new ActiveLearningService(this.props.project.activeLearningSettings);\r\n    }\r\n\r\n    public async componentDidUpdate(prevProps: Readonly<IEditorPageProps>) {\r\n        if (this.props.project && this.state.assets.length === 0) {\r\n            await this.loadProjectAssets();\r\n        }\r\n\r\n        // Navigating directly to the page via URL (ie, http://vott/projects/a1b2c3dEf/edit) sets the default state\r\n        // before props has been set, this updates the project and additional settings to be valid once props are\r\n        // retrieved.\r\n        if (this.props.project && !prevProps.project) {\r\n            this.setState({\r\n                additionalSettings: {\r\n                    videoSettings: (this.props.project) ? this.props.project.videoSettings : null,\r\n                    activeLearningSettings: (this.props.project) ? this.props.project.activeLearningSettings : null,\r\n                },\r\n            });\r\n        }\r\n\r\n        if (this.props.project && prevProps.project && this.props.project.tags !== prevProps.project.tags) {\r\n            this.updateRootAssets();\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const { project } = this.props;\r\n        const { assets, selectedAsset } = this.state;\r\n        const rootAssets = assets.filter((asset) => !asset.parent);\r\n\r\n        if (!project) {\r\n            return (<div>Loading...</div>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"editor-page\">\r\n                {[...Array(10).keys()].map((index) => {\r\n                    return (<KeyboardBinding\r\n                        displayName={strings.editorPage.tags.hotKey.apply}\r\n                        key={index}\r\n                        keyEventType={KeyEventType.KeyDown}\r\n                        accelerators={[`${index}`]}\r\n                        icon={\"fa-tag\"}\r\n                        handler={this.handleTagHotKey} />);\r\n                })}\r\n                {[...Array(10).keys()].map((index) => {\r\n                    return (<KeyboardBinding\r\n                        displayName={strings.editorPage.tags.hotKey.lock}\r\n                        key={index}\r\n                        keyEventType={KeyEventType.KeyDown}\r\n                        accelerators={[`CmdOrCtrl+${index}`]}\r\n                        icon={\"fa-lock\"}\r\n                        handler={this.handleCtrlTagHotKey} />);\r\n                })}\r\n                <SplitPane split=\"vertical\"\r\n                    defaultSize={this.state.thumbnailSize.width}\r\n                    minSize={100}\r\n                    maxSize={400}\r\n                    paneStyle={{ display: \"flex\" }}\r\n                    onChange={this.onSideBarResize}\r\n                    onDragFinished={this.onSideBarResizeComplete}>\r\n                    <div className=\"editor-page-sidebar bg-lighter-1\">\r\n                        <EditorSideBar\r\n                            assets={rootAssets}\r\n                            selectedAsset={selectedAsset ? selectedAsset.asset : null}\r\n                            onBeforeAssetSelected={this.onBeforeAssetSelected}\r\n                            onAssetSelected={this.selectAsset}\r\n                            thumbnailSize={this.state.thumbnailSize}\r\n                        />\r\n                    </div>\r\n                    <div className=\"editor-page-content\" onClick={this.onPageClick}>\r\n                        <div className=\"editor-page-content-main\">\r\n                            <div className=\"editor-page-content-main-header\">\r\n                                <EditorToolbar project={this.props.project}\r\n                                    items={this.toolbarItems}\r\n                                    actions={this.props.actions}\r\n                                    onToolbarItemSelected={this.onToolbarItemSelected} />\r\n                            </div>\r\n                            <div className=\"editor-page-content-main-body\">\r\n                                {selectedAsset &&\r\n                                    <Canvas\r\n                                        ref={this.canvas}\r\n                                        selectedAsset={this.state.selectedAsset}\r\n                                        onAssetMetadataChanged={this.onAssetMetadataChanged}\r\n                                        onCanvasRendered={this.onCanvasRendered}\r\n                                        onSelectedRegionsChanged={this.onSelectedRegionsChanged}\r\n                                        editorMode={this.state.editorMode}\r\n                                        selectionMode={this.state.selectionMode}\r\n                                        project={this.props.project}\r\n                                        lockedTags={this.state.lockedTags}>\r\n                                        <AssetPreview\r\n                                            additionalSettings={this.state.additionalSettings}\r\n                                            autoPlay={true}\r\n                                            controlsEnabled={this.state.isValid}\r\n                                            onBeforeAssetChanged={this.onBeforeAssetSelected}\r\n                                            onChildAssetSelected={this.onChildAssetSelected}\r\n                                            asset={this.state.selectedAsset.asset}\r\n                                            childAssets={this.state.childAssets} />\r\n                                    </Canvas>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"editor-page-right-sidebar\">\r\n                            <TagInput\r\n                                tags={this.props.project.tags}\r\n                                lockedTags={this.state.lockedTags}\r\n                                selectedRegions={this.state.selectedRegions}\r\n                                onChange={this.onTagsChanged}\r\n                                onLockedTagsChange={this.onLockedTagsChanged}\r\n                                onTagClick={this.onTagClicked}\r\n                                onCtrlTagClick={this.onCtrlTagClicked}\r\n                                onTagRenamed={this.confirmTagRenamed}\r\n                                onTagDeleted={this.confirmTagDeleted}\r\n                            />\r\n                        </div>\r\n                        <Confirm title={strings.editorPage.tags.rename.title}\r\n                            ref={this.renameTagConfirm}\r\n                            message={strings.editorPage.tags.rename.confirmation}\r\n                            confirmButtonColor=\"danger\"\r\n                            onConfirm={this.onTagRenamed} />\r\n                        <Confirm title={strings.editorPage.tags.delete.title}\r\n                            ref={this.deleteTagConfirm}\r\n                            message={strings.editorPage.tags.delete.confirmation}\r\n                            confirmButtonColor=\"danger\"\r\n                            onConfirm={this.onTagDeleted} />\r\n                    </div>\r\n                </SplitPane>\r\n                <Alert show={this.state.showInvalidRegionWarning}\r\n                    title={strings.editorPage.messages.enforceTaggedRegions.title}\r\n                    // tslint:disable-next-line:max-line-length\r\n                    message={strings.editorPage.messages.enforceTaggedRegions.description}\r\n                    closeButtonColor=\"info\"\r\n                    onClose={() => this.setState({ showInvalidRegionWarning: false })} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onPageClick = () => {\r\n        this.setState({\r\n            selectedRegions: [],\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called when the asset side bar is resized\r\n     * @param newWidth The new sidebar width\r\n     */\r\n    private onSideBarResize = (newWidth: number) => {\r\n        this.setState({\r\n            thumbnailSize: {\r\n                width: newWidth,\r\n                height: newWidth / (4 / 3),\r\n            },\r\n        }, () => this.canvas.current.forceResize());\r\n    }\r\n\r\n    /**\r\n     * Called when the asset sidebar has been completed\r\n     */\r\n    private onSideBarResizeComplete = () => {\r\n        const appSettings = {\r\n            ...this.props.appSettings,\r\n            thumbnailSize: this.state.thumbnailSize,\r\n        };\r\n\r\n        this.props.applicationActions.saveAppSettings(appSettings);\r\n    }\r\n\r\n    /**\r\n     * Called when a tag from footer is clicked\r\n     * @param tag Tag clicked\r\n     */\r\n    private onTagClicked = (tag: ITag): void => {\r\n        this.setState({\r\n            selectedTag: tag.name,\r\n            lockedTags: [],\r\n        }, () => this.canvas.current.applyTag(tag.name));\r\n    }\r\n\r\n    /**\r\n     * Open confirm dialog for tag renaming\r\n     */\r\n    private confirmTagRenamed = (tagName: string, newTagName: string): void => {\r\n        this.renameTagConfirm.current.open(tagName, newTagName);\r\n    }\r\n\r\n    /**\r\n     * Renames tag in assets and project, and saves files\r\n     * @param tagName Name of tag to be renamed\r\n     * @param newTagName New name of tag\r\n     */\r\n    private onTagRenamed = async (tagName: string, newTagName: string): Promise<void> => {\r\n        const assetUpdates = await this.props.actions.updateProjectTag(this.props.project, tagName, newTagName);\r\n        const selectedAsset = assetUpdates.find((am) => am.asset.id === this.state.selectedAsset.asset.id);\r\n\r\n        if (selectedAsset) {\r\n            if (selectedAsset) {\r\n                this.setState({ selectedAsset });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Open Confirm dialog for tag deletion\r\n     */\r\n    private confirmTagDeleted = (tagName: string): void => {\r\n        this.deleteTagConfirm.current.open(tagName);\r\n    }\r\n\r\n    /**\r\n     * Removes tag from assets and projects and saves files\r\n     * @param tagName Name of tag to be deleted\r\n     */\r\n    private onTagDeleted = async (tagName: string): Promise<void> => {\r\n        const assetUpdates = await this.props.actions.deleteProjectTag(this.props.project, tagName);\r\n        const selectedAsset = assetUpdates.find((am) => am.asset.id === this.state.selectedAsset.asset.id);\r\n\r\n        if (selectedAsset) {\r\n            this.setState({ selectedAsset });\r\n        }\r\n    }\r\n\r\n    private onCtrlTagClicked = (tag: ITag): void => {\r\n        const locked = this.state.lockedTags;\r\n        this.setState({\r\n            selectedTag: tag.name,\r\n            lockedTags: CanvasHelpers.toggleTag(locked, tag.name),\r\n        }, () => this.canvas.current.applyTag(tag.name));\r\n    }\r\n\r\n    private getTagFromKeyboardEvent = (event: KeyboardEvent): ITag => {\r\n        let key = parseInt(event.key, 10);\r\n        if (isNaN(key)) {\r\n            try {\r\n                key = parseInt(event.key.split(\"+\")[1], 10);\r\n            } catch (e) {\r\n                return;\r\n            }\r\n        }\r\n        let index: number;\r\n        const tags = this.props.project.tags;\r\n        if (key === 0 && tags.length >= 10) {\r\n            index = 9;\r\n        } else if (key < 10) {\r\n            index = key - 1;\r\n        }\r\n        if (index < tags.length) {\r\n            return tags[index];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Listens for {number key} and calls `onTagClicked` with tag corresponding to that number\r\n     * @param event KeyDown event\r\n     */\r\n    private handleTagHotKey = (event: KeyboardEvent): void => {\r\n        const tag = this.getTagFromKeyboardEvent(event);\r\n        if (tag) {\r\n            this.onTagClicked(tag);\r\n        }\r\n    }\r\n\r\n    private handleCtrlTagHotKey = (event: KeyboardEvent): void => {\r\n        const tag = this.getTagFromKeyboardEvent(event);\r\n        if (tag) {\r\n            this.onCtrlTagClicked(tag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Raised when a child asset is selected on the Asset Preview\r\n     * ex) When a video is paused/seeked to on a video\r\n     */\r\n    private onChildAssetSelected = async (childAsset: IAsset) => {\r\n        if (this.state.selectedAsset && this.state.selectedAsset.asset.id !== childAsset.id) {\r\n            await this.selectAsset(childAsset);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a value indicating whether the current asset is taggable\r\n     */\r\n    private isTaggableAssetType = (asset: IAsset): boolean => {\r\n        return asset.type !== AssetType.Unknown && asset.type !== AssetType.Video;\r\n    }\r\n\r\n    /**\r\n     * Raised when the selected asset has been changed.\r\n     * This can either be a parent or child asset\r\n     */\r\n    private onAssetMetadataChanged = async (assetMetadata: IAssetMetadata): Promise<void> => {\r\n        // If the asset contains any regions without tags, don't proceed.\r\n        const regionsWithoutTags = assetMetadata.regions.filter((region) => region.tags.length === 0);\r\n\r\n        if (regionsWithoutTags.length > 0) {\r\n            this.setState({ isValid: false });\r\n            return;\r\n        }\r\n\r\n        const initialState = assetMetadata.asset.state;\r\n\r\n        // The root asset can either be the actual asset being edited (ex: VideoFrame) or the top level / root\r\n        // asset selected from the side bar (image/video).\r\n        const rootAsset = { ...(assetMetadata.asset.parent || assetMetadata.asset) };\r\n\r\n        if (this.isTaggableAssetType(assetMetadata.asset)) {\r\n            assetMetadata.asset.state = assetMetadata.regions.length > 0 ? AssetState.Tagged : AssetState.Visited;\r\n        } else if (assetMetadata.asset.state === AssetState.NotVisited) {\r\n            assetMetadata.asset.state = AssetState.Visited;\r\n        }\r\n\r\n        // Update root asset if not already in the \"Tagged\" state\r\n        // This is primarily used in the case where a Video Frame is being edited.\r\n        // We want to ensure that in this case the root video asset state is accurately\r\n        // updated to match that state of the asset.\r\n        if (rootAsset.id === assetMetadata.asset.id) {\r\n            rootAsset.state = assetMetadata.asset.state;\r\n        } else {\r\n            const rootAssetMetadata = await this.props.actions.loadAssetMetadata(this.props.project, rootAsset);\r\n\r\n            if (rootAssetMetadata.asset.state !== AssetState.Tagged) {\r\n                rootAssetMetadata.asset.state = assetMetadata.asset.state;\r\n                await this.props.actions.saveAssetMetadata(this.props.project, rootAssetMetadata);\r\n            }\r\n\r\n            rootAsset.state = rootAssetMetadata.asset.state;\r\n        }\r\n\r\n        // Only update asset metadata if state changes or is different\r\n        if (initialState !== assetMetadata.asset.state || this.state.selectedAsset !== assetMetadata) {\r\n            await this.props.actions.saveAssetMetadata(this.props.project, assetMetadata);\r\n        }\r\n\r\n        await this.props.actions.saveProject(this.props.project);\r\n\r\n        const assetService = new AssetService(this.props.project);\r\n        const childAssets = assetService.getChildAssets(rootAsset);\r\n\r\n        // Find and update the root asset in the internal state\r\n        // This forces the root assets that are displayed in the sidebar to\r\n        // accurately show their correct state (not-visited, visited or tagged)\r\n        const assets = [...this.state.assets];\r\n        const assetIndex = assets.findIndex((asset) => asset.id === rootAsset.id);\r\n        if (assetIndex > -1) {\r\n            assets[assetIndex] = {\r\n                ...rootAsset,\r\n            };\r\n        }\r\n\r\n        this.setState({ childAssets, assets, isValid: true });\r\n    }\r\n\r\n    /**\r\n     * Raised when the asset binary has been painted onto the canvas tools rendering canvas\r\n     */\r\n    private onCanvasRendered = async (canvas: HTMLCanvasElement) => {\r\n        // When active learning auto-detect is enabled\r\n        // run predictions when asset changes\r\n        if (this.props.project.activeLearningSettings.autoDetect && !this.state.selectedAsset.asset.predicted) {\r\n            await this.predictRegions(canvas);\r\n        }\r\n    }\r\n\r\n    private onSelectedRegionsChanged = (selectedRegions: IRegion[]) => {\r\n        this.setState({ selectedRegions });\r\n    }\r\n\r\n    private onTagsChanged = async (tags) => {\r\n        const project = {\r\n            ...this.props.project,\r\n            tags,\r\n        };\r\n\r\n        await this.props.actions.saveProject(project);\r\n    }\r\n\r\n    private onLockedTagsChanged = (lockedTags: string[]) => {\r\n        this.setState({ lockedTags });\r\n    }\r\n\r\n    private onToolbarItemSelected = async (toolbarItem: ToolbarItem): Promise<void> => {\r\n        switch (toolbarItem.props.name) {\r\n            case ToolbarItemName.DrawRectangle:\r\n                this.setState({\r\n                    selectionMode: SelectionMode.RECT,\r\n                    editorMode: EditorMode.Rectangle,\r\n                });\r\n                break;\r\n            case ToolbarItemName.DrawPolygon:\r\n                this.setState({\r\n                    selectionMode: SelectionMode.POLYGON,\r\n                    editorMode: EditorMode.Polygon,\r\n                });\r\n                break;\r\n            case ToolbarItemName.CopyRectangle:\r\n                this.setState({\r\n                    selectionMode: SelectionMode.COPYRECT,\r\n                    editorMode: EditorMode.CopyRect,\r\n                });\r\n                break;\r\n            case ToolbarItemName.SelectCanvas:\r\n                this.setState({\r\n                    selectionMode: SelectionMode.NONE,\r\n                    editorMode: EditorMode.Select,\r\n                });\r\n                break;\r\n            case ToolbarItemName.PreviousAsset:\r\n                await this.goToRootAsset(-1);\r\n                break;\r\n            case ToolbarItemName.NextAsset:\r\n                await this.goToRootAsset(1);\r\n                break;\r\n            case ToolbarItemName.CopyRegions:\r\n                this.canvas.current.copyRegions();\r\n                break;\r\n            case ToolbarItemName.CutRegions:\r\n                this.canvas.current.cutRegions();\r\n                break;\r\n            case ToolbarItemName.PasteRegions:\r\n                this.canvas.current.pasteRegions();\r\n                break;\r\n            case ToolbarItemName.RemoveAllRegions:\r\n                this.canvas.current.confirmRemoveAllRegions();\r\n                break;\r\n            case ToolbarItemName.ActiveLearning:\r\n                await this.predictRegions();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private predictRegions = async (canvas?: HTMLCanvasElement) => {\r\n        canvas = canvas || document.querySelector(\"canvas\");\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n\r\n        // Load the configured ML model\r\n        if (!this.activeLearningService.isModelLoaded()) {\r\n            let toastId: number = null;\r\n            try {\r\n                toastId = toast.info(strings.activeLearning.messages.loadingModel, { autoClose: false });\r\n                await this.activeLearningService.ensureModelLoaded();\r\n            } catch (e) {\r\n                toast.error(strings.activeLearning.messages.errorLoadModel);\r\n                return;\r\n            } finally {\r\n                toast.dismiss(toastId);\r\n            }\r\n        }\r\n\r\n        // Predict and add regions to current asset\r\n        try {\r\n            const updatedAssetMetadata = await this.activeLearningService\r\n                .predictRegions(canvas, this.state.selectedAsset);\r\n\r\n            await this.onAssetMetadataChanged(updatedAssetMetadata);\r\n            this.setState({ selectedAsset: updatedAssetMetadata });\r\n        } catch (e) {\r\n            throw new AppError(ErrorCode.ActiveLearningPredictionError, \"Error predicting regions\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Navigates to the previous / next root asset on the sidebar\r\n     * @param direction Number specifying asset navigation\r\n     */\r\n    private goToRootAsset = async (direction: number) => {\r\n        const selectedRootAsset = this.state.selectedAsset.asset.parent || this.state.selectedAsset.asset;\r\n        const currentIndex = this.state.assets\r\n            .findIndex((asset) => asset.id === selectedRootAsset.id);\r\n\r\n        if (direction > 0) {\r\n            await this.selectAsset(this.state.assets[Math.min(this.state.assets.length - 1, currentIndex + 1)]);\r\n        } else {\r\n            await this.selectAsset(this.state.assets[Math.max(0, currentIndex - 1)]);\r\n        }\r\n    }\r\n\r\n    private onBeforeAssetSelected = (): boolean => {\r\n        if (!this.state.isValid) {\r\n            this.setState({ showInvalidRegionWarning: true });\r\n        }\r\n\r\n        return this.state.isValid;\r\n    }\r\n\r\n    private selectAsset = async (asset: IAsset): Promise<void> => {\r\n        // Nothing to do if we are already on the same asset.\r\n        if (this.state.selectedAsset && this.state.selectedAsset.asset.id === asset.id) {\r\n            return;\r\n        }\r\n\r\n        if (!this.state.isValid) {\r\n            this.setState({ showInvalidRegionWarning: true });\r\n            return;\r\n        }\r\n\r\n        const assetMetadata = await this.props.actions.loadAssetMetadata(this.props.project, asset);\r\n\r\n        try {\r\n            if (!assetMetadata.asset.size) {\r\n                const assetProps = await HtmlFileReader.readAssetAttributes(asset);\r\n                assetMetadata.asset.size = { width: assetProps.width, height: assetProps.height };\r\n            }\r\n        } catch (err) {\r\n            console.warn(\"Error computing asset size\");\r\n        }\r\n\r\n        this.setState({\r\n            selectedAsset: assetMetadata,\r\n        }, async () => {\r\n            await this.onAssetMetadataChanged(assetMetadata);\r\n        });\r\n    }\r\n\r\n    private loadProjectAssets = async (): Promise<void> => {\r\n        if (this.loadingProjectAssets || this.state.assets.length > 0) {\r\n            return;\r\n        }\r\n\r\n        this.loadingProjectAssets = true;\r\n\r\n        // Get all root project assets\r\n        const rootProjectAssets = _.values(this.props.project.assets)\r\n            .filter((asset) => !asset.parent);\r\n\r\n        // Get all root assets from source asset provider\r\n        const sourceAssets = await this.props.actions.loadAssets(this.props.project);\r\n\r\n        // Merge and uniquify\r\n        const rootAssets = _(rootProjectAssets)\r\n            .concat(sourceAssets)\r\n            .uniqBy((asset) => asset.id)\r\n            .value();\r\n\r\n        const lastVisited = rootAssets.find((asset) => asset.id === this.props.project.lastVisitedAssetId);\r\n\r\n        this.setState({\r\n            assets: rootAssets,\r\n        }, async () => {\r\n            if (rootAssets.length > 0) {\r\n                await this.selectAsset(lastVisited ? lastVisited : rootAssets[0]);\r\n            }\r\n            this.loadingProjectAssets = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the root asset list from the project assets\r\n     */\r\n    private updateRootAssets = () => {\r\n        const updatedAssets = [...this.state.assets];\r\n        updatedAssets.forEach((asset) => {\r\n            const projectAsset = this.props.project.assets[asset.id];\r\n            if (projectAsset) {\r\n                asset.state = projectAsset.state;\r\n            }\r\n        });\r\n\r\n        this.setState({ assets: updatedAssets });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { ExportProviderFactory } from \"../../../../providers/export/exportProviderFactory\";\r\n\r\n/**\r\n * Properties for Export Provider Picker\r\n * @member onChange - Function to call on change of selected value\r\n * @member id - ID for HTML select element\r\n * @member value - Selected value in picker\r\n */\r\nexport interface IExportProviderPickerProps {\r\n    onChange: (value: string) => void;\r\n    id: string;\r\n    value: string;\r\n}\r\n\r\n/**\r\n * Creates HTML select object for selecting an asset or storage provider\r\n * @param props Properties for picker\r\n */\r\nexport default function ExportProviderPicker(props: IExportProviderPickerProps) {\r\n    const exportProviders = _.values(ExportProviderFactory.providers);\r\n\r\n    const allProviders = _([])\r\n        .concat(exportProviders)\r\n        .orderBy(\"displayName\")\r\n        .value();\r\n\r\n    function onChange(e) {\r\n        props.onChange(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <select id={props.id}\r\n            className=\"form-control\"\r\n            value={props.value}\r\n            onChange={onChange}>\r\n            {\r\n                allProviders.map((provider) =>\r\n                    <option key={provider.name} value={provider.name}>\r\n                        {provider.displayName}\r\n                    </option>)\r\n            }\r\n        </select>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport RcSlider from \"rc-slider\";\r\nimport \"rc-slider/assets/index.css\";\r\n\r\nexport interface ISliderProps {\r\n    value: number;\r\n    min?: number;\r\n    max?: number;\r\n    onChange: (value) => void;\r\n    disabled?: boolean;\r\n}\r\n\r\n/**\r\n * Slider component to select a value between a min / max range\r\n */\r\nexport class Slider extends React.Component<ISliderProps> {\r\n    public render() {\r\n        return (\r\n            <div className=\"slider\">\r\n                <span className=\"slider-value\">{this.props.value}</span>\r\n                <RcSlider {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport Form, { Widget, FormValidation, IChangeEvent, ISubmitEvent } from \"react-jsonschema-form\";\r\nimport { getDefaultFormState } from \"react-jsonschema-form/lib/utils\";\r\nimport { addLocValues, strings } from \"../../../../common/strings\";\r\nimport { IExportFormat, IExportProviderOptions } from \"../../../../models/applicationState\";\r\nimport { ExportProviderFactory } from \"../../../../providers/export/exportProviderFactory\";\r\nimport ExportProviderPicker from \"../../common/exportProviderPicker/exportProviderPicker\";\r\nimport CustomFieldTemplate from \"../../common/customField/customFieldTemplate\";\r\nimport ExternalPicker from \"../../common/externalPicker/externalPicker\";\r\nimport { ProtectedInput } from \"../../common/protectedInput/protectedInput\";\r\nimport Checkbox from \"rc-checkbox\";\r\nimport \"rc-checkbox/assets/index.css\";\r\nimport { CustomWidget } from \"../../common/customField/customField\";\r\nimport { Slider } from \"../../common/slider/slider\";\r\n\r\n// tslint:disable-next-line:no-var-requires\r\nconst formSchema = addLocValues(require(\"./exportForm.json\"));\r\n// tslint:disable-next-line:no-var-requires\r\nconst uiSchema = addLocValues(require(\"./exportForm.ui.json\"));\r\n\r\n/**\r\n * Properties for Export Form\r\n * @member settings - Current settings for Export\r\n * @member onSubmit - Function to call on form submission\r\n * @member onCancel - Function to call on form cancellation\r\n */\r\nexport interface IExportFormProps extends React.Props<ExportForm> {\r\n    settings: IExportFormat;\r\n    onSubmit: (exportFormat: IExportFormat) => void;\r\n    onCancel?: () => void;\r\n}\r\n\r\n/**\r\n * State for Export Form\r\n * @member classNames - Class names for HTML form component\r\n * @member providerName - Name of export provider\r\n * @member formSchema - JSON Form Schema for export form\r\n * @member uiSchema - JSON Form UI Schema for export form\r\n * @member formData - Current state of form data as Export Format\r\n */\r\nexport interface IExportFormState {\r\n    classNames: string[];\r\n    providerName: string;\r\n    formSchema: any;\r\n    uiSchema: any;\r\n    formData: IExportFormat;\r\n}\r\n\r\n/**\r\n * @name - Export Form\r\n * @description - Form to view/edit settings for exporting of project\r\n */\r\nexport default class ExportForm extends React.Component<IExportFormProps, IExportFormState> {\r\n    public state: IExportFormState = {\r\n        classNames: [\"needs-validation\"],\r\n        providerName: this.props.settings ? this.props.settings.providerType : null,\r\n        formSchema: { ...formSchema },\r\n        uiSchema: { ...uiSchema },\r\n        formData: this.props.settings,\r\n    };\r\n\r\n    private widgets = {\r\n        externalPicker: (ExternalPicker as any) as Widget,\r\n        exportProviderPicker: (ExportProviderPicker as any) as Widget,\r\n        protectedInput: (ProtectedInput as any) as Widget,\r\n        slider: (Slider as any) as Widget,\r\n        checkbox: CustomWidget(Checkbox, (props) => ({\r\n            checked: props.value,\r\n            onChange: (value) => props.onChange(value.target.checked),\r\n            disabled: props.disabled,\r\n        })),\r\n    };\r\n\r\n    public componentDidMount() {\r\n        if (this.props.settings) {\r\n            this.bindForm(this.props.settings);\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: IExportFormProps) {\r\n        if (prevProps.settings !== this.props.settings) {\r\n            this.bindForm(this.props.settings);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <Form\r\n                className={this.state.classNames.join(\" \")}\r\n                showErrorList={false}\r\n                liveValidate={true}\r\n                noHtml5Validate={true}\r\n                FieldTemplate={CustomFieldTemplate}\r\n                validate={this.onFormValidate}\r\n                widgets={this.widgets}\r\n                formContext={this.state.formData}\r\n                schema={this.state.formSchema}\r\n                uiSchema={this.state.uiSchema}\r\n                formData={this.state.formData}\r\n                onChange={this.onFormChange}\r\n                onSubmit={this.onFormSubmit}>\r\n                <div>\r\n                    <button className=\"btn btn-success mr-1\" type=\"submit\">{strings.export.saveSettings}</button>\r\n                    <button className=\"btn btn-secondary btn-cancel\"\r\n                        type=\"button\"\r\n                        onClick={this.onFormCancel}>{strings.common.cancel}</button>\r\n                </div>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    private onFormChange = (args: IChangeEvent<IExportFormat>) => {\r\n        const providerType = args.formData.providerType;\r\n\r\n        if (providerType !== this.state.providerName) {\r\n            this.bindForm(args.formData, true);\r\n        } else {\r\n            this.bindForm(args.formData, false);\r\n        }\r\n    }\r\n\r\n    private onFormValidate = (exportFormat: IExportFormat, errors: FormValidation): FormValidation => {\r\n        if (this.state.classNames.indexOf(\"was-validated\") === -1) {\r\n            this.setState({\r\n                classNames: [...this.state.classNames, \"was-validated\"],\r\n            });\r\n        }\r\n\r\n        return errors;\r\n    }\r\n\r\n    private onFormSubmit = (args: ISubmitEvent<IExportFormat>): void => {\r\n        this.props.onSubmit(args.formData);\r\n    }\r\n\r\n    private onFormCancel = (): void => {\r\n        if (this.props.onCancel) {\r\n            this.props.onCancel();\r\n        }\r\n    }\r\n\r\n    private bindForm = (exportFormat: IExportFormat, resetProviderOptions: boolean = false): void => {\r\n        // If no provider type was specified on bind, pick the default provider\r\n        const providerType = (exportFormat && exportFormat.providerType)\r\n            ? exportFormat.providerType\r\n            : ExportProviderFactory.defaultProvider.name;\r\n\r\n        let newFormSchema: any = this.state.formSchema;\r\n        let newUiSchema: any = this.state.uiSchema;\r\n\r\n        if (providerType) {\r\n            const providerSchema = addLocValues(require(`../../../../providers/export/${providerType}.json`));\r\n            const providerUiSchema = require(`../../../../providers/export/${providerType}.ui.json`);\r\n\r\n            newFormSchema = { ...formSchema };\r\n            newFormSchema.properties[\"providerOptions\"] = providerSchema;\r\n\r\n            newUiSchema = { ...uiSchema };\r\n            newUiSchema[\"providerOptions\"] = providerUiSchema;\r\n        }\r\n\r\n        const formData = { ...exportFormat };\r\n        const providerOptions = resetProviderOptions ? {} : exportFormat.providerOptions;\r\n        const providerDefaults = getDefaultFormState(newFormSchema.properties.providerOptions, providerOptions);\r\n\r\n        formData.providerType = providerType;\r\n        formData.providerOptions = providerDefaults as IExportProviderOptions;\r\n\r\n        this.setState({\r\n            providerName: providerType,\r\n            formSchema: newFormSchema,\r\n            uiSchema: newUiSchema,\r\n            formData,\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport IProjectActions, * as projectActions from \"../../../../redux/actions/projectActions\";\r\nimport ExportForm from \"./exportForm\";\r\nimport { IProject, IApplicationState, IExportFormat } from \"../../../../models/applicationState\";\r\nimport { strings } from \"../../../../common/strings\";\r\nimport { ExportAssetState } from \"../../../../providers/export/exportProvider\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n/**\r\n * Properties for Export Page\r\n * @member project - Project being edited\r\n * @member recentProjects - Array of projects recently viewed/edited\r\n * @member actions - Project actions\r\n */\r\nexport interface IExportPageProps extends RouteComponentProps, React.Props<ExportPage> {\r\n    project: IProject;\r\n    recentProjects: IProject[];\r\n    actions: IProjectActions;\r\n}\r\n\r\nfunction mapStateToProps(state: IApplicationState) {\r\n    return {\r\n        project: state.currentProject,\r\n        recentProjects: state.recentProjects,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators(projectActions, dispatch),\r\n    };\r\n}\r\n\r\n/**\r\n * @name - Export Page\r\n * @description - Page for adding/editing/removing export configurations\r\n */\r\n@connect(mapStateToProps, mapDispatchToProps)\r\nexport default class ExportPage extends React.Component<IExportPageProps> {\r\n    private emptyExportFormat: IExportFormat = {\r\n        providerType: \"\",\r\n        providerOptions: {\r\n            assetState: ExportAssetState.All,\r\n        },\r\n    };\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        const projectId = this.props.match.params[\"projectId\"];\r\n        if (!this.props.project && projectId) {\r\n            const project = this.props.recentProjects.find((project) => project.id === projectId);\r\n            this.props.actions.loadProject(project);\r\n        }\r\n\r\n        this.onFormSubmit = this.onFormSubmit.bind(this);\r\n        this.onFormCancel = this.onFormCancel.bind(this);\r\n    }\r\n\r\n    public render() {\r\n        const exportFormat = this.props.project && this.props.project.exportFormat\r\n            ? this.props.project.exportFormat\r\n            : { ...this.emptyExportFormat };\r\n\r\n        return (\r\n            <div className=\"m-3\">\r\n                <h3>\r\n                    <i className=\"fas fa-sliders-h fa-1x\"></i>\r\n                    <span className=\"px-2\">\r\n                        {strings.export.settings}\r\n                    </span>\r\n                </h3>\r\n                <div className=\"m-3\">\r\n                    <ExportForm\r\n                        settings={exportFormat}\r\n                        onSubmit={this.onFormSubmit}\r\n                        onCancel={this.onFormCancel} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onFormSubmit = async (exportFormat: IExportFormat) => {\r\n        const projectToUpdate: IProject = {\r\n            ...this.props.project,\r\n            exportFormat,\r\n        };\r\n\r\n        await this.props.actions.saveProject(projectToUpdate);\r\n        toast.success(strings.export.messages.saveSuccess);\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    private onFormCancel() {\r\n        this.props.history.goBack();\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { IConnection } from \"../../../../models/applicationState\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\n\r\n/**\r\n * Properties for Connection Picker\r\n * @member id - ID for HTML select element\r\n * @member value - Selected value of picker\r\n * @member connections - Array of connections for choosing\r\n * @member onChange - Function to call on change of selection\r\n */\r\nexport interface IConnectionPickerProps extends RouteComponentProps {\r\n    id?: string;\r\n    value: any;\r\n    connections: IConnection[];\r\n    onChange: (value) => void;\r\n}\r\n\r\n/**\r\n * State for Connection Picker\r\n * @member value - Selected value\r\n */\r\nexport interface IConnectionPickerState {\r\n    value: any;\r\n}\r\n\r\n/**\r\n * @name - Connection Picker\r\n * @description - Enhanced dropdown for selecting a Connection\r\n */\r\nexport class ConnectionPicker extends React.Component<IConnectionPickerProps, IConnectionPickerState> {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {\r\n            value: this.props.value,\r\n        };\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    public componentDidUpdate(prevProps) {\r\n        if (prevProps.value !== this.props.value) {\r\n            this.setState({\r\n                value: this.props.value || null,\r\n            });\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const { id, connections } = this.props;\r\n        const selectedValue = this.state.value ? this.state.value.id : \"\";\r\n\r\n        return (\r\n            <div className=\"input-group\">\r\n                <select id={id} value={selectedValue} onChange={this.onChange} className=\"form-control\">\r\n                    <option>Select Connection</option>\r\n                    {connections.map((connection) =>\r\n                        <option\r\n                            className=\"connection-option\"\r\n                            key={connection.id}\r\n                            value={connection.id}>{this.getConnectionText(connection)}\r\n                        </option>)\r\n                    }\r\n                </select>\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-primary add-connection\"\r\n                        type=\"button\"\r\n                        onClick={this.createConnection}>Add Connection</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getConnectionText = (connection: IConnection): string => {\r\n        const options = connection.providerOptions;\r\n\r\n        if (options[\"folderPath\"]) {\r\n            return `${connection.name} (${options[\"folderPath\"]})`;\r\n        } else if (options[\"accountName\"]) {\r\n            return `${connection.name} (Azure:${options[\"accountName\"]}\\\\${options[\"containerName\"]})`;\r\n        } else {\r\n            return connection.name;\r\n        }\r\n    }\r\n\r\n    private onChange = (e) => {\r\n        const selectedConnection = this.props.connections\r\n            .find((connection) => connection.id === e.target.value) || {};\r\n\r\n        this.setState({\r\n            value: selectedConnection,\r\n        }, () => this.props.onChange(selectedConnection));\r\n    }\r\n\r\n    private createConnection = () => {\r\n        this.props.history.push(\"/connections/create\");\r\n    }\r\n}\r\n\r\nexport const ConnectionPickerWithRouter = withRouter<IConnectionPickerProps>(ConnectionPicker);\r\n","import React, { SyntheticEvent } from \"react\";\r\nimport { ISecurityToken } from \"../../../../models/applicationState\";\r\n\r\n/**\r\n * Security Token Picker Properties\r\n * @member id - The id to bind to the input element\r\n * @member value - The value to bind to the input element\r\n * @member securityTokens - The list of security tokens to display\r\n * @member onChange - The event handler to call when the input value changes\r\n */\r\nexport interface ISecurityTokenPickerProps {\r\n    id?: string;\r\n    value: string;\r\n    securityTokens: ISecurityToken[];\r\n    onChange: (value: string) => void;\r\n}\r\n\r\n/**\r\n * Security Token Picker\r\n * @description - Used to display a list of security tokens\r\n */\r\nexport class SecurityTokenPicker extends React.Component<ISecurityTokenPickerProps> {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <select id={this.props.id}\r\n                className=\"form-control\"\r\n                value={this.props.value}\r\n                onChange={this.onChange}>\r\n                <option value=\"\">Generate New Security Token</option>\r\n                {this.props.securityTokens.map((item) => <option key={item.key} value={item.name}>{item.name}</option>)}\r\n            </select>\r\n        );\r\n    }\r\n\r\n    private onChange(e: SyntheticEvent) {\r\n        const inputElement = e.target as HTMLSelectElement;\r\n        this.props.onChange(inputElement.value ? inputElement.value : undefined);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Form, { FormValidation, ISubmitEvent, IChangeEvent, Widget } from \"react-jsonschema-form\";\r\nimport { ITagsInputProps, TagEditorModal, TagsInput } from \"vott-react\";\r\nimport { addLocValues, strings } from \"../../../../common/strings\";\r\nimport { IConnection, IProject, ITag, IAppSettings } from \"../../../../models/applicationState\";\r\nimport { StorageProviderFactory } from \"../../../../providers/storage/storageProviderFactory\";\r\nimport { ConnectionPickerWithRouter } from \"../../common/connectionPicker/connectionPicker\";\r\nimport { CustomField, CustomWidget } from \"../../common/customField/customField\";\r\nimport CustomFieldTemplate from \"../../common/customField/customFieldTemplate\";\r\nimport { ISecurityTokenPickerProps, SecurityTokenPicker } from \"../../common/securityTokenPicker/securityTokenPicker\";\r\nimport \"vott-react/dist/css/tagsInput.css\";\r\nimport Checkbox from \"rc-checkbox\";\r\nimport { IConnectionProviderPickerProps } from \"../../common/connectionProviderPicker/connectionProviderPicker\";\r\nimport LocalFolderPicker from \"../../common/localFolderPicker/localFolderPicker\";\r\n\r\n// tslint:disable-next-line:no-var-requires\r\nconst formSchema = addLocValues(require(\"./projectForm.json\"));\r\n// tslint:disable-next-line:no-var-requires\r\nconst uiSchema = addLocValues(require(\"./projectForm.ui.json\"));\r\n\r\n/**\r\n * Required properties for Project Settings form\r\n * @member project - Current project to fill form\r\n * @member connections - Array of connections to use in project\r\n * @member onSubmit - Function to call on form submission\r\n * @member onCancel - Function to call on form cancellation\r\n */\r\nexport interface IProjectFormProps extends React.Props<ProjectForm> {\r\n    project: IProject;\r\n    connections: IConnection[];\r\n    appSettings: IAppSettings;\r\n    onSubmit: (project: IProject) => void;\r\n    onChange?: (project: IProject) => void;\r\n    onCancel?: () => void;\r\n}\r\n\r\n/**\r\n * Project Form State\r\n * @member classNames - Class names for HTML form element\r\n * @member formData - data containing details of project\r\n * @member formSchema - json schema of form\r\n * @member uiSchema - json UI schema of form\r\n */\r\nexport interface IProjectFormState {\r\n    classNames: string[];\r\n    formData: IProject;\r\n    formSchema: any;\r\n    uiSchema: any;\r\n}\r\n\r\n/**\r\n * @name - Project Form\r\n * @description - Form for editing or creating VoTT projects\r\n */\r\nexport default class ProjectForm extends React.Component<IProjectFormProps, IProjectFormState> {\r\n    private widgets = {\r\n        localFolderPicker: (LocalFolderPicker as any) as Widget,\r\n        checkbox: CustomWidget(Checkbox, (props) => ({\r\n            checked: props.value,\r\n            onChange: (value) => props.onChange(value.target.checked),\r\n            disabled: props.disabled,\r\n        })),\r\n    };\r\n\r\n    private tagsInput: React.RefObject<TagsInput>;\r\n    private tagEditorModal: React.RefObject<TagEditorModal>;\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {\r\n            classNames: [\"needs-validation\"],\r\n            uiSchema: { ...uiSchema },\r\n            formSchema: { ...formSchema },\r\n            formData: {\r\n                ...this.props.project,\r\n            },\r\n        };\r\n        this.tagsInput = React.createRef<TagsInput>();\r\n        this.tagEditorModal = React.createRef<TagEditorModal>();\r\n\r\n        this.onFormSubmit = this.onFormSubmit.bind(this);\r\n        this.onFormCancel = this.onFormCancel.bind(this);\r\n        this.onFormValidate = this.onFormValidate.bind(this);\r\n        this.onTagShiftClick = this.onTagShiftClick.bind(this);\r\n        this.onTagModalOk = this.onTagModalOk.bind(this);\r\n    }\r\n    /**\r\n     * Updates state if project from properties has changed\r\n     * @param prevProps - previously set properties\r\n     */\r\n    public componentDidUpdate(prevProps: IProjectFormProps) {\r\n        if (prevProps.project !== this.props.project) {\r\n            this.setState({\r\n                formData: { ...this.props.project },\r\n            });\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <Form\r\n                className={this.state.classNames.join(\" \")}\r\n                showErrorList={false}\r\n                liveValidate={true}\r\n                noHtml5Validate={true}\r\n                FieldTemplate={CustomFieldTemplate}\r\n                validate={this.onFormValidate}\r\n                fields={this.fields()}\r\n                widgets={this.widgets}\r\n                schema={this.state.formSchema}\r\n                uiSchema={this.state.uiSchema}\r\n                formData={this.state.formData}\r\n                onChange={this.onFormChange}\r\n                onSubmit={this.onFormSubmit}>\r\n                <div>\r\n                    <button className=\"btn btn-success mr-1\" type=\"submit\">{strings.projectSettings.save}</button>\r\n                    <button className=\"btn btn-secondary btn-cancel\"\r\n                        type=\"button\"\r\n                        onClick={this.onFormCancel}>{strings.common.cancel}</button>\r\n                </div>\r\n                <TagEditorModal\r\n                    ref={this.tagEditorModal}\r\n                    onOk={this.onTagModalOk}\r\n\r\n                    tagNameText={strings.tags.modal.name}\r\n                    tagColorText={strings.tags.modal.color}\r\n                    saveText={strings.common.save}\r\n                    cancelText={strings.common.cancel}\r\n                />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    private fields() {\r\n        return {\r\n            securityToken: CustomField<ISecurityTokenPickerProps>(SecurityTokenPicker, (props) => ({\r\n                id: props.idSchema.$id,\r\n                schema: props.schema,\r\n                value: props.formData,\r\n                securityTokens: this.props.appSettings.securityTokens,\r\n                onChange: props.onChange,\r\n            })),\r\n            sourceConnection: CustomField<IConnectionProviderPickerProps>(ConnectionPickerWithRouter, (props) => {\r\n                return {\r\n                    id: props.idSchema.$id,\r\n                    value: props.formData,\r\n                    connections: this.props.connections,\r\n                    onChange: props.onChange,\r\n                };\r\n            }),\r\n            targetConnection: CustomField<IConnectionProviderPickerProps>(ConnectionPickerWithRouter, (props) => {\r\n                const targetConnections = this.props.connections\r\n                    .filter((connection) => StorageProviderFactory.isRegistered(connection.providerType));\r\n\r\n                return {\r\n                    id: props.idSchema.$id,\r\n                    value: props.formData,\r\n                    connections: targetConnections,\r\n                    onChange: props.onChange,\r\n                };\r\n            }),\r\n            tagsInput: CustomField<ITagsInputProps>(TagsInput, (props) => {\r\n                return {\r\n                    tags: props.formData,\r\n                    onChange: props.onChange,\r\n                    placeHolder: strings.tags.placeholder,\r\n                    onShiftTagClick: this.onTagShiftClick,\r\n                    ref: this.tagsInput,\r\n                };\r\n            }),\r\n        };\r\n    }\r\n\r\n    private onTagShiftClick(tag: ITag) {\r\n        this.tagEditorModal.current.open(tag);\r\n    }\r\n\r\n    private onTagModalOk(oldTag: ITag, newTag: ITag) {\r\n        this.tagsInput.current.updateTag(oldTag, newTag);\r\n        this.tagEditorModal.current.close();\r\n    }\r\n\r\n    private onFormValidate(project: IProject, errors: FormValidation) {\r\n        if (Object.keys(project.sourceConnection).length === 0) {\r\n            errors.sourceConnection.addError(\"is a required property\");\r\n        }\r\n\r\n        if (Object.keys(project.targetConnection).length === 0) {\r\n            errors.targetConnection.addError(\"is a required property\");\r\n        }\r\n\r\n        if (this.state.classNames.indexOf(\"was-validated\") === -1) {\r\n            this.setState({\r\n                classNames: [...this.state.classNames, \"was-validated\"],\r\n            });\r\n        }\r\n\r\n        return errors;\r\n    }\r\n\r\n    private onFormChange = (changeEvent: IChangeEvent<IProject>) => {\r\n        if (this.props.onChange) {\r\n            this.props.onChange(changeEvent.formData);\r\n        }\r\n    }\r\n\r\n    private onFormSubmit(args: ISubmitEvent<IProject>) {\r\n        const project: IProject = {\r\n            ...args.formData,\r\n        };\r\n        this.props.onSubmit(project);\r\n    }\r\n\r\n    private onFormCancel() {\r\n        if (this.props.onCancel) {\r\n            this.props.onCancel();\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport {\r\n    AssetState, IAsset, IAssetMetadata,\r\n    IProject, IRegion, ITag, IPoint, AssetType,\r\n} from \"../../../../models/applicationState\";\r\nimport { AssetService } from \"../../../../services/assetService\";\r\nimport { strings, interpolate } from \"../../../../common/strings\";\r\nimport {\r\n    RadialChart, XYPlot, ArcSeries, Sunburst, Hint, DiscreteColorLegend,\r\n    HorizontalGridLines, XAxis, YAxis, VerticalBarSeries,\r\n} from \"react-vis\";\r\nimport \"react-vis/dist/styles/radial-chart.scss\";\r\nimport \"react-vis/dist/styles/plot.scss\";\r\nimport \"./projectSettingsPage.scss\";\r\n\r\n/**\r\n * Required properties for Project Metrics\r\n * @member project - Current project to fill metrics table\r\n */\r\nexport interface IProjectMetricsProps {\r\n    project: IProject;\r\n}\r\n\r\nexport interface IProjectMetricsState {\r\n    loading: boolean;\r\n    hoveredCell: any;\r\n    sourceAssets: IAsset[];\r\n    projectAssetsMetadata: IAssetMetadata[];\r\n}\r\n\r\n/**\r\n * @name - Project Form\r\n * @description -\r\n */\r\nexport default class ProjectMetrics extends React.Component<IProjectMetricsProps, IProjectMetricsState> {\r\n    public state = {\r\n        loading: true,\r\n        hoveredCell: null,\r\n        sourceAssets: [],\r\n        projectAssetsMetadata: [],\r\n    };\r\n\r\n    public async componentDidMount() {\r\n        this.setState({\r\n            loading: true,\r\n        });\r\n\r\n        await this.getAssetsAndMetadata();\r\n        window.addEventListener(\"resize\", this.refresh);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.refresh);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"condensed-list\">\r\n                <h6 className=\"condensed-list-header bg-darker-2 p-2\">\r\n                    <i className=\"fas fa-chart-bar\" />\r\n                    <span>{strings.projectMetrics.title}</span>\r\n                </h6>\r\n                <div className=\"condensed-list-body\">\r\n                    {this.state.loading &&\r\n                        <div className=\"loading\">\r\n                            <i className=\"fas fa-circle-notch fa-spin fa-2x\" />\r\n                        </div>\r\n                    }\r\n                    {!this.state.loading &&\r\n                        this.renderMetrics()\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private refresh = () => {\r\n        this.forceUpdate();\r\n    }\r\n\r\n    private buildValue(hoveredCell) {\r\n        const { radius, angle, angle0 } = hoveredCell;\r\n        const truedAngle = (angle + angle0) / 2;\r\n        return {\r\n            x: radius * Math.cos(truedAngle),\r\n            y: radius * Math.sin(truedAngle),\r\n        };\r\n    }\r\n\r\n    private renderMetrics() {\r\n        const sourceAssetCount = this.getSourceAssetCount();\r\n        const taggedAssetCount = this.getTaggedAssetCount();\r\n        const visitedAssetCount = this.getVisitedAssetsCount();\r\n        const assetChartSize = window.innerWidth >= 1920 ? 250 : 200;\r\n\r\n        const assetChartData = {\r\n            animation: true,\r\n            title: \"asset-count\",\r\n            children: [\r\n                {\r\n                    title: interpolate(strings.projectMetrics.visitedAssets, { count: visitedAssetCount }),\r\n                    children: [\r\n                        {\r\n                            title: interpolate(strings.projectMetrics.taggedAssets, { count: taggedAssetCount }),\r\n                            bigness: 1,\r\n                            children: [],\r\n                            clr: \"#70c400\",\r\n                            size: taggedAssetCount,\r\n                            dontRotateLabel: true,\r\n                        },\r\n                        {\r\n                            bigness: 1,\r\n                            children: [],\r\n                            clr: \"#ff8c00\",\r\n                            title: interpolate(strings.projectMetrics.nonTaggedAssets,\r\n                                { count: visitedAssetCount - taggedAssetCount }),\r\n                            size: visitedAssetCount - taggedAssetCount,\r\n                            dontRotateLabel: true,\r\n                        },\r\n                    ],\r\n                    clr: \"#4894fe\",\r\n                    dontRotateLabel: true,\r\n                },\r\n                {\r\n                    title: interpolate(strings.projectMetrics.nonVisitedAssets,\r\n                        { count: sourceAssetCount - visitedAssetCount }),\r\n                    bigness: 1,\r\n                    children: [],\r\n                    clr: \"#e81123\",\r\n                    dontRotateLabel: true,\r\n                    labelStyle: {\r\n                        fontSize: 15,\r\n                        fontWeight: \"bold\",\r\n                    },\r\n                    size: sourceAssetCount - visitedAssetCount,\r\n                },\r\n            ],\r\n        };\r\n\r\n        const tagChartData = [];\r\n        this.getTagsCounts().forEach((value) => {\r\n            tagChartData.push({\r\n                x: value.tag.name,\r\n                y: value.count,\r\n                color: value.tag.color,\r\n            });\r\n        });\r\n\r\n        const { hoveredCell } = this.state;\r\n\r\n        const legend = [\r\n            {\r\n                title: interpolate(strings.projectMetrics.visitedAssets,\r\n                    { count: visitedAssetCount }),\r\n                color: \"#4894fe\",\r\n            },\r\n            {\r\n                title: interpolate(strings.projectMetrics.nonVisitedAssets,\r\n                    { count: sourceAssetCount - visitedAssetCount }),\r\n                color: \"#e81123\",\r\n            },\r\n            {\r\n                title: interpolate(strings.projectMetrics.taggedAssets, { count: taggedAssetCount }),\r\n                color: \"#70c400\",\r\n            },\r\n            {\r\n                title: interpolate(strings.projectMetrics.nonTaggedAssets,\r\n                    { count: visitedAssetCount - taggedAssetCount }),\r\n                color: \"#ff8c00\",\r\n            }];\r\n\r\n        return (\r\n            <div className=\"m-3\">\r\n                <h4>{strings.projectMetrics.assetsSectionTitle}</h4>\r\n                <p className=\"my-1\">\r\n                    {strings.projectMetrics.totalAssetCount}:\r\n                        <strong className=\"px-1 metric-total-asset-count\">{sourceAssetCount}</strong><br />\r\n                </p>\r\n                <div className=\"asset-chart\">\r\n                    <Sunburst\r\n                        data={assetChartData}\r\n                        style={{ stroke: \"#fff\" }}\r\n                        onValueMouseOver={(v) =>\r\n                            this.setState({ hoveredCell: v.x && v.y ? v : null })\r\n                        }\r\n                        onValueMouseOut={(v) => this.setState({ hoveredCell: null })}\r\n                        height={assetChartSize}\r\n                        margin={{ top: 50, bottom: 50, left: 50, right: 50 }}\r\n                        getLabel={(d) => d.name}\r\n                        getSize={(d) => d.size}\r\n                        getColor={(d) => d.clr}\r\n                        width={assetChartSize}\r\n                        padAngle={() => 0.05}\r\n                        hideRootNode={true}\r\n                    >\r\n                        {hoveredCell ? (\r\n                            <Hint value={this.buildValue(hoveredCell)}>\r\n                                <div className=\"hint-content\">\r\n                                    <div className=\"hint-content-box\" style={{ background: hoveredCell.clr }} />\r\n                                    <span className=\"px-2\">{hoveredCell.title}</span>\r\n                                </div>\r\n                            </Hint>\r\n                        ) : null}\r\n                    </Sunburst>\r\n                    <DiscreteColorLegend items={legend} />\r\n                </div>\r\n                <div className=\"my-4\">\r\n                    <h4>{strings.projectMetrics.tagsSectionTitle}</h4>\r\n                    <p className=\"my-1\">\r\n                        {strings.projectMetrics.totalTagCount}:\r\n                        <strong className=\"px-1 metric-total-tag-count\">{this.props.project.tags.length}</strong>\r\n                    </p>\r\n                    <p className=\"my-1\">\r\n                        {strings.projectMetrics.totalRegionCount}:\r\n                        <strong className=\"px-1 metric-total-region-count\">{this.getRegionsCount()}</strong>\r\n                    </p>\r\n                    <p className=\"my-1\">\r\n                        {strings.projectMetrics.avgTagCountPerAsset}:\r\n                        <strong className=\"px-1 metric-avg-tag-count\">{this.getAverageTagCount()}</strong>\r\n                    </p>\r\n                    <XYPlot className=\"tag-chart\"\r\n                        margin={{ bottom: 150 }}\r\n                        xType=\"ordinal\"\r\n                        colorType=\"literal\"\r\n                        width={300}\r\n                        height={400}>\r\n                        <HorizontalGridLines />\r\n                        <XAxis tickLabelAngle={-45} />\r\n                        <YAxis />\r\n                        <VerticalBarSeries\r\n                            data={tagChartData}\r\n                        />\r\n                    </XYPlot>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private async getAssetsAndMetadata() {\r\n        const assetService = new AssetService(this.props.project);\r\n        const sourceAssets = await assetService.getAssets();\r\n\r\n        const assetsMap = this.props.project.assets;\r\n        const assets = _.values(assetsMap);\r\n        const projectAssetsMetadata = await assets.mapAsync((asset) => assetService.getAssetMetadata(asset));\r\n\r\n        this.setState({\r\n            loading: false,\r\n            sourceAssets,\r\n            projectAssetsMetadata,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Count the number of tagged images or video frames\r\n     */\r\n    private getTaggedAssetCount = () => {\r\n        const metadata = this.state.projectAssetsMetadata;\r\n\r\n        const taggedAssets = _.filter(metadata,\r\n            (m) => {\r\n                // ignore video asset root container\r\n                return m.asset.state === AssetState.Tagged && m.regions.length > 0;\r\n            });\r\n\r\n        return taggedAssets.length;\r\n    }\r\n\r\n    /**\r\n     * Count the avg number of tags per image or video frame\r\n     */\r\n    private getAverageTagCount = () => {\r\n        const taggedAssetCount = this.getTaggedAssetCount();\r\n\r\n        if (taggedAssetCount === 0) {\r\n            return 0;\r\n        }\r\n\r\n        const tags = this.getAllTagReferences();\r\n        return (tags.length / taggedAssetCount).toFixed(2);\r\n    }\r\n\r\n    /**\r\n     * The number of visited image or video frames\r\n     */\r\n    private getVisitedAssetsCount = () => {\r\n        const metadata = this.state.projectAssetsMetadata;\r\n        const visitedAssets = _.filter(metadata, (m) => {\r\n            return m.asset.state === AssetState.Visited || m.asset.state === AssetState.Tagged;\r\n        });\r\n\r\n        return visitedAssets.length;\r\n    }\r\n\r\n    /**\r\n     * Total regions drawn on all assets\r\n     */\r\n    private getRegionsCount = () => {\r\n        const regions = this.getRegions();\r\n        return regions.length;\r\n    }\r\n\r\n    /**\r\n     * Total number of source assets in the project\r\n     *   Note: video frames are not counted, only the video container\r\n     */\r\n    private getSourceAssetCount = () => {\r\n        const assets = this.state.projectAssetsMetadata.map((e) => e.asset.name);\r\n        const projectAssetSet = new Set(this.state.sourceAssets.map((e) => e.name).concat(assets));\r\n\r\n        return projectAssetSet.size;\r\n    }\r\n\r\n    /**\r\n     * a map of asset count per tag\r\n     */\r\n    private getTagsCounts = (): Map<string, { tag: ITag, count: number }> => {\r\n        const projectTags = _.keyBy(this.props.project.tags, (tag) => tag.name);\r\n        const tagReferences = this.getAllTagReferences();\r\n\r\n        const map = new Map<string, { tag: ITag, count: number }>();\r\n        tagReferences.forEach((t) => {\r\n            const projectTag = projectTags[t];\r\n            if (!projectTag) {\r\n                return;\r\n            }\r\n\r\n            const tagMetric = map.get(t) || { tag: projectTag, count: 0 };\r\n            tagMetric.count++;\r\n            map.set(t, tagMetric);\r\n        });\r\n\r\n        this.props.project.tags.forEach((tag) => {\r\n            if (!map.get(tag.name)) {\r\n                map.set(tag.name, { tag, count: 0 });\r\n            }\r\n        });\r\n\r\n        return map;\r\n    }\r\n\r\n    /**\r\n     * retrieve the list of regions drawn\r\n     */\r\n    private getRegions = (): IRegion[] => {\r\n        const assetsMetadata = this.state.projectAssetsMetadata;\r\n\r\n        // find all assets with non-zero regions, extract regions\r\n        const regions = [];\r\n        assetsMetadata.forEach((m) => {\r\n            if (m.regions.length > 0) {\r\n                regions.push((m.regions));\r\n            }\r\n        });\r\n\r\n        return _.flatten(regions);\r\n    }\r\n\r\n    /**\r\n     * retrieve the list of tags assigned\r\n     */\r\n    private getAllTagReferences = (): string[] => {\r\n        const regions = this.getRegions();\r\n\r\n        const tags = [];\r\n        regions.forEach((r) => {\r\n            tags.push(r.tags);\r\n        });\r\n\r\n        return _.flatten<string>(tags);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport ProjectForm from \"./projectForm\";\r\nimport { strings, interpolate } from \"../../../../common/strings\";\r\nimport IProjectActions, * as projectActions from \"../../../../redux/actions/projectActions\";\r\nimport { IApplicationState, IProject, IConnection, IAppSettings } from \"../../../../models/applicationState\";\r\nimport IApplicationActions, * as applicationActions from \"../../../../redux/actions/applicationActions\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"./projectSettingsPage.scss\";\r\nimport ProjectMetrics from \"./projectMetrics\";\r\n\r\n/**\r\n * Properties for Project Settings Page\r\n * @member project - Project being edited\r\n * @member recentProjects - Array of projects recently viewed/edited\r\n * @member actions - Project actions\r\n * @member connections - Array of connections available for projects\r\n */\r\nexport interface IProjectSettingsPageProps extends RouteComponentProps, React.Props<ProjectSettingsPage> {\r\n    project: IProject;\r\n    recentProjects: IProject[];\r\n    projectActions: IProjectActions;\r\n    applicationActions: IApplicationActions;\r\n    connections: IConnection[];\r\n    appSettings: IAppSettings;\r\n}\r\n\r\nexport interface IProjectSettingsPageState {\r\n    project: IProject;\r\n}\r\n\r\nfunction mapStateToProps(state: IApplicationState) {\r\n    return {\r\n        project: state.currentProject,\r\n        connections: state.connections,\r\n        recentProjects: state.recentProjects,\r\n        appSettings: state.appSettings,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        projectActions: bindActionCreators(projectActions, dispatch),\r\n        applicationActions: bindActionCreators(applicationActions, dispatch),\r\n    };\r\n}\r\n\r\nconst projectFormKey = \"projectForm\";\r\n\r\n/**\r\n * @name - Project Settings Page\r\n * @description - Page for adding/editing/removing projects\r\n */\r\n@connect(mapStateToProps, mapDispatchToProps)\r\nexport default class ProjectSettingsPage extends React.Component<IProjectSettingsPageProps, IProjectSettingsPageState> {\r\n    public state: IProjectSettingsPageState = {\r\n        project: this.props.project,\r\n    };\r\n\r\n    public async componentDidMount() {\r\n        const projectId = this.props.match.params[\"projectId\"];\r\n        // If we are creating a new project check to see if there is a partial\r\n        // project already created in local storage\r\n        if (this.props.match.url === \"/projects/create\") {\r\n            const projectJson = localStorage.getItem(projectFormKey);\r\n            if (projectJson) {\r\n                this.setState({ project: JSON.parse(projectJson) });\r\n            }\r\n        } else if (!this.props.project && projectId) {\r\n            const projectToLoad = this.props.recentProjects.find((project) => project.id === projectId);\r\n            if (projectToLoad) {\r\n                if (projectToLoad.useSecurityToken) {\r\n                    await this.props.applicationActions.ensureSecurityToken(projectToLoad);\r\n                }\r\n\r\n                await this.props.projectActions.loadProject(projectToLoad);\r\n            }\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: Readonly<IProjectSettingsPageProps>) {\r\n        if (prevProps.project !== this.props.project) {\r\n            this.setState({ project: this.props.project });\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"project-settings-page\">\r\n                <div className=\"project-settings-page-settings m-3\">\r\n                    <h3>\r\n                        <i className=\"fas fa-sliders-h\" />\r\n                        <span className=\"px-2\">\r\n                            {strings.projectSettings.title}\r\n                        </span>\r\n                    </h3>\r\n                    <div className=\"m-3\">\r\n                        <ProjectForm\r\n                            project={this.state.project}\r\n                            connections={this.props.connections}\r\n                            appSettings={this.props.appSettings}\r\n                            onChange={this.onFormChange}\r\n                            onSubmit={this.onFormSubmit}\r\n                            onCancel={this.onFormCancel} />\r\n                    </div>\r\n                </div>\r\n                {this.props.project &&\r\n                    <div className=\"project-settings-page-metrics bg-lighter-1\">\r\n                        <ProjectMetrics project={this.props.project} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * When the project form is changed verifies if the project contains enough information\r\n     * to persist into temp local storage to support better new project flow when\r\n     * creating new connections inline\r\n     */\r\n    private onFormChange = (project: IProject) => {\r\n        if (this.isPartialProject(project)) {\r\n            localStorage.setItem(projectFormKey, JSON.stringify(project));\r\n        }\r\n    }\r\n\r\n    private onFormSubmit = async (project: IProject) => {\r\n        const isNew = !(!!project.id);\r\n\r\n        if (project.useSecurityToken) {\r\n            await this.props.applicationActions.ensureSecurityToken(project);\r\n        }\r\n\r\n        await this.props.projectActions.saveProject(project);\r\n        localStorage.removeItem(projectFormKey);\r\n\r\n        toast.success(interpolate(strings.projectSettings.messages.saveSuccess, { project }));\r\n\r\n        if (isNew) {\r\n            this.props.history.push(`/projects/${this.props.project.id}/edit`);\r\n        } else {\r\n            this.props.history.goBack();\r\n        }\r\n    }\r\n\r\n    private onFormCancel = () => {\r\n        localStorage.removeItem(projectFormKey);\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    /**\r\n     * Checks whether a project is partially populated\r\n     */\r\n    private isPartialProject = (project: IProject): boolean => {\r\n        return project && !(!!project.id) &&\r\n            (\r\n                !!project.name\r\n                || !!project.description\r\n                || (project.sourceConnection && Object.keys(project.sourceConnection).length > 0)\r\n                || (project.targetConnection && Object.keys(project.targetConnection).length > 0)\r\n                || (project.exportFormat && Object.keys(project.exportFormat).length > 0)\r\n                || (project.tags && project.tags.length > 0)\r\n            );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport HomePage from \"../pages/homepage/homePage\";\r\nimport ActiveLearningPage from \"../pages/activeLearning/activeLearningPage\";\r\nimport AppSettingsPage from \"../pages/appSettings/appSettingsPage\";\r\nimport ConnectionPage from \"../pages/connections/connectionsPage\";\r\nimport EditorPage from \"../pages/editorPage/editorPage\";\r\nimport ExportPage from \"../pages/export/exportPage\";\r\nimport ProjectSettingsPage from \"../pages/projectSettings/projectSettingsPage\";\r\n\r\n/**\r\n * @name - Main Content Router\r\n * @description - Controls main content pane based on route\r\n */\r\nexport default function MainContentRouter() {\r\n    return (\r\n        <div className=\"app-content text-light\">\r\n            <Switch>\r\n                <Route path=\"/\" exact component={HomePage} />\r\n                <Route path=\"/settings\" component={AppSettingsPage} />\r\n                <Route path=\"/connections/:connectionId\" component={ConnectionPage} />\r\n                <Route path=\"/connections\" exact component={ConnectionPage} />\r\n                <Route path=\"/projects/:projectId/edit\" component={EditorPage} />\r\n                <Route path=\"/projects/create\" component={ProjectSettingsPage} />\r\n                <Route path=\"/projects/:projectId/settings\" component={ProjectSettingsPage} />\r\n                <Route path=\"/projects/:projectId/export\" component={ExportPage} />\r\n                <Route path=\"/projects/:projectId/active-learning\" component={ActiveLearningPage} />\r\n                <Route component={HomePage} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n/**\r\n * Link able to be enabled/disabled\r\n * @param param0 - {\r\n *      to: \"link for item\"\r\n *      disabled: true if link is disabled\r\n *      props: {\r\n *          title: Title of item,\r\n *          children: Child items to include in span\r\n *      }\r\n * }\r\n */\r\nexport default function ConditionalNavLink({ to, disabled, ...props }) {\r\n    if (disabled) {\r\n        return (<span className=\"disabled\" title={props.title} >{props.children}</span>);\r\n    } else {\r\n        return (<NavLink title={props.title} to={to}>{props.children}</NavLink>);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport ConditionalNavLink from \"../common/conditionalNavLink/conditionalNavLink\";\r\nimport { strings } from \"../../../common/strings\";\r\n\r\n/**\r\n * Side bar that remains visible throughout app experience\r\n * Contains links to editor, settings, export, etc.\r\n * @param param0 - {\r\n *      project - IProject\r\n * }\r\n */\r\nexport default function Sidebar({ project }) {\r\n    const projectId = project ? project.id : null;\r\n\r\n    return (\r\n        <div className=\"bg-lighter-2 app-sidebar\">\r\n            <ul>\r\n                <li>\r\n                    <NavLink title={\"Home\"} to={`/`}>\r\n                        <i className=\"fas fa-home\"></i>\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <ConditionalNavLink disabled={!projectId}\r\n                        title={strings.tags.editor}\r\n                        to={`/projects/${projectId}/edit`}>\r\n                        <i className=\"fas fa-bookmark\"></i>\r\n                    </ConditionalNavLink>\r\n                </li>\r\n                <li>\r\n                    <ConditionalNavLink disabled={!projectId}\r\n                        title={strings.projectSettings.title}\r\n                        to={`/projects/${projectId}/settings`}>\r\n                        <i className=\"fas fa-sliders-h\"></i>\r\n                    </ConditionalNavLink>\r\n                </li>\r\n                <li>\r\n                    <ConditionalNavLink disabled={!projectId}\r\n                        title={strings.export.title}\r\n                        to={`/projects/${projectId}/export`}>\r\n                        <i className=\"fas fa-external-link-square-alt\"></i>\r\n                    </ConditionalNavLink>\r\n                </li>\r\n                <li>\r\n                    <ConditionalNavLink disabled={!projectId}\r\n                        title={strings.activeLearning.title}\r\n                        to={`/projects/${projectId}/active-learning`}>\r\n                        <i className=\"fas fa-graduation-cap\"></i>\r\n                    </ConditionalNavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink title={strings.connections.title}\r\n                        to={`/connections`}><i className=\"fas fa-plug\"></i></NavLink>\r\n                </li>\r\n            </ul>\r\n            <div className=\"app-sidebar-fill\"></div>\r\n            <ul>\r\n                <li><NavLink title={strings.appSettings.title}\r\n                    to={`/settings`}><i className=\"fas fa-cog\"></i></NavLink></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n","import { createHashHistory } from \"history\";\r\nexport default createHashHistory();\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\ninterface IConfig {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n}\r\n\r\nexport function register(config?: IConfig) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href,\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: IConfig) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\",\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import _ from \"lodash\";\r\nimport { ActionTypes } from \"../actions/actionTypes\";\r\nimport { IProject, ITag } from \"../../models/applicationState\";\r\nimport { AnyAction } from \"../actions/actionCreators\";\r\n// tslint:disable-next-line:no-var-requires\r\nconst tagColors = require(\"../../react/components/common/tagColors.json\");\r\n\r\n/**\r\n * Reducer for project. Actions handled:\r\n * DELETE_PROJECT_SUCCESS\r\n * CLOSE_PROJECT_SUCCESS\r\n * LOAD_PROJECT_SUCCESS\r\n * SAVE_PROJECT_SUCCESS\r\n * LOAD_PROJECT_ASSETS_SUCCESS\r\n * SAVE_ASSET_METADATA_SUCCESS\r\n * @param state - Current project\r\n * @param action - Action that was dispatched\r\n */\r\nexport const reducer = (state: IProject = null, action: AnyAction): IProject => {\r\n    switch (action.type) {\r\n        case ActionTypes.DELETE_PROJECT_SUCCESS:\r\n        case ActionTypes.CLOSE_PROJECT_SUCCESS:\r\n            return null;\r\n        case ActionTypes.LOAD_PROJECT_SUCCESS:\r\n            return { ...action.payload };\r\n        case ActionTypes.LOAD_ASSET_METADATA_SUCCESS:\r\n            if (!state) {\r\n                return state;\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                lastVisitedAssetId: action.payload.asset.id,\r\n            };\r\n        case ActionTypes.SAVE_ASSET_METADATA_SUCCESS:\r\n            if (!state) {\r\n                return state;\r\n            }\r\n\r\n            const updatedAssets = { ...state.assets } || {};\r\n            updatedAssets[action.payload.asset.id] = { ...action.payload.asset };\r\n\r\n            const assetTags = new Set();\r\n            action.payload.regions.forEach((region) => region.tags.forEach((tag) => assetTags.add(tag)));\r\n\r\n            const newTags: ITag[] = state.tags ? [...state.tags] : [];\r\n            let updateTags = false;\r\n\r\n            assetTags.forEach((tag) => {\r\n                if (!state.tags || state.tags.length === 0 ||\r\n                    !state.tags.find((projectTag) => tag === projectTag.name)) {\r\n                    newTags.push({\r\n                        name: tag,\r\n                        color: tagColors[newTags.length % tagColors.length],\r\n                    });\r\n                    updateTags = true;\r\n                }\r\n            });\r\n\r\n            if (updateTags) {\r\n                return {\r\n                    ...state,\r\n                    tags: newTags,\r\n                    assets: updatedAssets,\r\n                };\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                assets: updatedAssets,\r\n            };\r\n        case ActionTypes.SAVE_CONNECTION_SUCCESS:\r\n            if (!state) {\r\n                return state;\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                sourceConnection: state.sourceConnection.id === action.payload.id\r\n                    ? { ...action.payload }\r\n                    : state.sourceConnection,\r\n                targetConnection: state.targetConnection.id === action.payload.id\r\n                    ? { ...action.payload }\r\n                    : state.targetConnection,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport * as appSettings from \"./applicationReducer\";\r\nimport * as connections from \"./connectionsReducer\";\r\nimport * as currentProject from \"./currentProjectReducer\";\r\nimport * as recentProjects from \"./recentProjectsReducer\";\r\nimport * as appError from \"./appErrorReducer\";\r\n\r\n/**\r\n * All application reducers\r\n * @member appSettings - Application Settings reducer\r\n * @member connections - Connections reducer\r\n * @member recentProjects - Recent Projects reducer\r\n * @member currentProject - Current Project reducer\r\n */\r\nexport default combineReducers({\r\n    appSettings: appSettings.reducer,\r\n    connections: connections.reducer,\r\n    recentProjects: recentProjects.reducer,\r\n    currentProject: currentProject.reducer,\r\n    appError: appError.reducer,\r\n});\r\n","import { ActionTypes } from \"../actions/actionTypes\";\r\nimport { IAppSettings } from \"../../models/applicationState\";\r\nimport { AnyAction } from \"../actions/actionCreators\";\r\n\r\n/**\r\n * Reducer for application settings. Actions handled:\r\n * TOGGLE_DEV_TOOLS_SUCCESS\r\n * REFRESH_APP_SUCCESS\r\n * @param state - Current app settings\r\n * @param action - Action that was dispatched\r\n */\r\nexport const reducer = (state: IAppSettings = null, action: AnyAction): IAppSettings => {\r\n    switch (action.type) {\r\n        case ActionTypes.TOGGLE_DEV_TOOLS_SUCCESS:\r\n            return { ...state, devToolsEnabled: action.payload };\r\n        case ActionTypes.REFRESH_APP_SUCCESS:\r\n            return { ...state };\r\n        case ActionTypes.SAVE_APP_SETTINGS_SUCCESS:\r\n            return { ...action.payload };\r\n        case ActionTypes.ENSURE_SECURITY_TOKEN_SUCCESS:\r\n            return { ...action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import _ from \"lodash\";\r\nimport { ActionTypes } from \"../actions/actionTypes\";\r\nimport { IConnection } from \"../../models/applicationState\";\r\nimport { AnyAction } from \"../actions/actionCreators\";\r\n\r\n/**\r\n * Reducer for application connections. Actions handled:\r\n * SAVE_CONNECTION_SUCCESS\r\n * DELETE_CONNECTION_SUCCESS\r\n * LOAD_PROJECT_SUCCESS\r\n * @param state - Current array of connections\r\n * @param action - Action that was dispatched\r\n */\r\nexport const reducer = (state: IConnection[] = [], action: AnyAction): IConnection[] => {\r\n    if (!state) {\r\n        state = [];\r\n    }\r\n\r\n    switch (action.type) {\r\n        case ActionTypes.SAVE_CONNECTION_SUCCESS:\r\n            return [\r\n                { ...action.payload },\r\n                ...state.filter((connection) => connection.id !== action.payload.id),\r\n            ];\r\n        case ActionTypes.DELETE_CONNECTION_SUCCESS:\r\n            return [...state.filter((connection) => connection.id !== action.payload.id)];\r\n        case ActionTypes.LOAD_PROJECT_SUCCESS:\r\n            const isSourceTargetEqual = action.payload.sourceConnection.id === action.payload.targetConnection.id;\r\n            if (isSourceTargetEqual) {\r\n                return [\r\n                    { ...action.payload.sourceConnection },\r\n                    ...state.filter((connection) => connection.id !== action.payload.sourceConnection.id),\r\n                ];\r\n            }\r\n\r\n            return [\r\n                { ...action.payload.sourceConnection },\r\n                { ...action.payload.targetConnection },\r\n                ...state.filter((connection) => {\r\n                    return connection.id !== action.payload.sourceConnection.id &&\r\n                        connection.id !== action.payload.targetConnection.id;\r\n                })];\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import _ from \"lodash\";\r\nimport { ActionTypes } from \"../actions/actionTypes\";\r\nimport { IProject } from \"../../models/applicationState\";\r\nimport { AnyAction } from \"../actions/actionCreators\";\r\n\r\n/**\r\n * Reducer for recent projects. Actions handled:\r\n * LOAD_PROJECT_SUCCESS\r\n * SAVE_PROJECT_SUCCESS\r\n * DELETE_PROJECT_SUCCESS\r\n * SAVE_CONNECTION_SUCCESS\r\n * @param state - Array of recent projects\r\n * @param action - Action that was dispatched\r\n */\r\nexport const reducer = (state: IProject[] = [], action: AnyAction): IProject[] => {\r\n    if (!state) {\r\n        state = [];\r\n    }\r\n\r\n    let newState: IProject[] = null;\r\n\r\n    switch (action.type) {\r\n        case ActionTypes.SAVE_PROJECT_SUCCESS:\r\n            return [\r\n                { ...action.payload },\r\n                ...state.filter((project) => project.id !== action.payload.id),\r\n            ];\r\n        case ActionTypes.DELETE_PROJECT_SUCCESS:\r\n            return [...state.filter((project) => project.id !== action.payload.id)];\r\n        case ActionTypes.SAVE_CONNECTION_SUCCESS:\r\n            newState = state.map((project) => {\r\n                const updatedProject = { ...project };\r\n                if (project.sourceConnection.id === action.payload.id) {\r\n                    updatedProject.sourceConnection = { ...action.payload };\r\n                }\r\n                if (project.targetConnection.id === action.payload.id) {\r\n                    updatedProject.targetConnection = { ...action.payload };\r\n                }\r\n                return updatedProject;\r\n            });\r\n            return newState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { ActionTypes } from \"../actions/actionTypes\";\r\nimport { AnyAction } from \"../actions/actionCreators\";\r\nimport { IAppError } from \"../../models/applicationState\";\r\n\r\n/**\r\n * App Error Reducer\r\n * Actions handled:\r\n *  SHOW_ERROR\r\n *  CLEAR_ERROR\r\n * @param {IAppError} state\r\n * @param {AnyAction} action\r\n * @returns {any}\r\n */\r\nexport const reducer = (state: IAppError = null, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case ActionTypes.SHOW_ERROR:\r\n            return {...action.payload};\r\n        case ActionTypes.CLEAR_ERROR:\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { IApplicationState } from \"../../models/applicationState\";\r\n\r\n/**\r\n * Initial state of application\r\n * @member appSettings - Application settings\r\n * @member connections - Connections\r\n * @member recentProjects - Recent projects\r\n * @member currentProject - Current project\r\n */\r\nconst initialState: IApplicationState = {\r\n    appSettings: {\r\n        devToolsEnabled: false,\r\n        securityTokens: [],\r\n    },\r\n    connections: [],\r\n    recentProjects: [],\r\n    currentProject: null,\r\n    appError: null,\r\n};\r\n\r\n/**\r\n * Instance of initial application state\r\n */\r\nexport default initialState;\r\n","import axios from \"axios\";\r\nimport { IAsset, AssetType } from \"../../models/applicationState\";\r\nimport { IAssetProvider } from \"./assetProviderFactory\";\r\nimport { AssetService } from \"../../services/assetService\";\r\nimport Guard from \"../../common/guard\";\r\nimport { createQueryString } from \"../../common/utils\";\r\n\r\n/**\r\n * Options for Bing Image Search\r\n * @member endpoint - The endpoint to use for the Bing Search API\r\n * @member apiKey - Bing Search API Key (Cognitive Services)\r\n * @member query - Query for Bing Search\r\n * @member aspectRatio - Aspect Ratio for desired images\r\n */\r\nexport interface IBingImageSearchOptions {\r\n    endpoint?: string;\r\n    apiKey: string;\r\n    query: string;\r\n    aspectRatio: BingImageSearchAspectRatio;\r\n    size?: BingImageSearchSize;\r\n    licenseType?: BingImageSearchLicenseType;\r\n}\r\n\r\n/**\r\n * Aspect Ratio for Bing Image Search\r\n */\r\nexport enum BingImageSearchAspectRatio {\r\n    Square = \"Square\",\r\n    Wide = \"Wide\",\r\n    Tall = \"Tall\",\r\n    All = \"All\",\r\n}\r\n\r\nexport enum BingImageSearchLicenseType {\r\n    All = \"All\",\r\n    Any = \"Any\",\r\n    Public = \"Public\",\r\n    Share = \"Share\",\r\n    ShareCommercially = \"ShareCommercially\",\r\n    Modify = \"Modify\",\r\n    ModifyCommercially = \"ModifyCommercially\",\r\n}\r\n\r\nexport enum BingImageSearchSize {\r\n    All = \"All\",\r\n    Small = \"Small\",\r\n    Medium = \"Medium\",\r\n    Large = \"Large\",\r\n    Wallpaper = \"Wallpaper\",\r\n}\r\n\r\n/**\r\n * Asset Provider for Bing Image Search\r\n */\r\nexport class BingImageSearch implements IAssetProvider {\r\n    public static DefaultApiUrl = \"https://api.cognitive.microsoft.com/bing\";\r\n\r\n    constructor(private options: IBingImageSearchOptions) {\r\n        Guard.null(options);\r\n    }\r\n\r\n    /**\r\n     * Retrieves assets from Bing Image Search based on options provided\r\n     */\r\n    public async getAssets(): Promise<IAsset[]> {\r\n        const query = {\r\n            q: this.options.query,\r\n            aspect: this.options.aspectRatio,\r\n            license: this.options.licenseType || BingImageSearchLicenseType.All,\r\n            size: this.options.size || BingImageSearchSize.All,\r\n        };\r\n\r\n        const baseUrl = this.options.endpoint || BingImageSearch.DefaultApiUrl;\r\n        const apiUrl = `${baseUrl}/v7.0/images/search?${createQueryString(query)}`;\r\n\r\n        const response = await axios.get(apiUrl, {\r\n            headers: {\r\n                \"Ocp-Apim-Subscription-Key\": this.options.apiKey,\r\n                \"Accept\": \"application/json\",\r\n            },\r\n        });\r\n\r\n        const items = response.data.value.map((item) => item.contentUrl);\r\n\r\n        return items\r\n            .map((filePath) => AssetService.createAssetFromFilePath(filePath))\r\n            .filter((asset) => asset.type !== AssetType.Unknown);\r\n    }\r\n}\r\n","import _ from \"lodash\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport { ExportProvider } from \"./exportProvider\";\r\nimport { IProject, IAssetMetadata, IExportProviderOptions } from \"../../models/applicationState\";\r\nimport Guard from \"../../common/guard\";\r\nimport HtmlFileReader from \"../../common/htmlFileReader\";\r\nimport { itemTemplate } from \"./pascalVOC/pascalVOCTemplates\";\r\nimport { interpolate } from \"../../common/strings\";\r\nimport { TFRecordsBuilder, FeatureType } from \"./tensorFlowRecords/tensorFlowBuilder\";\r\n\r\ninterface IImageInfo {\r\n    width: number;\r\n    height: number;\r\n    text: string[];\r\n    label: number[];\r\n    xmin: number[];\r\n    ymin: number[];\r\n    xmax: number[];\r\n    ymax: number[];\r\n    difficult: number[];\r\n    truncated: number[];\r\n    view: string[];\r\n}\r\n\r\n/**\r\n * @name - TFRecords Json Export Provider\r\n * @description - Exports a project into a single JSON file that include all configured assets\r\n */\r\nexport class TFRecordsExportProvider extends ExportProvider {\r\n    constructor(project: IProject, options: IExportProviderOptions) {\r\n        super(project, options);\r\n        Guard.null(options);\r\n    }\r\n\r\n    /**\r\n     * Export project to TensorFlow Records\r\n     */\r\n    public async export(): Promise<void> {\r\n        const allAssets = await this.getAssetsForExport();\r\n        const exportObject: any = { ...this.project };\r\n        exportObject.assets = _.keyBy(allAssets, (assetMetadata) => assetMetadata.asset.id);\r\n\r\n        // Create Export Folder\r\n        const exportFolderName = `${this.project.name.replace(/\\s/g, \"-\")}-TFRecords-export`;\r\n        await this.storageProvider.createContainer(exportFolderName);\r\n\r\n        await this.exportPBTXT(exportFolderName, this.project);\r\n        await this.exportRecords(exportFolderName, allAssets);\r\n    }\r\n\r\n    private async exportRecords(exportFolderName: string, allAssets: IAssetMetadata[]) {\r\n        return await allAssets.mapAsync(async (element) => {\r\n            return await this.exportSingleRecord(exportFolderName, element);\r\n        });\r\n    }\r\n\r\n    private async exportSingleRecord(exportFolderName: string, element: IAssetMetadata): Promise<void> {\r\n        return new Promise<void>(async (resolve, reject) => {\r\n            try {\r\n                const arrayBuffer = await HtmlFileReader.getAssetArray(element.asset);\r\n                const imageBuffer = new Uint8Array(arrayBuffer);\r\n\r\n                // Get Base64\r\n                const image64 = btoa(imageBuffer.reduce((data, byte) => data + String.fromCharCode(byte), \"\"));\r\n\r\n                const imageInfo: IImageInfo = {\r\n                    width: element.asset.size ? element.asset.size.width : 0,\r\n                    height: element.asset.size ? element.asset.size.height : 0,\r\n                    text: [],\r\n                    label: [],\r\n                    xmin: [],\r\n                    ymin: [],\r\n                    xmax: [],\r\n                    ymax: [],\r\n                    difficult: [],\r\n                    truncated: [],\r\n                    view: [],\r\n                };\r\n\r\n                if (!element.asset.size || element.asset.size.width === 0 || element.asset.size.height === 0) {\r\n                    await this.updateImageSizeInfo(image64, imageInfo);\r\n                }\r\n\r\n                // Get Array of all Box shaped tag for the Asset\r\n                this.updateAssetTagArrays(element, imageInfo);\r\n\r\n                // Generate TFRecord\r\n                const builder = new TFRecordsBuilder();\r\n\r\n                builder.addFeature(\"image/height\", FeatureType.Int64, imageInfo.height);\r\n                builder.addFeature(\"image/width\", FeatureType.Int64, imageInfo.width);\r\n                builder.addFeature(\"image/filename\", FeatureType.String, element.asset.name);\r\n                builder.addFeature(\"image/source_id\", FeatureType.String, element.asset.name);\r\n                builder.addFeature(\"image/key/sha256\", FeatureType.String, CryptoJS.SHA256(imageBuffer)\r\n                    .toString(CryptoJS.enc.Base64));\r\n                builder.addFeature(\"image/encoded\", FeatureType.Binary, imageBuffer);\r\n                builder.addFeature(\"image/format\", FeatureType.String, element.asset.name.split(\".\").pop());\r\n                builder.addArrayFeature(\"image/object/bbox/xmin\", FeatureType.Float, imageInfo.xmin);\r\n                builder.addArrayFeature(\"image/object/bbox/ymin\", FeatureType.Float, imageInfo.ymin);\r\n                builder.addArrayFeature(\"image/object/bbox/xmax\", FeatureType.Float, imageInfo.xmax);\r\n                builder.addArrayFeature(\"image/object/bbox/ymax\", FeatureType.Float, imageInfo.ymax);\r\n                builder.addArrayFeature(\"image/object/class/text\", FeatureType.String, imageInfo.text);\r\n                builder.addArrayFeature(\"image/object/class/label\", FeatureType.Int64, imageInfo.label);\r\n                builder.addArrayFeature(\"image/object/difficult\", FeatureType.Int64, imageInfo.difficult);\r\n                builder.addArrayFeature(\"image/object/truncated\", FeatureType.Int64, imageInfo.truncated);\r\n                builder.addArrayFeature(\"image/object/view\", FeatureType.String, imageInfo.view);\r\n\r\n                // Save TFRecords\r\n                const fileName = element.asset.name.split(\".\").slice(0, -1).join(\".\");\r\n                const fileNamePath = `${exportFolderName}/${fileName}.tfrecord`;\r\n                await this.writeTFRecords(fileNamePath, [builder.build()]);\r\n\r\n                resolve();\r\n            } catch (error) {\r\n                // Ignore the error at the moment\r\n                // TODO: Refactor ExportProvider abstract class export() method\r\n                //       to return Promise<object> with an object containing\r\n                //       the number of files succesfully exported out of total\r\n                console.log(`Error downloading ${element.asset.path} - ${error}`);\r\n                resolve();\r\n                // eject(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    private async writeTFRecords(fileNamePath: string, buffers: Buffer[]) {\r\n        // Get TFRecords buffer\r\n        const tfRecords = TFRecordsBuilder.buildTFRecords(buffers);\r\n\r\n        // Write TFRecords\r\n        await this.storageProvider.writeBinary(fileNamePath, tfRecords);\r\n    }\r\n\r\n    private async updateImageSizeInfo(image64: string, imageInfo: IImageInfo) {\r\n        if (image64.length > 10) {\r\n            const assetProps = await HtmlFileReader.readAssetAttributesWithBuffer(image64);\r\n            if (assetProps) {\r\n                imageInfo.width = assetProps.width;\r\n                imageInfo.height = assetProps.height;\r\n            } else {\r\n                console.log(\"imageInfo not found\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateAssetTagArrays(element: IAssetMetadata, imageInfo: IImageInfo) {\r\n        element.regions.filter((region) => region.boundingBox)\r\n            .forEach((region) => {\r\n                region.tags.forEach((tagName) => {\r\n                    const index = this.project.tags\r\n                        .findIndex((projectTag) => projectTag.name === tagName);\r\n\r\n                    imageInfo.text.push(tagName);\r\n                    imageInfo.label.push(index);\r\n                    imageInfo.xmin.push(region.boundingBox.left / imageInfo.width);\r\n                    imageInfo.ymin.push(region.boundingBox.top / imageInfo.height);\r\n                    imageInfo.xmax.push((region.boundingBox.left + region.boundingBox.width)\r\n                        / imageInfo.width);\r\n                    imageInfo.ymax.push((region.boundingBox.top + region.boundingBox.height)\r\n                        / imageInfo.height);\r\n                    imageInfo.difficult.push(0);\r\n                    imageInfo.truncated.push(0);\r\n                    imageInfo.view.push(\"Unspecified\");\r\n                });\r\n            });\r\n    }\r\n\r\n    private async exportPBTXT(exportFolderName: string, project: IProject) {\r\n        if (project.tags && project.tags.length > 0) {\r\n            // Save tf_label_map.pbtxt\r\n            const pbtxtFileName = `${exportFolderName}/tf_label_map.pbtxt`;\r\n\r\n            let id = 1;\r\n            const items = project.tags.map((element) => {\r\n                const params = {\r\n                    id: (id++).toString(),\r\n                    tag: element.name,\r\n                };\r\n\r\n                return interpolate(itemTemplate, params);\r\n            });\r\n\r\n            await this.storageProvider.writeText(pbtxtFileName, items.join(\"\"));\r\n        }\r\n    }\r\n}\r\n","import _ from \"lodash\";\r\nimport { ExportProvider, ExportAssetState, IExportResults } from \"./exportProvider\";\r\nimport Guard from \"../../common/guard\";\r\nimport {\r\n    IProject, IExportFormat, IAssetMetadata,\r\n    IBoundingBox, ISize, IExportProviderOptions,\r\n} from \"../../models/applicationState\";\r\nimport {\r\n    AzureCustomVisionService, IAzureCustomVisionServiceOptions, IAzureCustomVisionProject,\r\n    IAzureCustomVisionTag, IAzureCustomVisionRegion,\r\n} from \"./azureCustomVision/azureCustomVisionService\";\r\nimport HtmlFileReader from \"../../common/htmlFileReader\";\r\n\r\n/**\r\n * Options for Azure Custom Vision Service\r\n */\r\nexport interface IAzureCustomVisionExportOptions extends IExportProviderOptions {\r\n    assetState: ExportAssetState;\r\n    newOrExisting: NewOrExisting;\r\n    region: AzureRegion;\r\n    apiKey: string;\r\n    projectId?: string;\r\n    name?: string;\r\n    description?: string;\r\n    projectType?: string;\r\n    classificationType?: string;\r\n    domainId?: string;\r\n}\r\n\r\n/**\r\n * Enum for new or existing Custom Vision projects\r\n */\r\nexport interface ITagList {\r\n    [index: string]: IAzureCustomVisionTag;\r\n}\r\n\r\nexport enum NewOrExisting {\r\n    New = \"new\",\r\n    Existing = \"existing\",\r\n}\r\n\r\n/**\r\n * Azure regions\r\n */\r\nexport enum AzureRegion {\r\n    EastUS = \"eastus\",\r\n    EastUS2 = \"eastus2\",\r\n    NorthCentralUS = \"northcentralus\",\r\n    SouthCentralUS = \"southcentralus\",\r\n    WestUS2 = \"westus2\",\r\n    WestEurope = \"westeurope\",\r\n    NorthEurope = \"northeurope\",\r\n    SoutheastAsia = \"southeastasia\",\r\n    AustraliaEast = \"australiaeast\",\r\n    CentralIndia = \"centralindia\",\r\n    UKSouth = \"uksouth\",\r\n    JapanEast = \"japaneast\",\r\n}\r\n\r\n/**\r\n * @name - Azure Custom Vision Provider\r\n * @description - Exports a VoTT project into an Azure custom vision project\r\n */\r\nexport class AzureCustomVisionProvider extends ExportProvider<IAzureCustomVisionExportOptions> {\r\n    private customVisionService: AzureCustomVisionService;\r\n\r\n    constructor(project: IProject, options: IAzureCustomVisionExportOptions) {\r\n        super(project, options);\r\n        Guard.null(options);\r\n\r\n        if (!options.region) {\r\n            options.region = AzureRegion.SouthCentralUS;\r\n        }\r\n\r\n        const cusomVisionServiceOptions: IAzureCustomVisionServiceOptions = {\r\n            apiKey: options.apiKey,\r\n            baseUrl: `https://${options.region}.api.cognitive.microsoft.com/customvision/v3.3/Training`,\r\n        };\r\n        this.customVisionService = new AzureCustomVisionService(cusomVisionServiceOptions);\r\n    }\r\n\r\n    /**\r\n     * Exports the configured assets to the Azure Custom Vision service\r\n     * @returns The upload results\r\n     */\r\n    public async export(): Promise<IExportResults> {\r\n        const customVisionTags = await this.syncTags();\r\n        const assetsToExport = await this.getAssetsForExport();\r\n        const tagMap = _.keyBy(customVisionTags, \"name\");\r\n\r\n        const results = await assetsToExport.mapAsync(async (asset) => {\r\n            try {\r\n                await this.uploadAsset(asset, tagMap);\r\n                return {\r\n                    asset,\r\n                    success: true,\r\n                };\r\n            } catch (e) {\r\n                return {\r\n                    asset,\r\n                    success: false,\r\n                    error: e,\r\n                };\r\n            }\r\n        });\r\n\r\n        return {\r\n            completed: results.filter((r) => r.success),\r\n            errors: results.filter((r) => !r.success),\r\n            count: results.length,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a new azure custom vision project if a new project has been configured\r\n     * @param exportFormat - The export configuration options\r\n     */\r\n    public async save(exportFormat: IExportFormat): Promise<IAzureCustomVisionExportOptions> {\r\n        const customVisionOptions = exportFormat.providerOptions as IAzureCustomVisionExportOptions;\r\n\r\n        if (customVisionOptions.newOrExisting === NewOrExisting.Existing) {\r\n            return Promise.resolve(customVisionOptions);\r\n        }\r\n\r\n        let customVisionProject: IAzureCustomVisionProject = {\r\n            name: customVisionOptions.name,\r\n            description: customVisionOptions.description,\r\n            classificationType: customVisionOptions.classificationType,\r\n            domainId: customVisionOptions.domainId,\r\n            projectType: customVisionOptions.projectType,\r\n        };\r\n\r\n        customVisionProject = await this.customVisionService.create(customVisionProject);\r\n\r\n        return {\r\n            assetState: customVisionOptions.assetState,\r\n            region: customVisionOptions.region,\r\n            apiKey: customVisionOptions.apiKey,\r\n            projectId: customVisionProject.id,\r\n            newOrExisting: NewOrExisting.Existing,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates any new tags not already defined within the custom vision project\r\n     * @returns All tags from the custom vision project\r\n     */\r\n    private async syncTags(): Promise<IAzureCustomVisionTag[]> {\r\n        const customVisionOptions = this.project.exportFormat.providerOptions as IAzureCustomVisionExportOptions;\r\n        const customVisionTags = await this.customVisionService.getProjectTags(customVisionOptions.projectId);\r\n        const customVisionTagNames = _.keyBy(customVisionTags, \"name\");\r\n\r\n        const createTagTasks = await this.project.tags\r\n            .filter((projectTag) => {\r\n                return !customVisionTagNames[projectTag.name];\r\n            }).map((projectTag) => {\r\n                const newTag: IAzureCustomVisionTag = {\r\n                    name: projectTag.name,\r\n                };\r\n                return this.customVisionService.createTag(customVisionOptions.projectId, newTag);\r\n            });\r\n\r\n        const newTags = await Promise.all(createTagTasks);\r\n        return customVisionTags.concat(newTags);\r\n    }\r\n\r\n    /**\r\n     * Uploads the asset binary to azure custom vision service and configured tagged regions\r\n     * @param assetMetadata - The asset to upload\r\n     * @param tags - The global tag list from custom vision service\r\n     */\r\n    private async uploadAsset(assetMetadata: IAssetMetadata, tags: ITagList): Promise<void> {\r\n        const blob = await HtmlFileReader.getAssetBlob(assetMetadata.asset);\r\n\r\n        // Upload new image to the custom vision service\r\n        const newImage = await this.customVisionService.createImage(this.options.projectId, blob);\r\n\r\n        if (!newImage) {\r\n            return Promise.reject(`Error uploading asset binary with id \"${assetMetadata.asset.id}\"`);\r\n        }\r\n\r\n        const allRegions: IAzureCustomVisionRegion[] = [];\r\n\r\n        // Generate the regions for Azure Custom Vision\r\n        assetMetadata.regions.forEach((region) => {\r\n            if (region.boundingBox) {\r\n                region.tags.forEach((tagName) => {\r\n                    const customVisionTag = tags[tagName];\r\n                    if (customVisionTag) {\r\n                        const boundingBox = this.getBoundingBoxValue(assetMetadata.asset.size, region.boundingBox);\r\n                        const newRegion: IAzureCustomVisionRegion = {\r\n                            imageId: newImage.id,\r\n                            tagId: customVisionTag.id,\r\n                            ...boundingBox,\r\n                        };\r\n                        allRegions.push(newRegion);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // Associate regions with newly uploaded image\r\n        // Azure custom vision service API is smart enough to detect that an image already exists with the same binary\r\n        if (allRegions.length > 0) {\r\n            await this.customVisionService.createRegions(this.options.projectId, allRegions);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts absolute bounding box values to relative bounding box values\r\n     * @param size The actual size of the asset\r\n     * @param boundingBox The actual bounding box coordinates\r\n     */\r\n    private getBoundingBoxValue(size: ISize, boundingBox: IBoundingBox): IBoundingBox {\r\n        return {\r\n            left: boundingBox.left / size.width,\r\n            top: boundingBox.top / size.height,\r\n            width: boundingBox.width / size.width,\r\n            height: boundingBox.height / size.height,\r\n        };\r\n    }\r\n}\r\n","import axios, { AxiosRequestConfig } from \"axios\";\r\nimport { createQueryString } from \"../../../common/utils\";\r\nimport Guard from \"../../../common/guard\";\r\n\r\nexport interface IAzureCustomVisionServiceOptions {\r\n    baseUrl: string;\r\n    apiKey: string;\r\n}\r\n\r\nexport interface IAzureCustomVisionProject {\r\n    id?: string;\r\n    name: string;\r\n    description?: string;\r\n    projectType: string;\r\n    domainId: string;\r\n    classificationType: string;\r\n}\r\n\r\nexport interface IAzureCustomVisionTag {\r\n    id?: string;\r\n    name: string;\r\n    description?: string;\r\n    imageCount?: number;\r\n}\r\n\r\nexport interface IAzureCustomVisionImage {\r\n    id: string;\r\n    width: number;\r\n    height: number;\r\n    imageUri: string;\r\n    tags: [];\r\n    regions: [];\r\n}\r\n\r\nexport interface IAzureCustomVisionRegion {\r\n    imageId: string;\r\n    tagId: string;\r\n    left: number;\r\n    top: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\n/**\r\n * @name Azure Custom Vision Service\r\n * @description REST API wrapper for Azure Custom Vision service\r\n */\r\nexport class AzureCustomVisionService {\r\n    constructor(private options: IAzureCustomVisionServiceOptions) {\r\n        Guard.null(options);\r\n    }\r\n\r\n    /**\r\n     * Creates an Azure Custom Vision project\r\n     * @param project - The Azure Custom Vision Project settings\r\n     */\r\n    public async create(project: IAzureCustomVisionProject): Promise<IAzureCustomVisionProject> {\r\n        Guard.null(project);\r\n\r\n        const urlParams = {\r\n            name: project.name,\r\n            description: project.description,\r\n            projectType: project.projectType,\r\n            domainId: project.domainId,\r\n            classificationType: project.classificationType,\r\n        };\r\n\r\n        const url = `${this.options.baseUrl}/projects?${createQueryString(urlParams)}`;\r\n        const response = await axios.post(url, null, this.createRequestConfig());\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(\"Error creating new project\");\r\n        }\r\n\r\n        return response.data as IAzureCustomVisionProject;\r\n    }\r\n\r\n    /**\r\n     * Get the tags of a Azure Custom Vision project\r\n     * @param projectId The Azure Custom Vision project ID\r\n     */\r\n    public async getProjectTags(projectId: string): Promise<IAzureCustomVisionTag[]> {\r\n        Guard.empty(projectId);\r\n\r\n        const url = `${this.options.baseUrl}/projects/${projectId}/tags`;\r\n        const response = await axios.get(url, this.createRequestConfig());\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(\"Error retrieving project tags\");\r\n        }\r\n\r\n        return response.data as IAzureCustomVisionTag[];\r\n    }\r\n\r\n    /**\r\n     * Creates a new Azure Custom Vision Tag\r\n     * @param projectId The Azure Custom vision project id\r\n     * @param tag The tag to save\r\n     */\r\n    public async createTag(projectId: string, tag: IAzureCustomVisionTag): Promise<IAzureCustomVisionTag> {\r\n        Guard.empty(projectId);\r\n        Guard.null(tag);\r\n\r\n        const urlParams = {\r\n            name: tag.name,\r\n            description: tag.description,\r\n        };\r\n\r\n        const url = `${this.options.baseUrl}/projects/${projectId}/tags?${createQueryString(urlParams)}`;\r\n        const response = await axios.post(url, null, this.createRequestConfig());\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(\"Error saving tag\");\r\n        }\r\n\r\n        return response.data as IAzureCustomVisionTag;\r\n    }\r\n\r\n    /**\r\n     * Uploads a new image to an Azure Custom Vision project\r\n     * @param projectId The Azure Custom vision project id\r\n     * @param contents The asset binary contents\r\n     */\r\n    public async createImage(projectId: string, contents: File | Blob | ArrayBuffer): Promise<IAzureCustomVisionImage> {\r\n        Guard.empty(projectId);\r\n        Guard.null(contents);\r\n\r\n        const url = `${this.options.baseUrl}/projects/${projectId}/images`;\r\n        const config = this.createRequestConfig();\r\n        config.headers[\"Content-Type\"] = \"application/octet-stream\";\r\n        const response = await axios.post(url, contents, config);\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(\"Error saving image\");\r\n        }\r\n\r\n        if (!response.data.images || response.data.images.length === 0) {\r\n            throw new Error(\"Error uploading image\");\r\n        }\r\n\r\n        return response.data.images[0].image as IAzureCustomVisionImage;\r\n    }\r\n\r\n    /**\r\n     * Creates a new region with tags and associated it with an image\r\n     * @param projectId The Azure Custom vision project id\r\n     * @param regions The regions to create\r\n     */\r\n    public async createRegions(projectId: string, regions: IAzureCustomVisionRegion[]): Promise<void> {\r\n        Guard.empty(projectId);\r\n        Guard.null(regions);\r\n\r\n        const url = `${this.options.baseUrl}/projects/${projectId}/images/regions`;\r\n        const response = await axios.post(url, { regions }, this.createRequestConfig());\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(\"Error saving image regions\");\r\n        }\r\n    }\r\n\r\n    private createRequestConfig(): AxiosRequestConfig {\r\n        return {\r\n            headers: {\r\n                \"Training-key\": this.options.apiKey,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import Guard from \"../guard\";\r\n\r\n/**\r\n * Processes items in the array within the specified batch size (default: 5)\r\n * @param this The array to process\r\n * @param action The action to perform on each item in the array\r\n * @param batchSize The batch size for actions to perform in parallel (default: 5)\r\n */\r\nexport async function forEachAsync<T>(\r\n    this: T[],\r\n    action: (item: T) => Promise<void>,\r\n    batchSize: number = 5): Promise<void> {\r\n    Guard.null(this);\r\n    Guard.null(action);\r\n    Guard.expression(batchSize, (value) => value > 0);\r\n\r\n    const all: T[] = [...this];\r\n\r\n    while (all.length > 0) {\r\n        const batch: T[] = [];\r\n\r\n        while (all.length > 0 && batch.length < batchSize) {\r\n            batch.push(all.pop());\r\n        }\r\n\r\n        const tasks = batch.map((item) => action(item));\r\n        await Promise.all(tasks);\r\n    }\r\n}\r\n\r\n/**\r\n * Maps items in the array in async batches with the specified action\r\n * @param this The array to process\r\n * @param action The transformer action to perform on each item in the array\r\n * @param batchSize The batch size for actions to perform in parallel (default: 5);\r\n */\r\nexport async function mapAsync<T, R>(\r\n    this: T[],\r\n    action: (item: T) => Promise<R>,\r\n    batchSize: number = 5): Promise<R[]> {\r\n    Guard.null(this);\r\n    Guard.null(action);\r\n    Guard.expression(batchSize, (value) => value > 0);\r\n\r\n    let results: R[] = [];\r\n    const all: T[] = [...this];\r\n\r\n    while (all.length > 0) {\r\n        const batch: T[] = [];\r\n\r\n        while (all.length > 0 && batch.length < batchSize) {\r\n            batch.push(all.pop());\r\n        }\r\n\r\n        const tasks = batch.map((item) => action(item));\r\n        const batchResults = await Promise.all(tasks);\r\n        results = results.concat(batchResults);\r\n    }\r\n\r\n    return results;\r\n}\r\n","import Guard from \"../guard\";\r\n\r\n/**\r\n * Processes items in the map within the specified batch size (default: 5)\r\n * @param this The map to process\r\n * @param action The action to perform on each item in the map\r\n * @param batchSize The batch size for actions to perform in parallel (default: 5)\r\n */\r\nexport async function forEachAsync<K, V>(\r\n    this: Map<K, V>,\r\n    action: (value: V, key: K) => Promise<void>,\r\n    batchSize: number = 5): Promise<void> {\r\n    Guard.null(this);\r\n    Guard.null(action);\r\n    Guard.expression(batchSize, (value) => value > 0);\r\n\r\n    const all: Array<[K, V]> = [...this.entries()];\r\n\r\n    while (all.length > 0) {\r\n        const batch: Array<[K, V]> = [];\r\n\r\n        while (all.length > 0 && batch.length < batchSize) {\r\n            batch.push(all.pop());\r\n        }\r\n\r\n        const tasks = batch.map((item) => action(item[1], item[0]));\r\n        await Promise.all(tasks);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../node_modules/@fortawesome/fontawesome-free/css/all.css\";\r\nimport \"./assets/css/bootstrap-theme-slate.css\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport createReduxStore from \"./redux/store/store\";\r\nimport initialState from \"./redux/store/initialState\";\r\nimport { IApplicationState } from \"./models/applicationState\";\r\nimport registerProviders from \"./registerProviders\";\r\nimport registerMixins from \"./registerMixins\";\r\n\r\nimport { setUpAppInsights } from \"./telemetry\";\r\n\r\nsetUpAppInsights();\r\n\r\nregisterMixins();\r\nregisterProviders();\r\nconst defaultState: IApplicationState = initialState;\r\nconst store = createReduxStore(defaultState, true);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { forEachAsync as arrayForEachAsync, mapAsync } from \"./common/extensions/array\";\r\nimport { forEachAsync as mapForEachAsync } from \"./common/extensions/map\";\r\n\r\ndeclare global {\r\n    // tslint:disable-next-line:interface-name\r\n    interface Array<T> {\r\n        /**\r\n         * Processes items in the array within the specified batch size (default: 5)\r\n         * @param this The array to process\r\n         * @param action The action to perform on each item in the array\r\n         * @param batchSize The batch size for actions to perform in parallel (default: 5)\r\n         */\r\n        forEachAsync(action: (item: T) => Promise<void>, batchSize?: number): Promise<void>;\r\n\r\n        /**\r\n         * Maps items in the array in async batches with the specified action\r\n         * @param this The array to process\r\n         * @param action The transformer action to perform on each item in the array\r\n         * @param batchSize The batch size for actions to perform in parallel (default: 5);\r\n         */\r\n        mapAsync<R>(action: (item: T) => Promise<R>, batchSize?: number): Promise<R[]>;\r\n    }\r\n\r\n    // tslint:disable-next-line:interface-name\r\n    interface Map<K, V> {\r\n        /**\r\n         * Processes items in the map within the specified batch size (default: 5)\r\n         * @param this The map to process\r\n         * @param action The action to perform on each item in the map\r\n         * @param batchSize The batch size for actions to perform in parallel (default: 5)\r\n         */\r\n        forEachAsync(action: (value: V, key: K) => Promise<void>, batchSize?: number): Promise<void>;\r\n    }\r\n}\r\n\r\nexport default function registerMixins() {\r\n    if (!Array.prototype.forEachAsync) {\r\n        Array.prototype.forEachAsync = arrayForEachAsync;\r\n    }\r\n\r\n    if (!Array.prototype.mapAsync) {\r\n        Array.prototype.mapAsync = mapAsync;\r\n    }\r\n\r\n    if (!Map.prototype.forEachAsync) {\r\n        Map.prototype.forEachAsync = mapForEachAsync;\r\n    }\r\n}\r\n","import { ExportProviderFactory } from \"./providers/export/exportProviderFactory\";\r\nimport { PascalVOCExportProvider } from \"./providers/export/pascalVOC\";\r\nimport { TFRecordsExportProvider } from \"./providers/export/tensorFlowRecords\";\r\nimport { VottJsonExportProvider } from \"./providers/export/vottJson\";\r\nimport { CsvExportProvider } from \"./providers/export/csv\";\r\nimport { AssetProviderFactory } from \"./providers/storage/assetProviderFactory\";\r\nimport { AzureBlobStorage } from \"./providers/storage/azureBlobStorage\";\r\nimport { BingImageSearch } from \"./providers/storage/bingImageSearch\";\r\nimport { LocalFileSystemProxy } from \"./providers/storage/localFileSystemProxy\";\r\nimport { StorageProviderFactory } from \"./providers/storage/storageProviderFactory\";\r\nimport registerToolbar from \"./registerToolbar\";\r\nimport { strings } from \"./common/strings\";\r\nimport { HostProcessType } from \"./common/hostProcess\";\r\nimport { AzureCustomVisionProvider } from \"./providers/export/azureCustomVision\";\r\nimport { CntkExportProvider } from \"./providers/export/cntk\";\r\n\r\n/**\r\n * Registers storage, asset and export providers, as well as all toolbar items\r\n */\r\nexport default function registerProviders() {\r\n    // Storage Providers\r\n    StorageProviderFactory.register({\r\n        name: \"localFileSystemProxy\",\r\n        displayName: strings.connections.providers.local.title,\r\n        platformSupport: HostProcessType.Electron,\r\n        factory: (options) => new LocalFileSystemProxy(options),\r\n    });\r\n    StorageProviderFactory.register({\r\n        name: \"azureBlobStorage\",\r\n        displayName: strings.connections.providers.azureBlob.title,\r\n        factory: (options) => new AzureBlobStorage(options),\r\n    });\r\n\r\n    // Asset Providers\r\n    AssetProviderFactory.register({\r\n        name: \"localFileSystemProxy\",\r\n        displayName: strings.connections.providers.local.title,\r\n        platformSupport: HostProcessType.Electron,\r\n        factory: (options) => new LocalFileSystemProxy(options),\r\n    });\r\n    AssetProviderFactory.register({\r\n        name: \"azureBlobStorage\",\r\n        displayName: strings.connections.providers.azureBlob.title,\r\n        factory: (options) => new AzureBlobStorage(options),\r\n    });\r\n    AssetProviderFactory.register({\r\n        name: \"bingImageSearch\",\r\n        displayName: strings.connections.providers.bing.title,\r\n        factory: (options) => new BingImageSearch(options),\r\n    });\r\n\r\n    // Export Providers\r\n    ExportProviderFactory.register({\r\n        name: \"vottJson\",\r\n        displayName: strings.export.providers.vottJson.displayName,\r\n        factory: (project, options) => new VottJsonExportProvider(project, options),\r\n    });\r\n    ExportProviderFactory.register({\r\n        name: \"pascalVOC\",\r\n        displayName: strings.export.providers.pascalVoc.displayName,\r\n        factory: (project, options) => new PascalVOCExportProvider(project, options),\r\n    });\r\n    ExportProviderFactory.register({\r\n        name: \"tensorFlowRecords\",\r\n        displayName: strings.export.providers.tfRecords.displayName,\r\n        factory: (project, options) => new TFRecordsExportProvider(project, options),\r\n    });\r\n    ExportProviderFactory.register({\r\n        name: \"azureCustomVision\",\r\n        displayName: strings.export.providers.azureCV.displayName,\r\n        factory: (project, options) => new AzureCustomVisionProvider(project, options),\r\n    });\r\n    ExportProviderFactory.register({\r\n        name: \"cntk\",\r\n        displayName: strings.export.providers.cntk.displayName,\r\n        factory: (project, options) => new CntkExportProvider(project, options),\r\n    });\r\n    ExportProviderFactory.register({\r\n        name: \"csv\",\r\n        displayName: strings.export.providers.csv.displayName,\r\n        factory: (project, options) => new CsvExportProvider(project, options),\r\n    });\r\n\r\n    registerToolbar();\r\n}\r\n","import { applyMiddleware, createStore, Store } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"../reducers\";\r\nimport { IApplicationState } from \"../../models/applicationState\";\r\nimport { mergeInitialState } from \"../middleware/localStorage\";\r\nimport { createAppInsightsLogger } from \"../middleware/appInsights\";\r\nimport { Env } from \"../../common/environment\";\r\n\r\n/**\r\n * Creates initial redux store from initial application state\r\n * @param initialState - Initial state of application\r\n * @param useLocalStorage - Whether or not to use localStorage middleware\r\n */\r\nexport default function createReduxStore(\r\n    initialState?: IApplicationState,\r\n    useLocalStorage: boolean = false): Store {\r\n    const paths: string[] = [\"appSettings\", \"connections\", \"recentProjects\"];\r\n\r\n    let middlewares = [thunk, createAppInsightsLogger()];\r\n\r\n    if (useLocalStorage) {\r\n        const localStorage = require(\"../middleware/localStorage\");\r\n        const storage = localStorage.createLocalStorage({paths});\r\n        middlewares = [\r\n            ...middlewares,\r\n            storage,\r\n        ];\r\n    }\r\n\r\n    if (Env.get() === \"development\") {\r\n        const logger = require(\"redux-logger\");\r\n        const reduxImmutableStateInvariant = require(\"redux-immutable-state-invariant\");\r\n        middlewares = [\r\n            ...middlewares,\r\n            reduxImmutableStateInvariant.default(),\r\n            logger.createLogger(),\r\n        ];\r\n    }\r\n\r\n    return createStore(\r\n        rootReducer,\r\n        useLocalStorage ? mergeInitialState(initialState, paths) : initialState,\r\n        applyMiddleware(...middlewares),\r\n    );\r\n}\r\n","import { AnyAction, Dispatch, Middleware, MiddlewareAPI } from \"redux\";\r\nimport { trackReduxAction } from \"../../telemetry\";\r\n\r\n/**\r\n * return a middleware that send custom event to AppInsights tracking redux action\r\n */\r\nexport function createAppInsightsLogger(): Middleware {\r\n    return (store: MiddlewareAPI<Dispatch<AnyAction>>) => (next: Dispatch<AnyAction>) => (action: any) => {\r\n        trackReduxAction(action);\r\n        return next(action);\r\n    };\r\n}\r\n","export interface IDeferred<T> {\r\n    resolve(result?: T): void;\r\n    reject(err?: any): void;\r\n    then(value: T): Promise<T>;\r\n    catch(err: any): Promise<T>;\r\n}\r\n\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    public promise: Promise<T>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise<T>((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n\r\n        this.then = this.promise.then.bind(this.promise);\r\n        this.catch = this.promise.catch.bind(this.promise);\r\n    }\r\n    // tslint:disable-next-line\r\n    public resolve = (result?: T) => { };\r\n    // tslint:disable-next-line\r\n    public reject = (err?: any) => { };\r\n    public then = (value: T) => { throw new Error(\"Not implemented yet\"); };\r\n    public catch = (err: any) => { throw new Error(\"Not implemented yet\"); };\r\n}\r\n","import * as shortid from \"shortid\";\r\nimport { IpcProxyMessage } from \"../electron/common/ipcProxy\";\r\nimport { Deferred } from \"./deferred\";\r\n\r\nexport class IpcRendererProxy {\r\n\r\n    public static pending: { [id: string]: Deferred<any> } = {};\r\n\r\n    public static initialize() {\r\n        if (IpcRendererProxy.initialized) {\r\n            return;\r\n        }\r\n\r\n        IpcRendererProxy.ipcRenderer = (window as any).require(\"electron\").ipcRenderer;\r\n        IpcRendererProxy.ipcRenderer.on(\"ipc-renderer-proxy\", (sender, message: IpcProxyMessage<any>) => {\r\n            const deferred = IpcRendererProxy.pending[message.id];\r\n\r\n            if (!deferred) {\r\n                throw new Error(`Cannot find deferred with id '${message.id}'`);\r\n            }\r\n\r\n            if (message.error) {\r\n                deferred.reject(message.error);\r\n            } else {\r\n                deferred.resolve(message.result);\r\n            }\r\n\r\n            delete IpcRendererProxy.pending[message.id];\r\n        });\r\n\r\n        IpcRendererProxy.initialized = true;\r\n    }\r\n\r\n    public static send<TResult, TArgs>(type: string, args?: TArgs): Promise<TResult> {\r\n        IpcRendererProxy.initialize();\r\n\r\n        const id = shortid.generate();\r\n        const deferred = new Deferred<TResult>();\r\n        IpcRendererProxy.pending[id] = deferred;\r\n\r\n        const outgoingArgs: IpcProxyMessage<TArgs> = {\r\n            id,\r\n            type,\r\n            args,\r\n        };\r\n\r\n        IpcRendererProxy.ipcRenderer.send(\"ipc-main-proxy\", outgoingArgs);\r\n\r\n        return deferred.promise;\r\n    }\r\n    private static ipcRenderer;\r\n    private static initialized: boolean = false;\r\n}\r\n","import { IAsset, IConnection } from \"../../models/applicationState\";\r\nimport Guard from \"../../common/guard\";\r\nimport getHostProcess, { HostProcessType } from \"../../common/hostProcess\";\r\n\r\n/**\r\n * Interface for VoTT Asset Providers\r\n * @member initialize - Initializes or validates provider based on options\r\n * @member getAssets - Retrieves assets from provider\r\n */\r\nexport interface IAssetProvider {\r\n    initialize?(): Promise<void>;\r\n    getAssets(containerName?: string): Promise<IAsset[]>;\r\n    addDefaultPropsToNewConnection?(connection: IConnection): IConnection;\r\n}\r\n\r\n/**\r\n * Options for Asset Providers\r\n * @member name - Name of Asset Provider\r\n * @member displayName - Display Name of Asset Provider\r\n * @member description - Description of Asset Provider\r\n * @member platformSupport - Platform(s) supported by asset provider (electron, browser)\r\n * @member factory - Function that instantiates provider\r\n */\r\nexport interface IAssetProviderRegistrationOptions {\r\n    name: string;\r\n    displayName: string;\r\n    description?: string;\r\n    platformSupport?: HostProcessType;\r\n    factory: (options?: any) => IAssetProvider;\r\n}\r\n\r\n/**\r\n * @name - Asset Provider Factory\r\n * @description - Creates instance of Asset Providers based on request provider type\r\n */\r\nexport class AssetProviderFactory {\r\n\r\n    /**\r\n     * @returns - Dictionary of registered Asset Providers\r\n     */\r\n    public static get providers() {\r\n        return { ...AssetProviderFactory.providerRegistry };\r\n    }\r\n\r\n    /**\r\n     * Register an Asset Provider based on options\r\n     * @param options - Asset Provider options\r\n     */\r\n    public static register(options: IAssetProviderRegistrationOptions);\r\n    /**\r\n     * Register Asset provider based on name and a factory\r\n     * @param name - Name of Asset Provider\r\n     * @param factory - Function that instantiates Asset Provider\r\n     */\r\n    public static register(name: string, factory: (options?: any) => IAssetProvider);\r\n\r\n    /**\r\n     * Register Asset provider based on name and a factory\r\n     * @param name - Name of Asset Provider\r\n     * @param factory - Function that instantiates Asset Provider\r\n     */\r\n    public static register(nameOrOptions: any, factory?: (options?: any) => IAssetProvider) {\r\n        Guard.null(nameOrOptions);\r\n\r\n        let options: IAssetProviderRegistrationOptions = nameOrOptions as IAssetProviderRegistrationOptions;\r\n\r\n        if (typeof (nameOrOptions) === \"string\") {\r\n            Guard.null(factory);\r\n\r\n            options = {\r\n                name: nameOrOptions,\r\n                displayName: nameOrOptions,\r\n                factory,\r\n            };\r\n        }\r\n\r\n        if (!options.platformSupport) {\r\n            options.platformSupport = HostProcessType.All;\r\n        }\r\n\r\n        if ((options.platformSupport & getHostProcess().type) === 0) {\r\n            return;\r\n        }\r\n\r\n        AssetProviderFactory.providerRegistry[options.name] = options;\r\n    }\r\n\r\n    /**\r\n     * Create Asset Provider from provider type and options specified in connection\r\n     * @param connection - Connection for an Asset Provider\r\n     */\r\n    public static createFromConnection(connection: IConnection): IAssetProvider {\r\n        return this.create(connection.providerType, connection.providerOptions);\r\n    }\r\n\r\n    /**\r\n     * Create Asset Provider from registered Asset Provider name and options\r\n     * @param name - Name of Asset Provider\r\n     * @param options - Options for Asset Provider\r\n     */\r\n    public static create(name: string, options?: any): IAssetProvider {\r\n        Guard.empty(name);\r\n\r\n        const registrationOptions = AssetProviderFactory.providerRegistry[name];\r\n        if (!registrationOptions) {\r\n            throw new Error(`No asset provider has been registered with name '${name}'`);\r\n        }\r\n\r\n        return registrationOptions.factory(options);\r\n    }\r\n\r\n    private static providerRegistry: { [id: string]: IAssetProviderRegistrationOptions } = {};\r\n}\r\n","import { ExportAssetState } from \"../providers/export/exportProvider\";\r\nimport { IAssetPreviewSettings } from \"../react/components/common/assetPreview/assetPreview\";\r\n\r\n/**\r\n * @name - Application State\r\n * @description - Defines the root level application state\r\n * @member appSettings - Application wide settings\r\n * @member connections - Global list of connections available to application\r\n * @member recentProjects - List of recently used projects\r\n * @member currentProject - The active project being edited\r\n * @member appError - error in the app if any\r\n */\r\nexport interface IApplicationState {\r\n    appSettings: IAppSettings;\r\n    connections: IConnection[];\r\n    recentProjects: IProject[];\r\n    currentProject: IProject;\r\n    appError?: IAppError;\r\n}\r\n\r\n/**\r\n * @name - Application Error\r\n * @description - Defines error detail\r\n * @member title - title of the error to display\r\n * @member message - message of the error to display\r\n * @member errorCode - error category\r\n */\r\nexport interface IAppError {\r\n    errorCode: ErrorCode;\r\n    message: any;\r\n    title?: string;\r\n}\r\n\r\n/**\r\n * Enum of supported error codes\r\n */\r\nexport enum ErrorCode {\r\n    // Note that the value of the enum is in camelCase while\r\n    // the enum key is in Pascal casing\r\n    Unknown = \"unknown\",\r\n    GenericRenderError = \"genericRenderError\",\r\n    CanvasError = \"canvasError\",\r\n    V1ImportError = \"v1ImportError\",\r\n    ProjectUploadError = \"projectUploadError\",\r\n    ProjectDeleteError = \"projectDeleteError\",\r\n    ProjectInvalidJson = \"projectInvalidJson\",\r\n    ProjectInvalidSecurityToken = \"projectInvalidSecurityToken\",\r\n    ProjectDuplicateName = \"projectDuplicateName\",\r\n    SecurityTokenNotFound = \"securityTokenNotFound\",\r\n    ExportFormatNotFound = \"exportFormatNotFound\",\r\n    PasteRegionTooBig = \"pasteRegionTooBig\",\r\n    OverloadedKeyBinding = \"overloadedKeyBinding\",\r\n    ActiveLearningPredictionError = \"activeLearningPredictionError\",\r\n}\r\n\r\n/**\r\n * Base application error\r\n */\r\nexport class AppError extends Error implements IAppError {\r\n    public errorCode: ErrorCode;\r\n    public message: string;\r\n    public title?: string;\r\n\r\n    constructor(errorCode: ErrorCode, message: string, title: string = null) {\r\n        super(message);\r\n        this.errorCode = errorCode;\r\n        this.message = message;\r\n        this.title = title;\r\n    }\r\n}\r\n\r\n/**\r\n * @name - Provider Options\r\n * @description - Property map of key values used within a export / asset / storage provider\r\n */\r\nexport interface IProviderOptions {\r\n    [key: string]: any;\r\n}\r\n\r\n/**\r\n * @name - Application settings\r\n * @description - Defines the root level configuration options for the application\r\n * @member devToolsEnabled - Whether dev tools are current open and enabled\r\n * @member securityTokens - Token used to encrypt sensitive project settings\r\n */\r\nexport interface IAppSettings {\r\n    devToolsEnabled: boolean;\r\n    securityTokens: ISecurityToken[];\r\n    thumbnailSize?: ISize;\r\n}\r\n\r\n/**\r\n * @name - Project\r\n * @description - Defines the structure of a VoTT project\r\n * @member id - Unique identifier\r\n * @member name - User defined name\r\n * @member securityToken - The Base64 encoded token used to encrypt sensitive project data\r\n * @member description - User defined description\r\n * @member tags - User defined list of tags\r\n * @member sourceConnection - Full source connection details\r\n * @member targetConnection - Full target connection details\r\n * @member exportFormat - Full export format definition\r\n * @member assets - Map of assets within a project\r\n * @member autoSave - Whether or not the project will automatically save updates to the underlying target\r\n */\r\nexport interface IProject {\r\n    id: string;\r\n    name: string;\r\n    version: string;\r\n    useSecurityToken: boolean;\r\n    securityToken?: string;\r\n    description?: string;\r\n    tags: ITag[];\r\n    sourceConnection: IConnection;\r\n    targetConnection: IConnection;\r\n    exportFormat: IExportFormat;\r\n    videoSettings: IProjectVideoSettings;\r\n    activeLearningSettings: IActiveLearningSettings;\r\n    autoSave: boolean;\r\n    assets?: { [index: string]: IAsset };\r\n    lastVisitedAssetId?: string;\r\n}\r\n\r\n/**\r\n * @name - FileInfo\r\n * @description - Defines the file information and content for V1 projects\r\n * @member content - The content of a file (JSON string)\r\n * @member file - The File object point to the V1 project file\r\n */\r\nexport interface IFileInfo {\r\n    content: string | ArrayBuffer;\r\n    file: File;\r\n}\r\n\r\n/**\r\n * @name - Tag\r\n * @description - Defines the structure of a VoTT tag\r\n * @member name - User defined name\r\n * @member color - User editable color associated to tag\r\n */\r\nexport interface ITag {\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\n/**\r\n * @enum LOCAL - Local storage type\r\n * @enum CLOUD - Cloud storage type\r\n * @enum OTHER - Any other storage type\r\n */\r\nexport enum StorageType {\r\n    Local = \"local\",\r\n    Cloud = \"cloud\",\r\n    Other = \"other\",\r\n}\r\n\r\n/**\r\n * @name - Connection\r\n * @description - Defines a reusable data source definition for projects\r\n * @member id - Unique identifier for connection\r\n * @member name - User defined name\r\n * @member description - User defined short description\r\n * @member providerType - The underlying storage type (Local File System, Azure Blob Storage, etc)\r\n * @member providerOptions - Provider specific options used to connect to the data source\r\n */\r\nexport interface IConnection {\r\n    id: string;\r\n    name: string;\r\n    description?: string;\r\n    providerType: string;\r\n    providerOptions: IProviderOptions | ISecureString;\r\n}\r\n\r\n/**\r\n * @name - Export Provider Options\r\n * @description - options defining the type of asset to export\r\n * @member assetState - export asset with the following state\r\n */\r\nexport interface IExportProviderOptions extends IProviderOptions {\r\n    assetState: ExportAssetState;\r\n}\r\n\r\n/**\r\n * @name - Export Format\r\n * @description - Defines the settings for how project data is exported into commonly used format\r\n * @member id - Unique identifier for export format\r\n * @member name - Name of export format\r\n * @member providerType - The export format type (TF Records, YOLO, CSV, etc)\r\n * @member providerOptions - The provider specific option required to export data\r\n */\r\nexport interface IExportFormat {\r\n    providerType: string;\r\n    providerOptions: IExportProviderOptions | ISecureString;\r\n}\r\n\r\n/**\r\n * @name - Video Tagging Settings for the project\r\n * @description - Defines the video settings within a VoTT project\r\n * @member frameExtractionRate - Extraction rate for a video (number of frames per second of video)\r\n */\r\nexport interface IProjectVideoSettings {\r\n    frameExtractionRate: number;\r\n}\r\n\r\n/**\r\n * @name - Model Path Type\r\n * @description - Defines the mechanism to load the TF.js model for Active Learning\r\n * @member Coco - Specifies the default/generic pre-trained Coco-SSD model\r\n * @member File - Specifies to load a custom model from filesystem\r\n * @member Url - Specifies to load a custom model from a web server\r\n */\r\nexport enum ModelPathType {\r\n    Coco = \"coco\",\r\n    File = \"file\",\r\n    Url = \"url\",\r\n}\r\n\r\n/**\r\n * Properties for additional project settings\r\n * @member activeLearningSettings - Active Learning settings\r\n */\r\nexport interface IAdditionalPageSettings extends IAssetPreviewSettings {\r\n    activeLearningSettings: IActiveLearningSettings;\r\n}\r\n\r\n/**\r\n * @name - Active Learning Settings for the project\r\n * @description - Defines the active learning settings within a VoTT project\r\n * @member modelPathType - Model loading type [\"coco\", \"file\", \"url\"]\r\n * @member modelPath - Local filesystem path to the TF.js model\r\n * @member modelUrl - Web url to the TF.js model\r\n * @member autoDetect - Flag for automatically call the model while opening a new asset\r\n * @member predictTag - Flag to predict also the tag name other than the rectangle coordinates only\r\n */\r\nexport interface IActiveLearningSettings {\r\n    modelPathType: ModelPathType;\r\n    modelPath?: string;\r\n    modelUrl?: string;\r\n    autoDetect: boolean;\r\n    predictTag: boolean;\r\n}\r\n\r\n/**\r\n * @name - Asset Video Settings\r\n * @description - Defines the settings for video assets\r\n * @member shouldAutoPlayVideo - true if the video should auto play when loaded, false otherwise\r\n * @member posterSource - Source location of the image to display when the video is not playing,\r\n * null for default (first frame of video)\r\n */\r\nexport interface IAssetVideoSettings {\r\n    shouldAutoPlayVideo: boolean;\r\n    posterSource: string;\r\n    shouldShowPlayControls: boolean;\r\n}\r\n\r\n/**\r\n * @name - Asset\r\n * @description - Defines an asset within a VoTT project\r\n * @member id - Unique identifier for asset\r\n * @member type - Type of asset (Image, Video, etc)\r\n * @member name - Generated name for asset\r\n * @member path - Relative path to asset within the underlying data source\r\n * @member size - Size / dimensions of asset\r\n * @member format - The asset format (jpg, png, mp4, etc)\r\n */\r\nexport interface IAsset {\r\n    id: string;\r\n    type: AssetType;\r\n    state: AssetState;\r\n    name: string;\r\n    path: string;\r\n    size: ISize;\r\n    format?: string;\r\n    timestamp?: number;\r\n    parent?: IAsset;\r\n    predicted?: boolean;\r\n}\r\n\r\n/**\r\n * @name - Asset Metadata\r\n * @description - Format to store asset metadata for each asset within a project\r\n * @member asset - References an asset within the project\r\n * @member regions - The list of regions drawn on the asset\r\n */\r\nexport interface IAssetMetadata {\r\n    asset: IAsset;\r\n    regions: IRegion[];\r\n    version: string;\r\n}\r\n\r\n/**\r\n * @name - Size\r\n * @description - Defines the size and/or diminsion for an asset\r\n * @member width - The actual width of an asset\r\n * @member height - The actual height of an asset\r\n */\r\nexport interface ISize {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\n/**\r\n * @name - Region\r\n * @description - Defines a region within an asset\r\n * @member id - Unique identifier for this region\r\n * @member type - Defines the type of region\r\n * @member tags - Defines a list of tags applied to a region\r\n * @member points - Defines a list of points that define a region\r\n */\r\nexport interface IRegion {\r\n    id: string;\r\n    type: RegionType;\r\n    tags: string[];\r\n    points?: IPoint[];\r\n    boundingBox?: IBoundingBox;\r\n}\r\n\r\n/**\r\n * @name - Bounding Box\r\n * @description - Defines the tag usage within a bounding box region\r\n * @member left - Defines the left x boundary for the start of the bounding box\r\n * @member top - Defines the top y boundary for the start of the boudning box\r\n * @member width - Defines the width of the bounding box\r\n * @member height - Defines the height of the bounding box\r\n */\r\nexport interface IBoundingBox {\r\n    left: number;\r\n    top: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\n/**\r\n * @name - Point\r\n * @description - Defines a point / coordinate within a region\r\n * @member x - The x value relative to the asset\r\n * @member y - The y value relative to the asset\r\n */\r\nexport interface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\n/**\r\n * @name - Asset Type\r\n * @description - Defines the type of asset within a project\r\n * @member Image - Specifies an asset as an image\r\n * @member Video - Specifies an asset as a video\r\n */\r\nexport enum AssetType {\r\n    Unknown = 0,\r\n    Image = 1,\r\n    Video = 2,\r\n    VideoFrame = 3,\r\n    TFRecord = 4,\r\n}\r\n\r\n/**\r\n * @name - Asset State\r\n * @description - Defines the state of the asset with regard to the tagging process\r\n * @member NotVisited - Specifies as asset that has not yet been visited or tagged\r\n * @member Visited - Specifies an asset has been visited, but not yet tagged\r\n * @member Tagged - Specifies an asset has been visited and tagged\r\n */\r\nexport enum AssetState {\r\n    NotVisited = 0,\r\n    Visited = 1,\r\n    Tagged = 2,\r\n}\r\n\r\n/**\r\n * @name - Region Type\r\n * @description - Defines the region type within the asset metadata\r\n * @member Square - Specifies a region as a square\r\n * @member Rectangle - Specifies a region as a rectangle\r\n * @member Polygon - Specifies a region as a multi-point polygon\r\n */\r\nexport enum RegionType {\r\n    Polyline = \"POLYLINE\",\r\n    Point = \"POINT\",\r\n    Rectangle = \"RECTANGLE\",\r\n    Polygon = \"POLYGON\",\r\n    Square = \"SQUARE\",\r\n}\r\n\r\nexport enum EditorMode {\r\n    Rectangle = \"RECT\",\r\n    Polygon = \"POLYGON\",\r\n    Polyline = \"POLYLINE\",\r\n    Point = \"POINT\",\r\n    Select = \"SELECT\",\r\n    CopyRect = \"COPYRECT\",\r\n    None = \"NONE\",\r\n}\r\n\r\nexport interface ISecureString {\r\n    encrypted: string;\r\n}\r\n\r\nexport interface ISecurityToken {\r\n    name: string;\r\n    key: string;\r\n}\r\n\r\nexport interface ITFRecordMetadata {\r\n    width: number;\r\n    height: number;\r\n    xminArray: number[];\r\n    yminArray: number[];\r\n    xmaxArray: number[];\r\n    ymaxArray: number[];\r\n    textArray: string[];\r\n}\r\n","/**\r\n * Constants used throughout application\r\n */\r\nexport const constants = {\r\n    projectFileExtension: \".vott\",\r\n    assetMetadataFileExtension: \"-asset.json\",\r\n    exportFileExtension: \"-export.json\",\r\n};\r\n","/* eslint-disable */\r\n\r\n/**\r\n * @fileoverview\r\n * @enhanceable\r\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\r\n *     field starts with 'MSG_' and isn't a translatable message.\r\n * @public\r\n */\r\n// GENERATED CODE -- DO NOT EDIT!\r\n\r\nvar jspb = require('google-protobuf');\r\nvar goog = jspb;\r\nvar global = Function('return this')();\r\n\r\ngoog.exportSymbol('proto.tensorflow.BytesList', null, global);\r\ngoog.exportSymbol('proto.tensorflow.Feature', null, global);\r\ngoog.exportSymbol('proto.tensorflow.FeatureList', null, global);\r\ngoog.exportSymbol('proto.tensorflow.FeatureLists', null, global);\r\ngoog.exportSymbol('proto.tensorflow.Features', null, global);\r\ngoog.exportSymbol('proto.tensorflow.FloatList', null, global);\r\ngoog.exportSymbol('proto.tensorflow.Int64List', null, global);\r\ngoog.exportSymbol('proto.tensorflow.TFRecordsImageMessage', null, global);\r\n\r\n/**\r\n * Generated by JsPbCodeGenerator.\r\n * @param {Array=} opt_data Optional initial data array, typically from a\r\n * server response, or constructed directly in Javascript. The array is used\r\n * in place and becomes part of the constructed object. It is not cloned.\r\n * If no data is provided, the constructed object will be empty, but still\r\n * valid.\r\n * @extends {jspb.Message}\r\n * @constructor\r\n */\r\nproto.tensorflow.BytesList = function(opt_data) {\r\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.BytesList.repeatedFields_, null);\r\n};\r\ngoog.inherits(proto.tensorflow.BytesList, jspb.Message);\r\nif (goog.DEBUG && !COMPILED) {\r\n  proto.tensorflow.BytesList.displayName = 'proto.tensorflow.BytesList';\r\n}\r\n/**\r\n * List of repeated fields within this message type.\r\n * @private {!Array<number>}\r\n * @const\r\n */\r\nproto.tensorflow.BytesList.repeatedFields_ = [1];\r\n\r\n\r\n\r\nif (jspb.Message.GENERATE_TO_OBJECT) {\r\n/**\r\n * Creates an object representation of this proto suitable for use in Soy templates.\r\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\r\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\r\n * For the list of reserved names please see:\r\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\r\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\r\n *     for transitional soy proto support: http://goto/soy-param-migration\r\n * @return {!Object}\r\n */\r\nproto.tensorflow.BytesList.prototype.toObject = function(opt_includeInstance) {\r\n  return proto.tensorflow.BytesList.toObject(opt_includeInstance, this);\r\n};\r\n\r\n\r\n/**\r\n * Static version of the {@see toObject} method.\r\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\r\n *     instance for transitional soy proto support:\r\n *     http://goto/soy-param-migration\r\n * @param {!proto.tensorflow.BytesList} msg The msg instance to transform.\r\n * @return {!Object}\r\n * @suppress {unusedLocalVariables} f is only used for nested messages\r\n */\r\nproto.tensorflow.BytesList.toObject = function(includeInstance, msg) {\r\n  var f, obj = {\r\n    valueList: msg.getValueList_asB64()\r\n  };\r\n\r\n  if (includeInstance) {\r\n    obj.$jspbMessageInstance = msg;\r\n  }\r\n  return obj;\r\n};\r\n}\r\n\r\n\r\n/**\r\n * Deserializes binary data (in protobuf wire format).\r\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\r\n * @return {!proto.tensorflow.BytesList}\r\n */\r\nproto.tensorflow.BytesList.deserializeBinary = function(bytes) {\r\n  var reader = new jspb.BinaryReader(bytes);\r\n  var msg = new proto.tensorflow.BytesList;\r\n  return proto.tensorflow.BytesList.deserializeBinaryFromReader(msg, reader);\r\n};\r\n\r\n\r\n/**\r\n * Deserializes binary data (in protobuf wire format) from the\r\n * given reader into the given message object.\r\n * @param {!proto.tensorflow.BytesList} msg The message object to deserialize into.\r\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\r\n * @return {!proto.tensorflow.BytesList}\r\n */\r\nproto.tensorflow.BytesList.deserializeBinaryFromReader = function(msg, reader) {\r\n  while (reader.nextField()) {\r\n    if (reader.isEndGroup()) {\r\n      break;\r\n    }\r\n    var field = reader.getFieldNumber();\r\n    switch (field) {\r\n    case 1:\r\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\r\n      msg.addValue(value);\r\n      break;\r\n    default:\r\n      reader.skipField();\r\n      break;\r\n    }\r\n  }\r\n  return msg;\r\n};\r\n\r\n\r\n/**\r\n * Serializes the message to binary data (in protobuf wire format).\r\n * @return {!Uint8Array}\r\n */\r\nproto.tensorflow.BytesList.prototype.serializeBinary = function() {\r\n  var writer = new jspb.BinaryWriter();\r\n  proto.tensorflow.BytesList.serializeBinaryToWriter(this, writer);\r\n  return writer.getResultBuffer();\r\n};\r\n\r\n\r\n/**\r\n * Serializes the given message to binary data (in protobuf wire\r\n * format), writing to the given BinaryWriter.\r\n * @param {!proto.tensorflow.BytesList} message\r\n * @param {!jspb.BinaryWriter} writer\r\n * @suppress {unusedLocalVariables} f is only used for nested messages\r\n */\r\nproto.tensorflow.BytesList.serializeBinaryToWriter = function(message, writer) {\r\n  var f = undefined;\r\n  f = message.getValueList_asU8();\r\n  if (f.length > 0) {\r\n    writer.writeRepeatedBytes(\r\n      1,\r\n      f\r\n    );\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * repeated bytes value = 1;\r\n * @return {!(Array<!Uint8Array>|Array<string>)}\r\n */\r\nproto.tensorflow.BytesList.prototype.getValueList = function() {\r\n  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));\r\n};\r\n\r\n\r\n/**\r\n * repeated bytes value = 1;\r\n * This is a type-conversion wrapper around `getValueList()`\r\n * @return {!Array<string>}\r\n */\r\nproto.tensorflow.BytesList.prototype.getValueList_asB64 = function() {\r\n  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(\r\n      this.getValueList()));\r\n};\r\n\r\n\r\n/**\r\n * repeated bytes value = 1;\r\n * Note that Uint8Array is not supported on all browsers.\r\n * @see http://caniuse.com/Uint8Array\r\n * This is a type-conversion wrapper around `getValueList()`\r\n * @return {!Array<!Uint8Array>}\r\n */\r\nproto.tensorflow.BytesList.prototype.getValueList_asU8 = function() {\r\n  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(\r\n      this.getValueList()));\r\n};\r\n\r\n\r\n/** @param {!(Array<!Uint8Array>|Array<string>)} value */\r\nproto.tensorflow.BytesList.prototype.setValueList = function(value) {\r\n  jspb.Message.setField(this, 1, value || []);\r\n};\r\n\r\n\r\n/**\r\n * @param {!(string|Uint8Array)} value\r\n * @param {number=} opt_index\r\n */\r\nproto.tensorflow.BytesList.prototype.addValue = function(value, opt_index) {\r\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\r\n};\r\n\r\n\r\nproto.tensorflow.BytesList.prototype.clearValueList = function() {\r\n  this.setValueList([]);\r\n};\r\n\r\n\r\n\r\n/**\r\n * Generated by JsPbCodeGenerator.\r\n * @param {Array=} opt_data Optional initial data array, typically from a\r\n * server response, or constructed directly in Javascript. The array is used\r\n * in place and becomes part of the constructed object. It is not cloned.\r\n * If no data is provided, the constructed object will be empty, but still\r\n * valid.\r\n * @extends {jspb.Message}\r\n * @constructor\r\n */\r\nproto.tensorflow.FloatList = function(opt_data) {\r\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.FloatList.repeatedFields_, null);\r\n};\r\ngoog.inherits(proto.tensorflow.FloatList, jspb.Message);\r\nif (goog.DEBUG && !COMPILED) {\r\n  proto.tensorflow.FloatList.displayName = 'proto.tensorflow.FloatList';\r\n}\r\n/**\r\n * List of repeated fields within this message type.\r\n * @private {!Array<number>}\r\n * @const\r\n */\r\nproto.tensorflow.FloatList.repeatedFields_ = [1];\r\n\r\n\r\n\r\nif (jspb.Message.GENERATE_TO_OBJECT) {\r\n/**\r\n * Creates an object representation of this proto suitable for use in Soy templates.\r\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\r\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\r\n * For the list of reserved names please see:\r\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\r\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\r\n *     for transitional soy proto support: http://goto/soy-param-migration\r\n * @return {!Object}\r\n */\r\nproto.tensorflow.FloatList.prototype.toObject = function(opt_includeInstance) {\r\n  return proto.tensorflow.FloatList.toObject(opt_includeInstance, this);\r\n};\r\n\r\n\r\n/**\r\n * Static version of the {@see toObject} method.\r\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\r\n *     instance for transitional soy proto support:\r\n *     http://goto/soy-param-migration\r\n * @param {!proto.tensorflow.FloatList} msg The msg instance to transform.\r\n * @return {!Object}\r\n * @suppress {unusedLocalVariables} f is only used for nested messages\r\n */\r\nproto.tensorflow.FloatList.toObject = function(includeInstance, msg) {\r\n  var f, obj = {\r\n    valueList: jspb.Message.getRepeatedFloatingPointField(msg, 1)\r\n  };\r\n\r\n  if (includeInstance) {\r\n    obj.$jspbMessageInstance = msg;\r\n  }\r\n  return obj;\r\n};\r\n}\r\n\r\n\r\n/**\r\n * Deserializes binary data (in protobuf wire format).\r\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\r\n * @return {!proto.tensorflow.FloatList}\r\n */\r\nproto.tensorflow.FloatList.deserializeBinary = function(bytes) {\r\n  var reader = new jspb.BinaryReader(bytes);\r\n  var msg = new proto.tensorflow.FloatList;\r\n  return proto.tensorflow.FloatList.deserializeBinaryFromReader(msg, reader);\r\n};\r\n\r\n\r\n/**\r\n * Deserializes binary data (in protobuf wire format) from the\r\n * given reader into the given message object.\r\n * @param {!proto.tensorflow.FloatList} msg The message object to deserialize into.\r\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\r\n * @return {!proto.tensorflow.FloatList}\r\n */\r\nproto.tensorflow.FloatList.deserializeBinaryFromReader = function(msg, reader) {\r\n  while (reader.nextField()) {\r\n    if (reader.isEndGroup()) {\r\n      break;\r\n    }\r\n    var field = reader.getFieldNumber();\r\n    switch (field) {\r\n    case 1:\r\n      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());\r\n      msg.setValueList(value);\r\n      break;\r\n    default:\r\n      reader.skipField();\r\n      break;\r\n    }\r\n  }\r\n  return msg;\r\n};\r\n\r\n\r\n/**\r\n * Serializes the message to binary data (in protobuf wire format).\r\n * @return {!Uint8Array}\r\n */\r\nproto.tensorflow.FloatList.prototype.serializeBinary = function() {\r\n  var writer = new jspb.BinaryWriter();\r\n  proto.tensorflow.FloatList.serializeBinaryToWriter(this, writer);\r\n  return writer.getResultBuffer();\r\n};\r\n\r\n\r\n/**\r\n * Serializes the given message to binary data (in protobuf wire\r\n * format), writing to the given BinaryWriter.\r\n * @param {!proto.tensorflow.FloatList} message\r\n * @param {!jspb.BinaryWriter} writer\r\n * @suppress {unusedLocalVariables} f is only used for nested messages\r\n */\r\nproto.tensorflow.FloatList.serializeBinaryToWriter = function(message, writer) {\r\n  var f = undefined;\r\n  f = message.getValueList();\r\n  if (f.length > 0) {\r\n    writer.writePackedFloat(\r\n      1,\r\n      f\r\n    );\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * repeated float value = 1;\r\n * @return {!Array<number>}\r\n */\r\nproto.tensorflow.FloatList.prototype.getValueList = function() {\r\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));\r\n};\r\n\r\n\r\n/** @param {!Array<number>} value */\r\nproto.tensorflow.FloatList.prototype.setValueList = function(value) {\r\n  jspb.Message.setField(this, 1, value || []);\r\n};\r\n\r\n\r\n/**\r\n * @param {!number} value\r\n * @param {number=} opt_index\r\n */\r\nproto.tensorflow.FloatList.prototype.addValue = function(value, opt_index) {\r\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\r\n};\r\n\r\n\r\nproto.tensorflow.FloatList.prototype.clearValueList = function() {\r\n  this.setValueList([]);\r\n};\r\n\r\n\r\n\r\n/**\r\n * Generated by JsPbCodeGenerator.\r\n * @param {Array=} opt_data Optional initial data array, typically from a\r\n * server response, or constructed directly in Javascript. The array is used\r\n * in place and becomes part of the constructed object. It is not cloned.\r\n * If no data is provided, the constructed object will be empty, but still\r\n * valid.\r\n * @extends {jspb.Message}\r\n * @constructor\r\n */\r\nproto.tensorflow.Int64List = function(opt_data) {\r\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.Int64List.repeatedFields_, null);\r\n};\r\ngoog.inherits(proto.tensorflow.Int64List, jspb.Message);\r\nif (goog.DEBUG && !COMPILED) {\r\n  proto.tensorflow.Int64List.displayName = 'proto.tensorflow.Int64List';\r\n}\r\n/**\r\n * List of repeated fields within this message type.\r\n * @private {!Array<number>}\r\n * @const\r\n */\r\nproto.tensorflow.Int64List.repeatedFields_ = [1];\r\n\r\n\r\n\r\nif (jspb.Message.GENERATE_TO_OBJECT) {\r\n/**\r\n * Creates an object representation of this proto suitable for use in Soy templates.\r\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\r\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\r\n * For the list of reserved names please see:\r\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\r\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\r\n *     for transitional soy proto support: http://goto/soy-param-migration\r\n * @return {!Object}\r\n */\r\nproto.tensorflow.Int64List.prototype.toObject = function(opt_includeInstance) {\r\n  return proto.tensorflow.Int64List.toObject(opt_includeInstance, this);\r\n};\r\n\r\n\r\n/**\r\n * Static version of the {@see toObject} method.\r\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\r\n *     instance for transitional soy proto support:\r\n *     http://goto/soy-param-migration\r\n * @param {!proto.tensorflow.Int64List} msg The msg instance to transform.\r\n * @return {!Object}\r\n * @suppress {unusedLocalVariables} f is only used for nested messages\r\n */\r\nproto.tensorflow.Int64List.toObject = function(includeInstance, msg) {\r\n  var f, obj = {\r\n    valueList: jspb.Message.getRepeatedField(msg, 1)\r\n  };\r\n\r\n  if (includeInstance) {\r\n    obj.$jspbMessageInstance = msg;\r\n  }\r\n  return obj;\r\n};\r\n}\r\n\r\n\r\n/**\r\n * Deserializes binary data (in protobuf wire format).\r\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\r\n * @return {!proto.tensorflow.Int64List}\r\n */\r\nproto.tensorflow.Int64List.deserializeBinary = function(bytes) {\r\n  var reader = new jspb.BinaryReader(bytes);\r\n  var msg = new proto.tensorflow.Int64List;\r\n  return proto.tensorflow.Int64List.deserializeBinaryFromReader(msg, reader);\r\n};\r\n\r\n\r\n/**\r\n * Deserializes binary data (in protobuf wire format) from the\r\n * given reader into the given message object.\r\n * @param {!proto.tensorflow.Int64List} msg The message object to deserialize into.\r\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\r\n * @return {!proto.tensorflow.Int64List}\r\n */\r\nproto.tensorflow.Int64List.deserializeBinaryFromReader = function(msg, reader) {\r\n  while (reader.nextField()) {\r\n    if (reader.isEndGroup()) {\r\n      break;\r\n    }\r\n    var field = reader.getFieldNumber();\r\n    switch (field) {\r\n    case 1:\r\n      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());\r\n      msg.setValueList(value);\r\n      break;\r\n    default:\r\n      reader.skipField();\r\n      break;\r\n    }\r\n  }\r\n  return msg;\r\n};\r\n\r\n\r\n/**\r\n * Serializes the message to binary data (in protobuf wire format).\r\n * @return {!Uint8Array}\r\n */\r\nproto.tensorflow.Int64List.prototype.serializeBinary = function() {\r\n  var writer = new jspb.BinaryWriter();\r\n  proto.tensorflow.Int64List.serializeBinaryToWriter(this, writer);\r\n  return writer.getResultBuffer();\r\n};\r\n\r\n\r\n/**\r\n * Serializes the given message to binary data (in protobuf wire\r\n * format), writing to the given BinaryWriter.\r\n * @param {!proto.tensorflow.Int64List} message\r\n * @param {!jspb.BinaryWriter} writer\r\n * @suppress {unusedLocalVariables} f is only used for nested messages\r\n */\r\nproto.tensorflow.Int64List.serializeBinaryToWriter = function(message, writer) {\r\n  var f = undefined;\r\n  f = message.getValueList();\r\n  if (f.length > 0) {\r\n    writer.writePackedInt64(\r\n      1,\r\n      f\r\n    );\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * repeated int64 value = 1;\r\n * @return {!Array<number>}\r\n */\r\nproto.tensorflow.Int64List.prototype.getValueList = function() {\r\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\r\n};\r\n\r\n\r\n/** @param {!Array<number>} value */\r\nproto.tensorflow.Int64List.prototype.setValueList = function(value) {\r\n  jspb.Message.setField(this, 1, value || []);\r\n};\r\n\r\n\r\n/**\r\n * @param {!number} value\r\n * @param {number=} opt_index\r\n */\r\nproto.tensorflow.Int64List.prototype.addValue = function(value, opt_index) {\r\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\r\n};\r\n\r\n\r\nproto.tensorflow.Int64List.prototype.clearValueList = function() {\r\n  this.setValueList([]);\r\n};\r\n\r\n\r\n\r\n/**\r\n * Generated by JsPbCodeGenerator.\r\n * @param {Array=} opt_data Optional initial data array, typically from a\r\n * server response, or constructed directly in Javascript. The array is used\r\n * in place and becomes part of the constructed object. It is not cloned.\r\n * If no data is provided, the constructed object will be empty, but still\r\n * valid.\r\n * @extends {jspb.Message}\r\n * @constructor\r\n */\r\nproto.tensorflow.Feature = function(opt_data) {\r\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tensorflow.Feature.oneofGroups_);\r\n};\r\ngoog.inherits(proto.tensorflow.Feature, jspb.Message);\r\nif (goog.DEBUG && !COMPILED) {\r\n  proto.tensorflow.Feature.displayName = 'proto.tensorflow.Feature';\r\n}\r\n/**\r\n * Oneof group definitions for this message. Each group defines the field\r\n * numbers belonging to that group. When of these fields' value is set, all\r\n * other fields in the group are cleared. During deserialization, if multiple\r\n * fields are encountered for a group, only the last value seen will be kept.\r\n * @private {!Array<!Array<number>>}\r\n * @const\r\n */\r\nproto.tensorflow.Feature.oneofGroups_ = [[1,2,3]];\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nproto.tensorflow.Feature.KindCase = {\r\n  KIND_NOT_SET: 0,\r\n  BYTES_LIST: 1,\r\n  FLOAT_LIST: 2,\r\n  INT64_LIST: 3\r\n};\r\n\r\n/**\r\n * @return {proto.tensorflow.Feature.KindCase}\r\n */\r\nproto.tensorflow.Feature.prototype.getKindCase = function() {\r\n  return /** @type {proto.tensorflow.Feature.KindCase} */(jspb.Message.computeOneofCase(this, proto.tensorflow.Feature.oneofGroups_[0]));\r\n};\r\n\r\n\r\n\r\nif (jspb.Message.GENERATE_TO_OBJECT) {\r\n/**\r\n * Creates an object representation of this proto suitable for use in Soy templates.\r\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\r\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\r\n * For the list of reserved names please see:\r\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\r\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\r\n *     for transitional soy proto support: http://goto/soy-param-migration\r\n * @return {!Object}\r\n */\r\nproto.tensorflow.Feature.prototype.toObject = function(opt_includeInstance) {\r\n  return proto.tensorflow.Feature.toObject(opt_includeInstance, this);\r\n};\r\n\r\n\r\n/**\r\n * Static version of the {@see toObject} method.\r\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\r\n *     instance for transitional soy proto support:\r\n *     http://goto/soy-param-migration\r\n * @param {!proto.tensorflow.Feature} msg The msg instance to transform.\r\n * @return {!Object}\r\n * @suppress {unusedLocalVariables} f is only used for nested messages\r\n */\r\nproto.tensorflow.Feature.toObject = function(includeInstance, msg) {\r\n  var f, obj = {\r\n    bytesList: (f = msg.getBytesList()) && proto.tensorflow.BytesList.toObject(includeInstance, f),\r\n    floatList: (f = msg.getFloatList()) && proto.tensorflow.FloatList.toObject(includeInstance, f),\r\n    int64List: (f = msg.getInt64List()) && proto.tensorflow.Int64List.toObject(includeInstance, f)\r\n  };\r\n\r\n  if (includeInstance) {\r\n    obj.$jspbMessageInstance = msg;\r\n  }\r\n  return obj;\r\n};\r\n}\r\n\r\n\r\n/**\r\n * Deserializes binary data (in protobuf wire format).\r\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\r\n * @return {!proto.tensorflow.Feature}\r\n */\r\nproto.tensorflow.Feature.deserializeBinary = function(bytes) {\r\n  var reader = new jspb.BinaryReader(bytes);\r\n  var msg = new proto.tensorflow.Feature;\r\n  return proto.tensorflow.Feature.deserializeBinaryFromReader(msg, reader);\r\n};\r\n\r\n\r\n/**\r\n * Deserializes binary data (in protobuf wire format) from the\r\n * given reader into the given message object.\r\n * @param {!proto.tensorflow.Feature} msg The message object to deserialize into.\r\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\r\n * @return {!proto.tensorflow.Feature}\r\n */\r\nproto.tensorflow.Feature.deserializeBinaryFromReader = function(msg, reader) {\r\n  while (reader.nextField()) {\r\n    if (reader.isEndGroup()) {\r\n      break;\r\n    }\r\n    var field = reader.getFieldNumber();\r\n    switch (field) {\r\n    case 1:\r\n      var value = new proto.tensorflow.BytesList;\r\n      reader.readMessage(value,proto.tensorflow.BytesList.deserializeBinaryFromReader);\r\n      msg.setBytesList(value);\r\n      break;\r\n    case 2:\r\n      var value = new proto.tensorflow.FloatList;\r\n      reader.readMessage(value,proto.tensorflow.FloatList.deserializeBinaryFromReader);\r\n      msg.setFloatList(value);\r\n      break;\r\n    case 3:\r\n      var value = new proto.tensorflow.Int64List;\r\n      reader.readMessage(value,proto.tensorflow.Int64List.deserializeBinaryFromReader);\r\n      msg.setInt64List(value);\r\n      break;\r\n    default:\r\n      reader.skipField();\r\n      break;\r\n    }\r\n  }\r\n  return msg;\r\n};\r\n\r\n\r\n/**\r\n * Serializes the message to binary data (in protobuf wire format).\r\n * @return {!Uint8Array}\r\n */\r\nproto.tensorflow.Feature.prototype.serializeBinary = function() {\r\n  var writer = new jspb.BinaryWriter();\r\n  proto.tensorflow.Feature.serializeBinaryToWriter(this, writer);\r\n  return writer.getResultBuffer();\r\n};\r\n\r\n\r\n/**\r\n * Serializes the given message to binary data (in protobuf wire\r\n * format), writing to the given BinaryWriter.\r\n * @param {!proto.tensorflow.Feature} message\r\n * @param {!jspb.BinaryWriter} writer\r\n * @suppress {unusedLocalVariables} f is only used for nested messages\r\n */\r\nproto.tensorflow.Feature.serializeBinaryToWriter = function(message, writer) {\r\n  var f = undefined;\r\n  f = message.getBytesList();\r\n  if (f != null) {\r\n    writer.writeMessage(\r\n      1,\r\n      f,\r\n      proto.tensorflow.BytesList.serializeBinaryToWriter\r\n    );\r\n  }\r\n  f = message.getFloatList();\r\n  if (f != null) {\r\n    writer.writeMessage(\r\n      2,\r\n      f,\r\n      proto.tensorflow.FloatList.serializeBinaryToWriter\r\n    );\r\n  }\r\n  f = message.getInt64List();\r\n  if (f != null) {\r\n    writer.writeMessage(\r\n      3,\r\n      f,\r\n      proto.tensorflow.Int64List.serializeBinaryToWriter\r\n    );\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * optional BytesList bytes_list = 1;\r\n * @return {?proto.tensorflow.BytesList}\r\n */\r\nproto.tensorflow.Feature.prototype.getBytesList = function() {\r\n  return /** @type{?proto.tensorflow.BytesList} */ (\r\n    jspb.Message.getWrapperField(this, proto.tensorflow.BytesList, 1));\r\n};\r\n\r\n\r\n/** @param {?proto.tensorflow.BytesList|undefined} value */\r\nproto.tensorflow.Feature.prototype.setBytesList = function(value) {\r\n  jspb.Message.setOneofWrapperField(this, 1, proto.tensorflow.Feature.oneofGroups_[0], value);\r\n};\r\n\r\n\r\nproto.tensorflow.Feature.prototype.clearBytesList = function() {\r\n  this.setBytesList(undefined);\r\n};\r\n\r\n\r\n/**\r\n * Returns whether this field is set.\r\n * @return {!boolean}\r\n */\r\nproto.tensorflow.Feature.prototype.hasBytesList = function() {\r\n  return jspb.Message.getField(this, 1) != null;\r\n};\r\n\r\n\r\n/**\r\n * optional FloatList float_list = 2;\r\n * @return {?proto.tensorflow.FloatList}\r\n */\r\nproto.tensorflow.Feature.prototype.getFloatList = function() {\r\n  return /** @type{?proto.tensorflow.FloatList} */ (\r\n    jspb.Message.getWrapperField(this, proto.tensorflow.FloatList, 2));\r\n};\r\n\r\n\r\n/** @param {?proto.tensorflow.FloatList|undefined} value */\r\nproto.tensorflow.Feature.prototype.setFloatList = function(value) {\r\n  jspb.Message.setOneofWrapperField(this, 2, proto.tensorflow.Feature.oneofGroups_[0], value);\r\n};\r\n\r\n\r\nproto.tensorflow.Feature.prototype.clearFloatList = function() {\r\n  this.setFloatList(undefined);\r\n};\r\n\r\n\r\n/**\r\n * Returns whether this field is set.\r\n * @return {!boolean}\r\n */\r\nproto.tensorflow.Feature.prototype.hasFloatList = function() {\r\n  return jspb.Message.getField(this, 2) != null;\r\n};\r\n\r\n\r\n/**\r\n * optional Int64List int64_list = 3;\r\n * @return {?proto.tensorflow.Int64List}\r\n */\r\nproto.tensorflow.Feature.prototype.getInt64List = function() {\r\n  return /** @type{?proto.tensorflow.Int64List} */ (\r\n    jspb.Message.getWrapperField(this, proto.tensorflow.Int64List, 3));\r\n};\r\n\r\n\r\n/** @param {?proto.tensorflow.Int64List|undefined} value */\r\nproto.tensorflow.Feature.prototype.setInt64List = function(value) {\r\n  jspb.Message.setOneofWrapperField(this, 3, proto.tensorflow.Feature.oneofGroups_[0], value);\r\n};\r\n\r\n\r\nproto.tensorflow.Feature.prototype.clearInt64List = function() {\r\n  this.setInt64List(undefined);\r\n};\r\n\r\n\r\n/**\r\n * Returns whether this field is set.\r\n * @return {!boolean}\r\n */\r\nproto.tensorflow.Feature.prototype.hasInt64List = function() {\r\n  return jspb.Message.getField(this, 3) != null;\r\n};\r\n\r\n\r\n\r\n/**\r\n * Generated by JsPbCodeGenerator.\r\n * @param {Array=} opt_data Optional initial data array, typically from a\r\n * server response, or constructed directly in Javascript. The array is used\r\n * in place and becomes part of the constructed object. It is not cloned.\r\n * If no data is provided, the constructed object will be empty, but still\r\n * valid.\r\n * @extends {jspb.Message}\r\n * @constructor\r\n */\r\nproto.tensorflow.Features = function(opt_data) {\r\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\r\n};\r\ngoog.inherits(proto.tensorflow.Features, jspb.Message);\r\nif (goog.DEBUG && !COMPILED) {\r\n  proto.tensorflow.Features.displayName = 'proto.tensorflow.Features';\r\n}\r\n\r\n\r\nif (jspb.Message.GENERATE_TO_OBJECT) {\r\n/**\r\n * Creates an object representation of this proto suitable for use in Soy templates.\r\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\r\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\r\n * For the list of reserved names please see:\r\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\r\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\r\n *     for transitional soy proto support: http://goto/soy-param-migration\r\n * @return {!Object}\r\n */\r\nproto.tensorflow.Features.prototype.toObject = function(opt_includeInstance) {\r\n  return proto.tensorflow.Features.toObject(opt_includeInstance, this);\r\n};\r\n\r\n\r\n/**\r\n * Static version of the {@see toObject} method.\r\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\r\n *     instance for transitional soy proto support:\r\n *     http://goto/soy-param-migration\r\n * @param {!proto.tensorflow.Features} msg The msg instance to transform.\r\n * @return {!Object}\r\n * @suppress {unusedLocalVariables} f is only used for nested messages\r\n */\r\nproto.tensorflow.Features.toObject = function(includeInstance, msg) {\r\n  var f, obj = {\r\n    featureMap: (f = msg.getFeatureMap()) ? f.toObject(includeInstance, proto.tensorflow.Feature.toObject) : []\r\n  };\r\n\r\n  if (includeInstance) {\r\n    obj.$jspbMessageInstance = msg;\r\n  }\r\n  return obj;\r\n};\r\n}\r\n\r\n\r\n/**\r\n * Deserializes binary data (in protobuf wire format).\r\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\r\n * @return {!proto.tensorflow.Features}\r\n */\r\nproto.tensorflow.Features.deserializeBinary = function(bytes) {\r\n  var reader = new jspb.BinaryReader(bytes);\r\n  var msg = new proto.tensorflow.Features;\r\n  return proto.tensorflow.Features.deserializeBinaryFromReader(msg, reader);\r\n};\r\n\r\n\r\n/**\r\n * Deserializes binary data (in protobuf wire format) from the\r\n * given reader into the given message object.\r\n * @param {!proto.tensorflow.Features} msg The message object to deserialize into.\r\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\r\n * @return {!proto.tensorflow.Features}\r\n */\r\nproto.tensorflow.Features.deserializeBinaryFromReader = function(msg, reader) {\r\n  while (reader.nextField()) {\r\n    if (reader.isEndGroup()) {\r\n      break;\r\n    }\r\n    var field = reader.getFieldNumber();\r\n    switch (field) {\r\n    case 1:\r\n      var value = msg.getFeatureMap();\r\n      reader.readMessage(value, function(message, reader) {\r\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tensorflow.Feature.deserializeBinaryFromReader, \"\");\r\n         });\r\n      break;\r\n    default:\r\n      reader.skipField();\r\n      break;\r\n    }\r\n  }\r\n  return msg;\r\n};\r\n\r\n\r\n/**\r\n * Serializes the message to binary data (in protobuf wire format).\r\n * @return {!Uint8Array}\r\n */\r\nproto.tensorflow.Features.prototype.serializeBinary = function() {\r\n  var writer = new jspb.BinaryWriter();\r\n  proto.tensorflow.Features.serializeBinaryToWriter(this, writer);\r\n  return writer.getResultBuffer();\r\n};\r\n\r\n\r\n/**\r\n * Serializes the given message to binary data (in protobuf wire\r\n * format), writing to the given BinaryWriter.\r\n * @param {!proto.tensorflow.Features} message\r\n * @param {!jspb.BinaryWriter} writer\r\n * @suppress {unusedLocalVariables} f is only used for nested messages\r\n */\r\nproto.tensorflow.Features.serializeBinaryToWriter = function(message, writer) {\r\n  var f = undefined;\r\n  f = message.getFeatureMap(true);\r\n  if (f && f.getLength() > 0) {\r\n    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tensorflow.Feature.serializeBinaryToWriter);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * map<string, Feature> feature = 1;\r\n * @param {boolean=} opt_noLazyCreate Do not create the map if\r\n * empty, instead returning `undefined`\r\n * @return {!jspb.Map<string,!proto.tensorflow.Feature>}\r\n */\r\nproto.tensorflow.Features.prototype.getFeatureMap = function(opt_noLazyCreate) {\r\n  return /** @type {!jspb.Map<string,!proto.tensorflow.Feature>} */ (\r\n      jspb.Message.getMapField(this, 1, opt_noLazyCreate,\r\n      proto.tensorflow.Feature));\r\n};\r\n\r\n\r\nproto.tensorflow.Features.prototype.clearFeatureMap = function() {\r\n  this.getFeatureMap().clear();\r\n};\r\n\r\n\r\n\r\n/**\r\n * Generated by JsPbCodeGenerator.\r\n * @param {Array=} opt_data Optional initial data array, typically from a\r\n * server response, or constructed directly in Javascript. The array is used\r\n * in place and becomes part of the constructed object. It is not cloned.\r\n * If no data is provided, the constructed object will be empty, but still\r\n * valid.\r\n * @extends {jspb.Message}\r\n * @constructor\r\n */\r\nproto.tensorflow.FeatureList = function(opt_data) {\r\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.FeatureList.repeatedFields_, null);\r\n};\r\ngoog.inherits(proto.tensorflow.FeatureList, jspb.Message);\r\nif (goog.DEBUG && !COMPILED) {\r\n  proto.tensorflow.FeatureList.displayName = 'proto.tensorflow.FeatureList';\r\n}\r\n/**\r\n * List of repeated fields within this message type.\r\n * @private {!Array<number>}\r\n * @const\r\n */\r\nproto.tensorflow.FeatureList.repeatedFields_ = [1];\r\n\r\n\r\n\r\nif (jspb.Message.GENERATE_TO_OBJECT) {\r\n/**\r\n * Creates an object representation of this proto suitable for use in Soy templates.\r\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\r\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\r\n * For the list of reserved names please see:\r\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\r\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\r\n *     for transitional soy proto support: http://goto/soy-param-migration\r\n * @return {!Object}\r\n */\r\nproto.tensorflow.FeatureList.prototype.toObject = function(opt_includeInstance) {\r\n  return proto.tensorflow.FeatureList.toObject(opt_includeInstance, this);\r\n};\r\n\r\n\r\n/**\r\n * Static version of the {@see toObject} method.\r\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\r\n *     instance for transitional soy proto support:\r\n *     http://goto/soy-param-migration\r\n * @param {!proto.tensorflow.FeatureList} msg The msg instance to transform.\r\n * @return {!Object}\r\n * @suppress {unusedLocalVariables} f is only used for nested messages\r\n */\r\nproto.tensorflow.FeatureList.toObject = function(includeInstance, msg) {\r\n  var f, obj = {\r\n    featureList: jspb.Message.toObjectList(msg.getFeatureList(),\r\n    proto.tensorflow.Feature.toObject, includeInstance)\r\n  };\r\n\r\n  if (includeInstance) {\r\n    obj.$jspbMessageInstance = msg;\r\n  }\r\n  return obj;\r\n};\r\n}\r\n\r\n\r\n/**\r\n * Deserializes binary data (in protobuf wire format).\r\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\r\n * @return {!proto.tensorflow.FeatureList}\r\n */\r\nproto.tensorflow.FeatureList.deserializeBinary = function(bytes) {\r\n  var reader = new jspb.BinaryReader(bytes);\r\n  var msg = new proto.tensorflow.FeatureList;\r\n  return proto.tensorflow.FeatureList.deserializeBinaryFromReader(msg, reader);\r\n};\r\n\r\n\r\n/**\r\n * Deserializes binary data (in protobuf wire format) from the\r\n * given reader into the given message object.\r\n * @param {!proto.tensorflow.FeatureList} msg The message object to deserialize into.\r\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\r\n * @return {!proto.tensorflow.FeatureList}\r\n */\r\nproto.tensorflow.FeatureList.deserializeBinaryFromReader = function(msg, reader) {\r\n  while (reader.nextField()) {\r\n    if (reader.isEndGroup()) {\r\n      break;\r\n    }\r\n    var field = reader.getFieldNumber();\r\n    switch (field) {\r\n    case 1:\r\n      var value = new proto.tensorflow.Feature;\r\n      reader.readMessage(value,proto.tensorflow.Feature.deserializeBinaryFromReader);\r\n      msg.addFeature(value);\r\n      break;\r\n    default:\r\n      reader.skipField();\r\n      break;\r\n    }\r\n  }\r\n  return msg;\r\n};\r\n\r\n\r\n/**\r\n * Serializes the message to binary data (in protobuf wire format).\r\n * @return {!Uint8Array}\r\n */\r\nproto.tensorflow.FeatureList.prototype.serializeBinary = function() {\r\n  var writer = new jspb.BinaryWriter();\r\n  proto.tensorflow.FeatureList.serializeBinaryToWriter(this, writer);\r\n  return writer.getResultBuffer();\r\n};\r\n\r\n\r\n/**\r\n * Serializes the given message to binary data (in protobuf wire\r\n * format), writing to the given BinaryWriter.\r\n * @param {!proto.tensorflow.FeatureList} message\r\n * @param {!jspb.BinaryWriter} writer\r\n * @suppress {unusedLocalVariables} f is only used for nested messages\r\n */\r\nproto.tensorflow.FeatureList.serializeBinaryToWriter = function(message, writer) {\r\n  var f = undefined;\r\n  f = message.getFeatureList();\r\n  if (f.length > 0) {\r\n    writer.writeRepeatedMessage(\r\n      1,\r\n      f,\r\n      proto.tensorflow.Feature.serializeBinaryToWriter\r\n    );\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * repeated Feature feature = 1;\r\n * @return {!Array<!proto.tensorflow.Feature>}\r\n */\r\nproto.tensorflow.FeatureList.prototype.getFeatureList = function() {\r\n  return /** @type{!Array<!proto.tensorflow.Feature>} */ (\r\n    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.Feature, 1));\r\n};\r\n\r\n\r\n/** @param {!Array<!proto.tensorflow.Feature>} value */\r\nproto.tensorflow.FeatureList.prototype.setFeatureList = function(value) {\r\n  jspb.Message.setRepeatedWrapperField(this, 1, value);\r\n};\r\n\r\n\r\n/**\r\n * @param {!proto.tensorflow.Feature=} opt_value\r\n * @param {number=} opt_index\r\n * @return {!proto.tensorflow.Feature}\r\n */\r\nproto.tensorflow.FeatureList.prototype.addFeature = function(opt_value, opt_index) {\r\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tensorflow.Feature, opt_index);\r\n};\r\n\r\n\r\nproto.tensorflow.FeatureList.prototype.clearFeatureList = function() {\r\n  this.setFeatureList([]);\r\n};\r\n\r\n\r\n\r\n/**\r\n * Generated by JsPbCodeGenerator.\r\n * @param {Array=} opt_data Optional initial data array, typically from a\r\n * server response, or constructed directly in Javascript. The array is used\r\n * in place and becomes part of the constructed object. It is not cloned.\r\n * If no data is provided, the constructed object will be empty, but still\r\n * valid.\r\n * @extends {jspb.Message}\r\n * @constructor\r\n */\r\nproto.tensorflow.FeatureLists = function(opt_data) {\r\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\r\n};\r\ngoog.inherits(proto.tensorflow.FeatureLists, jspb.Message);\r\nif (goog.DEBUG && !COMPILED) {\r\n  proto.tensorflow.FeatureLists.displayName = 'proto.tensorflow.FeatureLists';\r\n}\r\n\r\n\r\nif (jspb.Message.GENERATE_TO_OBJECT) {\r\n/**\r\n * Creates an object representation of this proto suitable for use in Soy templates.\r\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\r\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\r\n * For the list of reserved names please see:\r\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\r\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\r\n *     for transitional soy proto support: http://goto/soy-param-migration\r\n * @return {!Object}\r\n */\r\nproto.tensorflow.FeatureLists.prototype.toObject = function(opt_includeInstance) {\r\n  return proto.tensorflow.FeatureLists.toObject(opt_includeInstance, this);\r\n};\r\n\r\n\r\n/**\r\n * Static version of the {@see toObject} method.\r\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\r\n *     instance for transitional soy proto support:\r\n *     http://goto/soy-param-migration\r\n * @param {!proto.tensorflow.FeatureLists} msg The msg instance to transform.\r\n * @return {!Object}\r\n * @suppress {unusedLocalVariables} f is only used for nested messages\r\n */\r\nproto.tensorflow.FeatureLists.toObject = function(includeInstance, msg) {\r\n  var f, obj = {\r\n    featureListMap: (f = msg.getFeatureListMap()) ? f.toObject(includeInstance, proto.tensorflow.FeatureList.toObject) : []\r\n  };\r\n\r\n  if (includeInstance) {\r\n    obj.$jspbMessageInstance = msg;\r\n  }\r\n  return obj;\r\n};\r\n}\r\n\r\n\r\n/**\r\n * Deserializes binary data (in protobuf wire format).\r\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\r\n * @return {!proto.tensorflow.FeatureLists}\r\n */\r\nproto.tensorflow.FeatureLists.deserializeBinary = function(bytes) {\r\n  var reader = new jspb.BinaryReader(bytes);\r\n  var msg = new proto.tensorflow.FeatureLists;\r\n  return proto.tensorflow.FeatureLists.deserializeBinaryFromReader(msg, reader);\r\n};\r\n\r\n\r\n/**\r\n * Deserializes binary data (in protobuf wire format) from the\r\n * given reader into the given message object.\r\n * @param {!proto.tensorflow.FeatureLists} msg The message object to deserialize into.\r\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\r\n * @return {!proto.tensorflow.FeatureLists}\r\n */\r\nproto.tensorflow.FeatureLists.deserializeBinaryFromReader = function(msg, reader) {\r\n  while (reader.nextField()) {\r\n    if (reader.isEndGroup()) {\r\n      break;\r\n    }\r\n    var field = reader.getFieldNumber();\r\n    switch (field) {\r\n    case 1:\r\n      var value = msg.getFeatureListMap();\r\n      reader.readMessage(value, function(message, reader) {\r\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tensorflow.FeatureList.deserializeBinaryFromReader, \"\");\r\n         });\r\n      break;\r\n    default:\r\n      reader.skipField();\r\n      break;\r\n    }\r\n  }\r\n  return msg;\r\n};\r\n\r\n\r\n/**\r\n * Serializes the message to binary data (in protobuf wire format).\r\n * @return {!Uint8Array}\r\n */\r\nproto.tensorflow.FeatureLists.prototype.serializeBinary = function() {\r\n  var writer = new jspb.BinaryWriter();\r\n  proto.tensorflow.FeatureLists.serializeBinaryToWriter(this, writer);\r\n  return writer.getResultBuffer();\r\n};\r\n\r\n\r\n/**\r\n * Serializes the given message to binary data (in protobuf wire\r\n * format), writing to the given BinaryWriter.\r\n * @param {!proto.tensorflow.FeatureLists} message\r\n * @param {!jspb.BinaryWriter} writer\r\n * @suppress {unusedLocalVariables} f is only used for nested messages\r\n */\r\nproto.tensorflow.FeatureLists.serializeBinaryToWriter = function(message, writer) {\r\n  var f = undefined;\r\n  f = message.getFeatureListMap(true);\r\n  if (f && f.getLength() > 0) {\r\n    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tensorflow.FeatureList.serializeBinaryToWriter);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * map<string, FeatureList> feature_list = 1;\r\n * @param {boolean=} opt_noLazyCreate Do not create the map if\r\n * empty, instead returning `undefined`\r\n * @return {!jspb.Map<string,!proto.tensorflow.FeatureList>}\r\n */\r\nproto.tensorflow.FeatureLists.prototype.getFeatureListMap = function(opt_noLazyCreate) {\r\n  return /** @type {!jspb.Map<string,!proto.tensorflow.FeatureList>} */ (\r\n      jspb.Message.getMapField(this, 1, opt_noLazyCreate,\r\n      proto.tensorflow.FeatureList));\r\n};\r\n\r\n\r\nproto.tensorflow.FeatureLists.prototype.clearFeatureListMap = function() {\r\n  this.getFeatureListMap().clear();\r\n};\r\n\r\n\r\n\r\n/**\r\n * Generated by JsPbCodeGenerator.\r\n * @param {Array=} opt_data Optional initial data array, typically from a\r\n * server response, or constructed directly in Javascript. The array is used\r\n * in place and becomes part of the constructed object. It is not cloned.\r\n * If no data is provided, the constructed object will be empty, but still\r\n * valid.\r\n * @extends {jspb.Message}\r\n * @constructor\r\n */\r\nproto.tensorflow.TFRecordsImageMessage = function(opt_data) {\r\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\r\n};\r\ngoog.inherits(proto.tensorflow.TFRecordsImageMessage, jspb.Message);\r\nif (goog.DEBUG && !COMPILED) {\r\n  proto.tensorflow.TFRecordsImageMessage.displayName = 'proto.tensorflow.TFRecordsImageMessage';\r\n}\r\n\r\n\r\nif (jspb.Message.GENERATE_TO_OBJECT) {\r\n/**\r\n * Creates an object representation of this proto suitable for use in Soy templates.\r\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\r\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\r\n * For the list of reserved names please see:\r\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\r\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\r\n *     for transitional soy proto support: http://goto/soy-param-migration\r\n * @return {!Object}\r\n */\r\nproto.tensorflow.TFRecordsImageMessage.prototype.toObject = function(opt_includeInstance) {\r\n  return proto.tensorflow.TFRecordsImageMessage.toObject(opt_includeInstance, this);\r\n};\r\n\r\n\r\n/**\r\n * Static version of the {@see toObject} method.\r\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\r\n *     instance for transitional soy proto support:\r\n *     http://goto/soy-param-migration\r\n * @param {!proto.tensorflow.TFRecordsImageMessage} msg The msg instance to transform.\r\n * @return {!Object}\r\n * @suppress {unusedLocalVariables} f is only used for nested messages\r\n */\r\nproto.tensorflow.TFRecordsImageMessage.toObject = function(includeInstance, msg) {\r\n  var f, obj = {\r\n    context: (f = msg.getContext()) && proto.tensorflow.Features.toObject(includeInstance, f),\r\n    featureLists: (f = msg.getFeatureLists()) && proto.tensorflow.FeatureLists.toObject(includeInstance, f)\r\n  };\r\n\r\n  if (includeInstance) {\r\n    obj.$jspbMessageInstance = msg;\r\n  }\r\n  return obj;\r\n};\r\n}\r\n\r\n\r\n/**\r\n * Deserializes binary data (in protobuf wire format).\r\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\r\n * @return {!proto.tensorflow.TFRecordsImageMessage}\r\n */\r\nproto.tensorflow.TFRecordsImageMessage.deserializeBinary = function(bytes) {\r\n  var reader = new jspb.BinaryReader(bytes);\r\n  var msg = new proto.tensorflow.TFRecordsImageMessage;\r\n  return proto.tensorflow.TFRecordsImageMessage.deserializeBinaryFromReader(msg, reader);\r\n};\r\n\r\n\r\n/**\r\n * Deserializes binary data (in protobuf wire format) from the\r\n * given reader into the given message object.\r\n * @param {!proto.tensorflow.TFRecordsImageMessage} msg The message object to deserialize into.\r\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\r\n * @return {!proto.tensorflow.TFRecordsImageMessage}\r\n */\r\nproto.tensorflow.TFRecordsImageMessage.deserializeBinaryFromReader = function(msg, reader) {\r\n  while (reader.nextField()) {\r\n    if (reader.isEndGroup()) {\r\n      break;\r\n    }\r\n    var field = reader.getFieldNumber();\r\n    switch (field) {\r\n    case 1:\r\n      var value = new proto.tensorflow.Features;\r\n      reader.readMessage(value,proto.tensorflow.Features.deserializeBinaryFromReader);\r\n      msg.setContext(value);\r\n      break;\r\n    case 2:\r\n      var value = new proto.tensorflow.FeatureLists;\r\n      reader.readMessage(value,proto.tensorflow.FeatureLists.deserializeBinaryFromReader);\r\n      msg.setFeatureLists(value);\r\n      break;\r\n    default:\r\n      reader.skipField();\r\n      break;\r\n    }\r\n  }\r\n  return msg;\r\n};\r\n\r\n\r\n/**\r\n * Serializes the message to binary data (in protobuf wire format).\r\n * @return {!Uint8Array}\r\n */\r\nproto.tensorflow.TFRecordsImageMessage.prototype.serializeBinary = function() {\r\n  var writer = new jspb.BinaryWriter();\r\n  proto.tensorflow.TFRecordsImageMessage.serializeBinaryToWriter(this, writer);\r\n  return writer.getResultBuffer();\r\n};\r\n\r\n\r\n/**\r\n * Serializes the given message to binary data (in protobuf wire\r\n * format), writing to the given BinaryWriter.\r\n * @param {!proto.tensorflow.TFRecordsImageMessage} message\r\n * @param {!jspb.BinaryWriter} writer\r\n * @suppress {unusedLocalVariables} f is only used for nested messages\r\n */\r\nproto.tensorflow.TFRecordsImageMessage.serializeBinaryToWriter = function(message, writer) {\r\n  var f = undefined;\r\n  f = message.getContext();\r\n  if (f != null) {\r\n    writer.writeMessage(\r\n      1,\r\n      f,\r\n      proto.tensorflow.Features.serializeBinaryToWriter\r\n    );\r\n  }\r\n  f = message.getFeatureLists();\r\n  if (f != null) {\r\n    writer.writeMessage(\r\n      2,\r\n      f,\r\n      proto.tensorflow.FeatureLists.serializeBinaryToWriter\r\n    );\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * optional Features context = 1;\r\n * @return {?proto.tensorflow.Features}\r\n */\r\nproto.tensorflow.TFRecordsImageMessage.prototype.getContext = function() {\r\n  return /** @type{?proto.tensorflow.Features} */ (\r\n    jspb.Message.getWrapperField(this, proto.tensorflow.Features, 1));\r\n};\r\n\r\n\r\n/** @param {?proto.tensorflow.Features|undefined} value */\r\nproto.tensorflow.TFRecordsImageMessage.prototype.setContext = function(value) {\r\n  jspb.Message.setWrapperField(this, 1, value);\r\n};\r\n\r\n\r\nproto.tensorflow.TFRecordsImageMessage.prototype.clearContext = function() {\r\n  this.setContext(undefined);\r\n};\r\n\r\n\r\n/**\r\n * Returns whether this field is set.\r\n * @return {!boolean}\r\n */\r\nproto.tensorflow.TFRecordsImageMessage.prototype.hasContext = function() {\r\n  return jspb.Message.getField(this, 1) != null;\r\n};\r\n\r\n\r\n/**\r\n * optional FeatureLists feature_lists = 2;\r\n * @return {?proto.tensorflow.FeatureLists}\r\n */\r\nproto.tensorflow.TFRecordsImageMessage.prototype.getFeatureLists = function() {\r\n  return /** @type{?proto.tensorflow.FeatureLists} */ (\r\n    jspb.Message.getWrapperField(this, proto.tensorflow.FeatureLists, 2));\r\n};\r\n\r\n\r\n/** @param {?proto.tensorflow.FeatureLists|undefined} value */\r\nproto.tensorflow.TFRecordsImageMessage.prototype.setFeatureLists = function(value) {\r\n  jspb.Message.setWrapperField(this, 2, value);\r\n};\r\n\r\n\r\nproto.tensorflow.TFRecordsImageMessage.prototype.clearFeatureLists = function() {\r\n  this.setFeatureLists(undefined);\r\n};\r\n\r\n\r\n/**\r\n * Returns whether this field is set.\r\n * @return {!boolean}\r\n */\r\nproto.tensorflow.TFRecordsImageMessage.prototype.hasFeatureLists = function() {\r\n  return jspb.Message.getField(this, 2) != null;\r\n};\r\n\r\n\r\ngoog.object.extend(exports, proto.tensorflow);\r\n","// tslint:disable-next-line:no-var-requires\r\nconst packageJson = require(\"../../package.json\");\r\n\r\n/**\r\n * Defines the application information\r\n */\r\nexport interface IAppInfo {\r\n    /** The app name */\r\n    name: string;\r\n    /** The app version */\r\n    version: string;\r\n    /** The app description */\r\n    description: string;\r\n}\r\n\r\n/**\r\n * Gets current application info\r\n */\r\nexport const appInfo = packageJson as IAppInfo;\r\n","import { KeyboardContext, IKeyboardContext, KeyEventType } from \"../keyboardManager/keyboardManager\";\r\nimport React from \"react\";\r\n\r\n/**\r\n * Properties needed for a keyboard binding\r\n */\r\nexport interface IKeyboardBindingProps {\r\n    /** Keys that the action is bound to */\r\n    accelerators: string[];\r\n    /** Friendly name for keyboard binding for display in help menu */\r\n    displayName: string;\r\n    /** Action to trigger upon key event */\r\n    handler: (evt?: KeyboardEvent) => void;\r\n    /** Type of key event (keypress, keyup, keydown) */\r\n    keyEventType?: KeyEventType;\r\n    /** Icon to display in help menu */\r\n    icon?: string;\r\n}\r\n\r\nexport class KeyboardBinding extends React.Component<IKeyboardBindingProps> {\r\n    public static contextType = KeyboardContext;\r\n    public context!: IKeyboardContext;\r\n    private deregisterBinding: () => void;\r\n\r\n    public componentDidMount() {\r\n        if (this.context && this.context.keyboard) {\r\n            this.deregisterBinding = this.context.keyboard.registerBinding(this.props);\r\n        } else {\r\n            console.warn(\"Keyboard Mananger context cannot be found - Keyboard binding has NOT been set.\");\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        if (this.deregisterBinding) {\r\n            this.deregisterBinding();\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return null;\r\n    }\r\n}\r\n","export class Env {\r\n    public static get() {\r\n        return process.env.NODE_ENV;\r\n    }\r\n}\r\n","export default class Guard {\r\n    /**\r\n     * Validates the string express is not null or empty, otherwise throws an exception\r\n     * @param value - The value to validate\r\n     * @param paramName - The name of the parameter to validate\r\n     * @param message - The error message to return on invalid value\r\n     */\r\n    public static empty(value: string, paramName?: string, message?: string) {\r\n        if ((!!value === false || value.trim().length === 0)) {\r\n            message = message || (`'${paramName || \"value\"}' cannot be null or empty`);\r\n            throw new Error(message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates the value is not null, otherwise throw an exception\r\n     * @param value - The value to validate\r\n     * @param paramName - The name of the parameter to validate\r\n     * @param message - The error message to return on invalid value\r\n     */\r\n    public static null(value: any, paramName?: string, message?: string) {\r\n        if ((!!value === false)) {\r\n            message = message || (`'${paramName || \"value\"}' cannot be null or undefined`);\r\n            throw new Error(message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates the value meets the specified expectation, otherwise throws an exception\r\n     * @param value - The value to validate\r\n     * @param predicate - The predicate used for validation\r\n     * @param paramName - The name of the parameter to validate\r\n     * @param message - The error message to return on invalid value\r\n     */\r\n    public static expression<T>(value: T, predicate: (value: T) => boolean, paramName?: string, message?: string) {\r\n        if (!!value === false || !predicate(value)) {\r\n            message = message || (`'${paramName || \"value\"}' is not a valid value`);\r\n            throw new Error(message);\r\n        }\r\n    }\r\n}\r\n","import { enc, lib, AES } from \"crypto-js\";\r\nimport Guard from \"./guard\";\r\n\r\n/**\r\n * Generates a random base64 encoded key to be used for encryption\r\n * @param keySize The key size to use, defaults to 32bit\r\n */\r\nexport function generateKey(keySize: number = 32): string {\r\n    return lib.WordArray.random(keySize).toString(enc.Base64);\r\n}\r\n\r\n/**\r\n * Encrypts the specified message with the provided key\r\n * @param message The message to encrypt\r\n * @param secret The base64 encoded secret\r\n */\r\nexport function encrypt(message: string, secret: string): string {\r\n    Guard.empty(message);\r\n    Guard.empty(secret);\r\n\r\n    try {\r\n        const secretBytes = enc.Base64.parse(secret);\r\n        const iv = lib.WordArray.random(24);\r\n        const encrypted = AES.encrypt(message, secretBytes, { iv });\r\n        const json = {\r\n            ciphertext: encrypted.ciphertext.toString(),\r\n            iv: iv.toString(),\r\n        };\r\n        const words = enc.Utf8.parse(JSON.stringify(json));\r\n\r\n        return enc.Base64.stringify(words);\r\n    } catch (e) {\r\n        throw new Error(`Error encrypting data - ${e.message}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Encryptes a javascript object with the specified key\r\n * @param message - The javascript object to encrypt\r\n * @param secret - The secret to encrypt the message\r\n */\r\nexport function encryptObject(message: any, secret: string): string {\r\n    Guard.null(message);\r\n\r\n    return encrypt(JSON.stringify(message), secret);\r\n}\r\n\r\n/**\r\n * Decrypts the specified message with the provided key\r\n * @param encodedMessage The base64 encoded encrypted data\r\n * @param secret The base64 encoded secret\r\n */\r\nexport function decrypt(encodedMessage: string, secret: string): string {\r\n    Guard.empty(encodedMessage);\r\n    Guard.empty(secret);\r\n\r\n    try {\r\n        const secretBytes = enc.Base64.parse(secret);\r\n        const json = enc.Base64.parse(encodedMessage).toString(enc.Utf8);\r\n        const params = JSON.parse(json);\r\n        const iv = enc.Hex.parse(params.iv);\r\n        const cipherParams = lib.CipherParams.create({\r\n            ciphertext: enc.Hex.parse(params.ciphertext),\r\n            iv: enc.Hex.parse(params.iv),\r\n        });\r\n        const decrypted = AES.decrypt(cipherParams, secretBytes, { iv });\r\n\r\n        return decrypted.toString(enc.Utf8);\r\n    } catch (e) {\r\n        throw new Error(`Error decrypting data - ${e.message}`);\r\n    }\r\n}\r\n/**\r\n * Decryptes a javascript object with the specified key\r\n * @param message - The encrypted base64 encded message\r\n * @param secret - The secret to decrypt the message\r\n */\r\nexport function decryptObject<T = any>(encodedMessage: string, secret: string): T {\r\n    const json = decrypt(encodedMessage, secret);\r\n    return JSON.parse(json) as T;\r\n}\r\n","import { IpcRendererProxy } from \"../../common/ipcRendererProxy\";\r\nimport { IStorageProvider } from \"./storageProviderFactory\";\r\nimport { IAssetProvider } from \"./assetProviderFactory\";\r\nimport { IAsset, IConnection, StorageType } from \"../../models/applicationState\";\r\n\r\nconst PROXY_NAME = \"LocalFileSystem\";\r\n\r\n/**\r\n * Options for Local File System\r\n * @member folderPath - Path to folder being used in provider\r\n */\r\nexport interface ILocalFileSystemProxyOptions {\r\n    folderPath: string;\r\n    relativePath: boolean;\r\n}\r\n\r\n/**\r\n * Storage Provider for Local File System. Only available in Electron application\r\n * Leverages the IpcRendererProxy\r\n */\r\nexport class LocalFileSystemProxy implements IStorageProvider, IAssetProvider {\r\n    /**\r\n     * @returns - StorageType.Local\r\n     */\r\n    public storageType: StorageType.Local;\r\n    constructor(private options?: ILocalFileSystemProxyOptions) {\r\n        if (!this.options) {\r\n            this.options = {\r\n                folderPath: null,\r\n                relativePath: false,\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select container for use in provider\r\n     */\r\n    public selectContainer(): Promise<string> {\r\n        return IpcRendererProxy.send(`${PROXY_NAME}:selectContainer`);\r\n    }\r\n\r\n    /**\r\n     * Read text from file\r\n     * @param fileName - Name of file from which to read text\r\n     */\r\n    public readText(fileName: string): Promise<string> {\r\n        const filePath = [this.options.folderPath, fileName].join(\"/\");\r\n        return IpcRendererProxy.send(`${PROXY_NAME}:readText`, [filePath]);\r\n    }\r\n\r\n    /**\r\n     * Read buffer from file\r\n     * @param fileName Name of file from which to read buffer\r\n     */\r\n    public readBinary(fileName: string): Promise<Buffer> {\r\n        const filePath = [this.options.folderPath, fileName].join(\"/\");\r\n        return IpcRendererProxy.send(`${PROXY_NAME}:readBinary`, [filePath]);\r\n    }\r\n\r\n    /**\r\n     * Delete file\r\n     * @param fileName Name of file to delete\r\n     */\r\n    public deleteFile(fileName: string): Promise<void> {\r\n        const filePath = [this.options.folderPath, fileName].join(\"/\");\r\n        return IpcRendererProxy.send(`${PROXY_NAME}:deleteFile`, [filePath]);\r\n    }\r\n\r\n    /**\r\n     * Write text to file\r\n     * @param fileName Name of target file\r\n     * @param contents Contents to be written\r\n     */\r\n    public writeText(fileName: string, contents: string): Promise<void> {\r\n        const filePath = [this.options.folderPath, fileName].join(\"/\");\r\n        return IpcRendererProxy.send(`${PROXY_NAME}:writeText`, [filePath, contents]);\r\n    }\r\n\r\n    /**\r\n     * Write buffer to file\r\n     * @param fileName Name of target file\r\n     * @param contents Contents to be written\r\n     */\r\n    public writeBinary(fileName: string, contents: Buffer): Promise<void> {\r\n        const filePath = [this.options.folderPath, fileName].join(\"/\");\r\n        return IpcRendererProxy.send(`${PROXY_NAME}:writeBinary`, [filePath, contents]);\r\n    }\r\n\r\n    /**\r\n     * List files in directory\r\n     * @param folderName - Name of folder from which to list files\r\n     * @param ext - NOT CURRENTLY USED IN IMPLEMENTATION.\r\n     */\r\n    public listFiles(folderName?: string, ext?: string): Promise<string[]> {\r\n        const folderPath = folderName ? [this.options.folderPath, folderName].join(\"/\") : this.options.folderPath;\r\n        return IpcRendererProxy.send(`${PROXY_NAME}:listFiles`, [folderPath]);\r\n    }\r\n\r\n    /**\r\n     * List directories inside another directory\r\n     * @param folderName - Directory from which to list directories\r\n     */\r\n    public listContainers(folderName?: string): Promise<string[]> {\r\n        const folderPath = folderName ? [this.options.folderPath, folderName].join(\"/\") : this.options.folderPath;\r\n        return IpcRendererProxy.send(`${PROXY_NAME}:listContainers`, [folderPath]);\r\n    }\r\n\r\n    /**\r\n     * Create local directory\r\n     * @param folderName - Name of directory to create\r\n     */\r\n    public createContainer(folderName: string): Promise<void> {\r\n        const folderPath = [this.options.folderPath, folderName].join(\"/\");\r\n        return IpcRendererProxy.send(`${PROXY_NAME}:createContainer`, [folderPath]);\r\n    }\r\n\r\n    /**\r\n     * Delete directory\r\n     * @param folderName - Name of directory to delete\r\n     */\r\n    public deleteContainer(folderName: string): Promise<void> {\r\n        const folderPath = [this.options.folderPath, folderName].join(\"/\");\r\n        return IpcRendererProxy.send(`${PROXY_NAME}:deleteContainer`, [folderPath]);\r\n    }\r\n\r\n    /**\r\n     * Retrieve assets from directory\r\n     * @param folderName - Directory containing assets\r\n     */\r\n    public getAssets(): Promise<IAsset[]> {\r\n        const { folderPath, relativePath } = this.options;\r\n        return IpcRendererProxy.send(`${PROXY_NAME}:getAssets`, [folderPath, relativePath]);\r\n    }\r\n\r\n    /**\r\n     * Adds default properties to new connections\r\n     *\r\n     * Currently adds `relativePath: true` to the providerOptions. Pre-existing connections\r\n     * will only use absolute path\r\n     *\r\n     * @param connection Connection\r\n     */\r\n    public addDefaultPropsToNewConnection(connection: IConnection): IConnection {\r\n        return connection.id ? connection : {\r\n            ...connection,\r\n            providerOptions: {\r\n                ...connection.providerOptions,\r\n                relativePath: true,\r\n            } as any,\r\n        };\r\n    }\r\n}\r\n","import Guard from \"../../../common/guard\";\r\nimport { TFRecordsImageMessage, Features, Feature, FeatureList,\r\n    BytesList, Int64List, FloatList } from \"./tensorFlowRecordsProtoBuf_pb\";\r\nimport { crc32c, maskCrc, textDecode, readInt64 } from \"./tensorFlowHelpers\";\r\nimport { FeatureType } from \"./tensorFlowBuilder\";\r\n\r\n/**\r\n * @name - TFRecords Read Class\r\n * @description - Read a TFRecords object\r\n */\r\nexport class TFRecordsReader {\r\n    private imageMessages: TFRecordsImageMessage[];\r\n\r\n    constructor(tfrecords: Buffer) {\r\n        Guard.null(tfrecords);\r\n\r\n        this.imageMessages = [];\r\n        let position = 0;\r\n\r\n        while (position < tfrecords.length) {\r\n            const lengthBuffer = tfrecords.slice(position, position + 8);\r\n            const dataLength = readInt64(lengthBuffer);\r\n            const lengthCrc = maskCrc(crc32c(lengthBuffer));\r\n            position += 8;\r\n\r\n            const expectedLengthCrc = tfrecords.readUInt32LE(position);\r\n            position += 4;\r\n\r\n            if (lengthCrc !== expectedLengthCrc) {\r\n                console.log(\"Wrong Length CRC\");\r\n                break;\r\n            }\r\n\r\n            const dataBuffer = tfrecords.slice(position, position + dataLength);\r\n            const dataCrc = maskCrc(crc32c(dataBuffer));\r\n            position += dataLength;\r\n\r\n            const expectedDataCrc = tfrecords.readUInt32LE(position);\r\n            position += 4;\r\n\r\n            if (dataCrc !== expectedDataCrc) {\r\n                console.log(\"Wrong Data CRC\");\r\n                break;\r\n            }\r\n\r\n            // Deserialize TFRecord from dataBuffer\r\n            const imageMessage: TFRecordsImageMessage = TFRecordsImageMessage.deserializeBinary(dataBuffer);\r\n\r\n            this.imageMessages.push(imageMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description - Return the number of TFRecords read\r\n     */\r\n    get length(): number {\r\n        return this.imageMessages.length;\r\n    }\r\n\r\n    /**\r\n     * @description - Return the TFRecords in a JSON Object Array format\r\n     */\r\n    public toArray(): object[] {\r\n        return this.imageMessages.map((imageMessage) => imageMessage.toObject());\r\n    }\r\n\r\n    /**\r\n     * @recordPos - Record Position\r\n     * @key - Feature Key\r\n     * @type - Feature Type\r\n     * @description - Get a Int64 | Float | String | Binary value\r\n     */\r\n    public getFeature(recordPos: number, key: string, type: FeatureType): string | number | Uint8Array {\r\n        const message = this.imageMessages[recordPos];\r\n        const feature = message.getContext().getFeatureMap().get(key);\r\n\r\n        switch (type) {\r\n            case FeatureType.String:\r\n                return textDecode(feature.getBytesList().array[0][0]);\r\n            case FeatureType.Binary:\r\n                return feature.getBytesList().array[0][0];\r\n            case FeatureType.Int64:\r\n                return feature.getInt64List().array[0][0];\r\n            case FeatureType.Float:\r\n                return feature.getFloatList().array[0][0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @recordPos - Record Position\r\n     * @key - Feature Key\r\n     * @type - Feature Type\r\n     * @description - Get an array of Int64 | Float | String | Binary value\r\n     */\r\n    public getArrayFeature(recordPos: number, key: string, type: FeatureType): string[] | number[] | Uint8Array[] {\r\n        const message = this.imageMessages[recordPos];\r\n        const feature = message.getContext().getFeatureMap().get(key);\r\n\r\n        switch (type) {\r\n            case FeatureType.String:\r\n                return feature.getBytesList().array[0].map((buffer) => textDecode(buffer));\r\n            case FeatureType.Binary:\r\n                return feature.getBytesList().array[0];\r\n            case FeatureType.Int64:\r\n                return feature.getInt64List().array[0];\r\n            case FeatureType.Float:\r\n                return feature.getFloatList().array[0];\r\n        }\r\n    }\r\n}\r\n","import React, { SyntheticEvent, ReactElement } from \"react\";\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\n\r\n/**\r\n * Accepts any number of parameters and returns a string\r\n */\r\nexport type MessageFormatHandler = (...params: any[]) => string;\r\n\r\n/**\r\n * Properties for Message Box component\r\n * @member title - Title for message box\r\n * @member message - Message for message box\r\n * @member params - Array of additional parameters\r\n * @member onButtonSelect - Function to call when button is selected\r\n * @member onCancel - Function to call upon cancel\r\n */\r\nexport interface IMessageBoxProps {\r\n    title: string;\r\n    message: string | ReactElement<any> | MessageFormatHandler;\r\n    params?: any[];\r\n    onButtonSelect?: (button: HTMLButtonElement) => void;\r\n    onCancel?: () => void;\r\n    show?: boolean;\r\n    hideFooter?: boolean;\r\n}\r\n\r\n/**\r\n * State for Message Box\r\n * @member isOpen - Message box is open\r\n * @member isRendered - Message box is rendered\r\n * @member isButtonSelected - Message box button is selected\r\n */\r\nexport interface IMessageBoxState {\r\n    isOpen: boolean;\r\n    isRendered: boolean;\r\n    isButtonSelected: boolean;\r\n}\r\n\r\n/**\r\n * Generic modal that displays a message\r\n */\r\nexport default class MessageBox extends React.Component<IMessageBoxProps, IMessageBoxState> {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.state = {\r\n            isOpen: props.show,\r\n            isRendered: props.show,\r\n            isButtonSelected: false,\r\n        };\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n        this.open = this.open.bind(this);\r\n        this.close = this.close.bind(this);\r\n        this.onFooterClick = this.onFooterClick.bind(this);\r\n        this.onClosed = this.onClosed.bind(this);\r\n    }\r\n\r\n    public render() {\r\n        if (!this.state.isRendered) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <Modal className=\"messagebox-modal\"\r\n                isOpen={this.state.isOpen}\r\n                onClosed={this.onClosed}>\r\n                <ModalHeader toggle={this.toggle}>{this.props.title}</ModalHeader>\r\n                <ModalBody>{this.getMessage(this.props.message)}</ModalBody>\r\n                {!this.props.hideFooter && <ModalFooter onClick={this.onFooterClick}>\r\n                    {this.props.children}\r\n                </ModalFooter>}\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    public open(): void {\r\n        this.setState({\r\n            isOpen: true,\r\n            isRendered: true,\r\n            isButtonSelected: false,\r\n        });\r\n    }\r\n\r\n    public close(): void {\r\n        this.setState({\r\n            isOpen: false,\r\n        }, () => {\r\n            if (!this.state.isButtonSelected && this.props.onCancel) {\r\n                this.props.onCancel();\r\n            }\r\n        });\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: Readonly<IMessageBoxProps>): void {\r\n        if (prevProps.show !== this.props.show) {\r\n            this.setState({\r\n                isOpen: this.props.show,\r\n                isRendered: this.props.show,\r\n            });\r\n        }\r\n    }\r\n\r\n    private getMessage = (message: string | MessageFormatHandler | ReactElement<any>) => {\r\n        if (typeof message === \"function\") {\r\n            return message.apply(this, this.props.params);\r\n        } else {\r\n            return message;\r\n        }\r\n    }\r\n\r\n    private onFooterClick(evt: SyntheticEvent) {\r\n        const htmlElement = evt.target as HTMLButtonElement;\r\n        if (htmlElement.tagName === \"BUTTON\") {\r\n            this.setState({\r\n                isButtonSelected: true,\r\n            }, () => {\r\n                this.close();\r\n                if (this.props.onButtonSelect) {\r\n                    this.props.onButtonSelect(htmlElement);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private toggle() {\r\n        if (this.state.isOpen) {\r\n            this.close();\r\n        } else {\r\n            this.open();\r\n        }\r\n    }\r\n\r\n    private onClosed() {\r\n        this.setState({\r\n            isRendered: false,\r\n        });\r\n    }\r\n}\r\n","export const itemTemplate = \"\\\r\nitem {\\n\\\r\n id: ${id}\\n\\\r\n name: '${tag}'\\n\\\r\n}\\n\";\r\n\r\nexport const annotationTemplate = \"\\\r\n<annotation verified=\\\"yes\\\">\\n\\\r\n    <folder>Annotation</folder>\\n\\\r\n    <filename>${fileName}</filename>\\n\\\r\n    <path>${filePath}</path>\\n\\\r\n    <source>\\n\\\r\n        <database>Unknown</database>\\n\\\r\n    </source>\\n\\\r\n    <size>\\n\\\r\n        <width>${width}</width>\\n\\\r\n        <height>${height}</height>\\n\\\r\n        <depth>3</depth>\\n\\\r\n    </size\\>\\n\\\r\n    <segmented>0</segmented>\\n\\\r\n    ${objects}\\n\\\r\n</annotation\\>\\n\";\r\n\r\nexport const objectTemplate = \"\\\r\n<object>\\n\\\r\n    <name>${name}</name>\\n\\\r\n    <pose>Unspecified</pose>\\n\\\r\n    <truncated>0</truncated>\\n\\\r\n    <difficult>0</difficult>\\n\\\r\n    <bndbox>\\n\\\r\n        <xmin>${xmin}</xmin>\\n\\\r\n        <ymin>${ymin}</ymin>\\n\\\r\n        <xmax>${xmax}</xmax>\\n\\\r\n        <ymax>${ymax}</ymax>\\n\\\r\n    </bndbox>\\n\\\r\n</object>\";\r\n","import { IAssetMetadata, ITag } from \"../../models/applicationState\";\r\n\r\n/**\r\n * A helper function to split train and test assets\r\n * @param template String containing variables\r\n * @param params Params containing substitution values\r\n */\r\nexport function splitTestAsset(allAssets: IAssetMetadata[], tags: ITag[], testSplitRatio: number): string[] {\r\n    if (testSplitRatio <= 0 || testSplitRatio > 1) { return []; }\r\n\r\n    const testAssets: string[] = [];\r\n    const tagsAssetDict: { [index: string]: { assetList: Set<string> } } = {};\r\n    tags.forEach((tag) => tagsAssetDict[tag.name] = { assetList: new Set() });\r\n    allAssets.forEach((assetMetadata) => {\r\n        assetMetadata.regions.forEach((region) => {\r\n            region.tags.forEach((tagName) => {\r\n                if (tagsAssetDict[tagName]) {\r\n                    tagsAssetDict[tagName].assetList.add(assetMetadata.asset.name);\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n    for (const tagKey of Object.keys(tagsAssetDict)) {\r\n        const assetList = tagsAssetDict[tagKey].assetList;\r\n        const testCount = Math.ceil(assetList.size * testSplitRatio);\r\n        testAssets.push(...Array.from(assetList).slice(0, testCount));\r\n    }\r\n    return testAssets;\r\n}\r\n","import { TFRecordsImageMessage, Features, Feature, FeatureList,\r\n    BytesList, Int64List, FloatList } from \"./tensorFlowRecordsProtoBuf_pb\";\r\nimport { crc32c, maskCrc, getInt64Buffer, getInt32Buffer, textEncode } from \"./tensorFlowHelpers\";\r\n\r\n/**\r\n * @name - TFRecords Feature Type\r\n * @description - Defines the type of TFRecords Feature\r\n * @member String - Specifies a Feature as a string\r\n * @member Binary - Specifies a Feature as a binary UInt8Array\r\n * @member Int64 - Specifies a Feature as a Int64\r\n * @member Float - Specifies a Feature as a Float\r\n */\r\nexport enum FeatureType {\r\n    String = 0,\r\n    Binary = 1,\r\n    Int64 = 2,\r\n    Float = 3,\r\n}\r\n\r\n/**\r\n * @name - TFRecords Builder Class\r\n * @description - Create a TFRecords object\r\n */\r\nexport class TFRecordsBuilder {\r\n    /**\r\n     * @records - An Array of TFRecord Buffer created with releaseTFRecord()\r\n     * @description - Return a Buffer representation of a TFRecords object\r\n     */\r\n    public static buildTFRecords(records: Buffer[]): Buffer {\r\n        return Buffer.concat(records.map((record) => {\r\n            const length = record.length;\r\n\r\n            // Get TFRecords CRCs for TFRecords Header and Footer\r\n            const bufferLength = getInt64Buffer(length);\r\n            const bufferLengthMaskedCRC = getInt32Buffer(maskCrc(crc32c(bufferLength)));\r\n            const bufferDataMaskedCRC = getInt32Buffer(maskCrc(crc32c(record)));\r\n\r\n            // Concatenate all TFRecords Header, Data and Footer buffer\r\n            return Buffer.concat([bufferLength,\r\n                                  bufferLengthMaskedCRC,\r\n                                  record,\r\n                                  bufferDataMaskedCRC]);\r\n        }));\r\n    }\r\n\r\n    private features: Features;\r\n\r\n    constructor() {\r\n        this.features = new Features();\r\n    }\r\n\r\n    /**\r\n     * @key - Feature Key\r\n     * @type - Feature Type\r\n     * @value - A Int64 | Float | String | Binary value\r\n     * @description - Add a Int64 | Float | String | Binary value feature\r\n     */\r\n    public addFeature(key: string, type: FeatureType, value: string | number | Uint8Array) {\r\n        this.addArrayFeature(key, type, [value]);\r\n    }\r\n\r\n    /**\r\n     * @key - Feature Key\r\n     * @type - Feature Type\r\n     * @value - An Array of Int64 | Float | String | Binary values\r\n     * @description - Add an Array of Int64 | Float | String | Binary values feature\r\n     */\r\n    public addArrayFeature<T extends string | number | Uint8Array>(key: string, type: FeatureType, values: T[]) {\r\n        const feature = new Feature();\r\n\r\n        switch (type) {\r\n            case FeatureType.String:\r\n                const stringList = new BytesList();\r\n                values.forEach((value) => {\r\n                    stringList.addValue(textEncode(value as string));\r\n                });\r\n                feature.setBytesList(stringList);\r\n                break;\r\n            case FeatureType.Binary:\r\n                const byteList = new BytesList();\r\n                values.forEach((value) => {\r\n                    byteList.addValue(value);\r\n                });\r\n                feature.setBytesList(byteList);\r\n                break;\r\n            case FeatureType.Int64:\r\n                const intList = new Int64List();\r\n                values.forEach((value) => {\r\n                    intList.addValue(value);\r\n                });\r\n                feature.setInt64List(intList);\r\n                break;\r\n            case FeatureType.Float:\r\n                const floatList = new FloatList();\r\n                values.forEach((value) => {\r\n                    floatList.addValue(value);\r\n                });\r\n                feature.setFloatList(floatList);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const featuresMap = this.features.getFeatureMap();\r\n        featuresMap.set(key, feature);\r\n    }\r\n\r\n    /**\r\n     * @description - Return a Buffer representation of a single TFRecord\r\n     */\r\n    public build(): Buffer {\r\n        // Get Protocol Buffer TFRecords object with exported image features\r\n        const imageMessage = new TFRecordsImageMessage();\r\n        imageMessage.setContext(this.features);\r\n\r\n        // Serialize Protocol Buffer in a buffer\r\n        const bytes = imageMessage.serializeBinary();\r\n        return new Buffer(bytes);\r\n    }\r\n}\r\n","import { IAppStrings } from \"../strings\";\r\n\r\n/**\r\n * App Strings for Spanish language\r\n */\r\nexport const spanish: IAppStrings = {\r\n    appName: \"Herramienta Visual de Etiquetado de Objetos\",\r\n    common: {\r\n        displayName: \"Nombre para Mostrar\",\r\n        description: \"Descripción\",\r\n        submit: \"Enviar\",\r\n        cancel: \"Cancelar\",\r\n        save: \"Guardar\",\r\n        delete: \"Borrar\",\r\n        provider: \"Proveedor\",\r\n        homePage: \"Página de Inicio\",\r\n    },\r\n    titleBar: {\r\n        help: \"Ayuda\",\r\n        minimize: \"Minimizar\",\r\n        maximize: \"Maximizar\",\r\n        restore: \"Restaurar\",\r\n        close: \"Cerrar\",\r\n    },\r\n    homePage: {\r\n        newProject: \"Nuevo Proyecto\",\r\n        recentProjects: \"Proyectos Recientes\",\r\n        openLocalProject: {\r\n            title: \"Abrir Proyecto Local\",\r\n        },\r\n        openCloudProject: {\r\n            title: \"Abrir Proyecto de la Nube\",\r\n            selectConnection: \"Select a Connection\",\r\n        },\r\n        deleteProject: {\r\n            title: \"Borrar Proyecto\",\r\n            confirmation: \"¿Está seguro que quiere borrar el proyecto\",\r\n        },\r\n        importProject: {\r\n            title: \"Importar Proyecto\",\r\n            confirmation: \"¿Está seguro que quiere convertir el proyecto ${project.file.name} \" +\r\n                \"a formato v2? Le recomendamos que haga una copia de seguridad de su archivo de proyecto.\",\r\n        },\r\n        messages: {\r\n            deleteSuccess: \"${project.name} eliminado correctamente\",\r\n        },\r\n    },\r\n    appSettings: {\r\n        title: \"Configuración de Aplicación\",\r\n        storageTitle: \"Configuración de Almacenamiento\",\r\n        uiHelp: \"Donde se guardan sus configuraciones\",\r\n        save: \"Guardar configuración\",\r\n        securityToken: {\r\n            name: {\r\n                title: \"Nombre\",\r\n            },\r\n            key: {\r\n                title: \"Clave\",\r\n            },\r\n        },\r\n        securityTokens: {\r\n            title: \"Tokens de seguridad\",\r\n            description: \"Los tokens de seguridad se utilizan para cifrar datos confidenciales \\\r\n                dentro de la configuración del proyecto\",\r\n        },\r\n        version: {\r\n            description: \"Versión:\",\r\n        },\r\n        commit: \"Cometer SHA\",\r\n        devTools: {\r\n            description: \"Abrir herramientas de desarrollo de aplicaciones para ayudar a diagnosticar problemas.\",\r\n            button: \"Alternar Herramientas de Desarrollo\",\r\n        },\r\n        reload: {\r\n            description: \"Recargar la aplicación descartando todos los cambios actuales\",\r\n            button: \"Recargar la aplicación\",\r\n        },\r\n        messages: {\r\n            saveSuccess: \"Configuración de la aplicación guardada correctamente\",\r\n        },\r\n    },\r\n    projectSettings: {\r\n        title: \"Configuración de Proyecto\",\r\n        securityToken: {\r\n            title: \"Token de seguridad\",\r\n            description: \"Se utiliza para cifrar datos confidenciales dentro de archivos de proyecto\",\r\n        },\r\n        useSecurityToken: {\r\n            title: \"Usar Token de Seguridad\",\r\n            description: \"Si está habilitado, los datos confidenciales se cifrarán\",\r\n        },\r\n        save: \"Guardar el Proyecto\",\r\n        sourceConnection: {\r\n            title: \"Conexión de Origen\",\r\n            description: \"De donde se gargan sus activos\",\r\n        },\r\n        targetConnection: {\r\n            title: \"Conexión de Destino\",\r\n            description: \"Donde se guarda su proyecto y sus datos exportados\",\r\n        },\r\n        videoSettings: {\r\n            title: \"Ajustes de video\",\r\n            description: \"La velocidad a la que se extraen los marcos para el etiquetado.\",\r\n            frameExtractionRate: \"Tasa de extracción de cuadros (cuadros por segundo de video)\",\r\n        },\r\n        addConnection: \"Agregar Conexión\",\r\n        messages: {\r\n            saveSuccess: \"Guardado correctamente ${project.name} configuración del proyecto\",\r\n        },\r\n    },\r\n    projectMetrics: {\r\n        title: \"Métricas del proyecto\",\r\n        assetsSectionTitle: \"Activos\",\r\n        totalAssetCount: \"Total de activos\",\r\n        visitedAssets: \"Activos visitados (${count})\",\r\n        taggedAssets: \"Activos etiquetados (${count})\",\r\n        nonTaggedAssets: \"Activos no etiquetados (${count})\",\r\n        nonVisitedAssets: \"Activos no visitados (${count})\",\r\n        tagsSectionTitle: \"Etiquetas & etiquetas\",\r\n        totalRegionCount: \"Total de regiones\",\r\n        totalTagCount: \"Total de etiquetas\",\r\n        avgTagCountPerAsset: \"Recuento promedio de etiquetas por activo\",\r\n    },\r\n    tags: {\r\n        title: \"Etiquetas\",\r\n        placeholder: \"Agregar nuevo etiqueta\",\r\n        editor: \"Editor de Etiquetas\",\r\n        modal: {\r\n            name: \"Nombre de Etiqueta\",\r\n            color: \"Color de Etiqueta\",\r\n        },\r\n        colors: {\r\n            white: \"Blanco\",\r\n            gray: \"Gris\",\r\n            red: \"Rojo\",\r\n            maroon: \"Granate\",\r\n            yellow: \"Amarillo\",\r\n            olive: \"Olivo\",\r\n            lime: \"Lima\",\r\n            green: \"Verde\",\r\n            aqua: \"Aqua\",\r\n            teal: \"Trullo\",\r\n            blue: \"Azul\",\r\n            navy: \"Azul Marino\",\r\n            fuschia: \"Fuschia\",\r\n            purple: \"Púrpura\",\r\n        },\r\n        warnings: {\r\n            existingName: \"Nombre de etiqueta ya existe. Elige otro nombre\",\r\n            emptyName: \"El nombre de etiqueta no puede ser vacío\",\r\n            unknownTagName: \"Desconocido\",\r\n        },\r\n        toolbar: {\r\n            add: \"Agregar nueva etiqueta\",\r\n            search: \"Buscar entre etiquetas\",\r\n            edit: \"Editar etiqueta\",\r\n            lock: \"Bloquear etiqueta\",\r\n            moveDown: \"Mover etiqueta hacia abajo\",\r\n            moveUp: \"Mover etiqueta hacia arriba\",\r\n            delete: \"Borrar etiqueta\",\r\n        },\r\n    },\r\n    connections: {\r\n        title: \"Conexiones\",\r\n        save: \"Guardar Conexión\",\r\n        details: \"Detalles de Conexión\",\r\n        settings: \"Configuración de Conexión\",\r\n        instructions: \"Por favor seleccione una conexión para editar\",\r\n        messages: {\r\n            saveSuccess: \"${connection.name} guardado correctamente\",\r\n            deleteSuccess: \"${connection.name} eliminado correctamente\",\r\n        },\r\n        imageCorsWarning: \"Advertencia: Cuando se usa VoTT en un navegador web, es posible que algunos activos de este \\\r\n                          Búsqueda de Imágenes Bing no se exporten correctamente debido a las restricciones de CORS \\\r\n                          (Recursos de Origen Cruzado).\",\r\n        blobCorsWarning: \"Advertencia: CORS (Recursos de Origen Cruzado) debe estar habilitado en la \\\r\n                          cuenta de Azure Blob Storage para poder usarlo como una conexión de origen o destino. Puede \\\r\n                          encontrar más información sobre cómo habilitar CORS en la {0}.\",\r\n        azDocLinkText: \"documentación de Azure.\",\r\n        providers: {\r\n            azureBlob: {\r\n                title: \"Azure Blob Storage\",\r\n                description: \"\",\r\n                accountName: {\r\n                    title: \"Nombre de cuenta\",\r\n                    description: \"\",\r\n                },\r\n                containerName: {\r\n                    title: \"Nombre del contenedor\",\r\n                    description: \"\",\r\n                },\r\n                sas: {\r\n                    title: \"SAS\",\r\n                    description: \"Firma de acceso compartido utilizada para autenticarse en la cuenta de BLOB Storage\",\r\n                },\r\n                createContainer: {\r\n                    title: \"Crear contenedor\",\r\n                    description: \"Crea el contenedor de blobs si aún no existe\",\r\n                },\r\n            },\r\n            bing: {\r\n                title: \"Búsqueda de Imágenes Bing\",\r\n                options: {\r\n                    title: \"Opciones de Búsqueda de Imágenes Bing\",\r\n                },\r\n                endpoint: {\r\n                    title: \"Extremo\",\r\n                    description: \"El punto de conexión que aparece en el recurso de Bing Search Azure\",\r\n                },\r\n                apiKey: {\r\n                    title: \"Clave API\",\r\n                    description: \"Una clave de API que aparece en el recurso de Bing Search Azure\",\r\n                },\r\n                query: {\r\n                    title: \"Consulta\",\r\n                    description: \"La consulta de búsqueda utilizada para rellenar la conexión\",\r\n                },\r\n                aspectRatio: {\r\n                    title: \"Relación de Aspecto\",\r\n                    description: \"Filtra los resultados por la relación de aspecto especificada\",\r\n                    options: {\r\n                        all: \"Todos\",\r\n                        square: \"Cuadrado\",\r\n                        wide: \"Ancho\",\r\n                        tall: \"Alto\",\r\n                    },\r\n                },\r\n                licenseType: {\r\n                    title: \"Tipo de licencia\",\r\n                    description: \"Filtra los resultados según el tipo de licencia especificado\",\r\n                    options: {\r\n                        all: \"Todos (no filtra ninguna imagen)\",\r\n                        any: \"Cualquier imagen con cualquier tipo de licencia\",\r\n                        public: \"Dominio público\",\r\n                        share: \"Libre para compartir y usar\",\r\n                        shareCommercially: \"Libre para compartir y usar comercialmente\",\r\n                        modify: \"Libre de modificar, compartir y usar\",\r\n                        modifyCommercially: \"Libre de modificar, compartir y ues comercialmente\",\r\n                    },\r\n                },\r\n                size: {\r\n                    title: \"Tamaño\",\r\n                    description: \"Filtra los resultados según el tamaño especificado\",\r\n                    options: {\r\n                        all: \"Todo\",\r\n                        small: \"Pequeño (Menos de 200x200)\",\r\n                        medium: \"Medio (Menos de 500x500)\",\r\n                        large: \"Grande (mayor de 500x500)\",\r\n                        wallpaper: \"Fondo de pantalla (imágenes extra grandes)\",\r\n                    },\r\n                },\r\n            },\r\n            local: {\r\n                title: \"Sistema de Archivos Local\",\r\n                folderPath: \"Ruta de la carpeta\",\r\n                selectFolder: \"Seleccionar la carpeta\",\r\n                chooseFolder: \"Elijir la carpeta\",\r\n            },\r\n        },\r\n    },\r\n    editorPage: {\r\n        width: \"Anchura\",\r\n        height: \"Altura\",\r\n        tagged: \"Etiquetado\",\r\n        visited: \"Visitado\",\r\n        toolbar: {\r\n            select: \"Seleccionar\",\r\n            pan: \"Pan\",\r\n            drawRectangle: \"Dibujar Rectángulo\",\r\n            drawPolygon: \"Dibujar Polígono\",\r\n            copyRectangle: \"Copia rectángulo\",\r\n            copy: \"Copiar regiones\",\r\n            cut: \"Cortar regiones\",\r\n            paste: \"Pegar regiones\",\r\n            removeAllRegions: \"Eliminar Todas Las Regiones\",\r\n            previousAsset: \"Activo anterior\",\r\n            nextAsset: \"Siguiente activo\",\r\n            saveProject: \"Guardar Proyecto\",\r\n            exportProject: \"Exprtar Proyecto\",\r\n            activeLearning: \"Aprendizaje Activo\",\r\n        },\r\n        videoPlayer: {\r\n            previousTaggedFrame: {\r\n                tooltip: \"Fotograma etiquetado anterior\",\r\n            },\r\n            nextTaggedFrame: {\r\n                tooltip: \"Siguiente marco etiquetado\",\r\n            },\r\n            previousExpectedFrame: {\r\n                tooltip: \"Fotograma anterior\",\r\n            },\r\n            nextExpectedFrame: {\r\n                tooltip: \"Siguiente marco\",\r\n            },\r\n        },\r\n        help: {\r\n            title: \"Abrir/cerrar el menú de ayuda\",\r\n            escape: \"Escapar el menú de ayuda\",\r\n        },\r\n        assetError: \"No se puede mostrar el activo\",\r\n        tags: {\r\n            hotKey: {\r\n                apply: \"Aplicar etiqueta con tecla de acceso rápido\",\r\n                lock: \"Bloquear etiqueta con tecla de acceso rápido\",\r\n            },\r\n            rename: {\r\n                title: \"Cambiar el nombre de la etiqueta\",\r\n                confirmation: \"¿Está seguro que quiere cambiar el nombre de esta etiqueta? \\\r\n                Será cambiada en todos los activos\",\r\n            },\r\n            delete: {\r\n                title: \"Delete Tag\",\r\n                confirmation: \"¿Está seguro que quiere borrar esta etiqueta? Será borrada en todos \\\r\n                los activos y en las regiones donde esta etiqueta sea la única, la region también será borrada\",\r\n            },\r\n        },\r\n        canvas: {\r\n            removeAllRegions: {\r\n                title: \"Borrar Regiones\",\r\n                confirmation: \"¿Está seguro que quiere borrar todas las regiones?\",\r\n            },\r\n        },\r\n        messages: {\r\n            enforceTaggedRegions: {\r\n                title: \"Las regiones no válidas detectadas\",\r\n                description: \"1 o más regiones no se han etiquetado.  \\\r\n                    Por favor, etiquete todas las regiones antes de continuar con el siguiente activo.\",\r\n            },\r\n        },\r\n    },\r\n    export: {\r\n        title: \"Exportar\",\r\n        settings: \"Configuración de Exportación\",\r\n        saveSettings: \"Guardar Configuración de Exportación\",\r\n        providers: {\r\n            common: {\r\n                properties: {\r\n                    assetState: {\r\n                        title: \"Estado del activo\",\r\n                        description: \"Qué activos incluir en la exportación\",\r\n                        options: {\r\n                            all: \"Todos los activos\",\r\n                            visited: \"Solo activos visitados\",\r\n                            tagged: \"Solo activos etiquetados\",\r\n                        },\r\n                    },\r\n                    testTrainSplit: {\r\n                        title: \"La división para entrenar y comprobar\",\r\n                        description: \"La división de datos para utilizar entre el entrenamiento y la comprobación\",\r\n                    },\r\n                    includeImages: {\r\n                        title: \"Incluir imágenes\",\r\n                        description: \"Si desea o no incluir activos de imagen binaria en la conexión de destino\",\r\n                    },\r\n                },\r\n            },\r\n            vottJson: {\r\n                displayName: \"VoTT JSON\",\r\n            },\r\n            azureCV: {\r\n                displayName: \"Servicio de Visión Personalizada Azure\",\r\n                regions: {\r\n                    australiaEast: \"Australia este\",\r\n                    centralIndia: \"Centro de la India\",\r\n                    eastUs: \"Este de EE.\",\r\n                    eastUs2: \"Este US 2\",\r\n                    japanEast: \"Japón este\",\r\n                    northCentralUs: \"Centro norte de EE.\",\r\n                    northEurope: \"Europa del norte\",\r\n                    southCentralUs: \"Centro sur de EE.\",\r\n                    southeastAsia: \"Sudeste asiático\",\r\n                    ukSouth: \"UK sur\",\r\n                    westUs2: \"West US 2\",\r\n                    westEurope: \"Europa occidental\",\r\n                },\r\n                properties: {\r\n                    apiKey: {\r\n                        title: \"Clave de API\",\r\n                    },\r\n                    region: {\r\n                        title: \"Región\",\r\n                        description: \"La región de Azure donde se implementa el servicio\",\r\n                    },\r\n                    classificationType: {\r\n                        title: \"Tipo de clasificación\",\r\n                        options: {\r\n                            multiLabel: \"Varias etiquetas por imagen\",\r\n                            multiClass: \"Una sola etiqueta por imagen\",\r\n                        },\r\n                    },\r\n                    name: {\r\n                        title: \"Nombre del proyecto\",\r\n                    },\r\n                    description: {\r\n                        title: \"Descripción del proyecto\",\r\n                    },\r\n                    domainId: {\r\n                        title: \"Dominio\",\r\n                    },\r\n                    newOrExisting: {\r\n                        title: \"Proyecto nuevo o existente\",\r\n                        options: {\r\n                            new: \"Nuevo proyecto\",\r\n                            existing: \"Proyecto existente\",\r\n                        },\r\n                    },\r\n                    projectId: {\r\n                        title: \"Nombre del proyecto\",\r\n                    },\r\n                    projectType: {\r\n                        title: \"Tipo de proyecto\",\r\n                        options: {\r\n                            classification: \"Clasificación\",\r\n                            objectDetection: \"Detección de objetos\",\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            tfRecords: {\r\n                displayName: \"Registros de Tensorflow\",\r\n            },\r\n            pascalVoc: {\r\n                displayName: \"Pascal VOC\",\r\n                exportUnassigned: {\r\n                    title: \"Exportar sin asignar\",\r\n                    description: \"Si se incluyen o no etiquetas no asignadas en los datos exportados\",\r\n                },\r\n            },\r\n            cntk: {\r\n                displayName: \"Microsoft Cognitive Toolkit (CNTK)\",\r\n            },\r\n            csv: {\r\n                displayName: \"Los valores separados por comas (CSV)\",\r\n            },\r\n        },\r\n        messages: {\r\n            saveSuccess: \"Configuración de exportación guardada correctamente\",\r\n        },\r\n    },\r\n    activeLearning: {\r\n        title: \"Aprendizaje Activo\",\r\n        form: {\r\n            properties: {\r\n                modelPathType: {\r\n                    title: \"Proveedor del modelo\",\r\n                    description: \"Fuente desde la cual cargar el modelo\",\r\n                    options: {\r\n                        preTrained: \"SSD de coco pre-entrenado\",\r\n                        customFilePath: \"Personalizado (ruta de archivo)\",\r\n                        customWebUrl: \"Personalizado (URL)\",\r\n                    },\r\n                },\r\n                autoDetect: {\r\n                    title: \"Detección automática\",\r\n                    description: \"Si desea o no realizar automáticamente predicciones a \\\r\n                        medida que navega entre activos\",\r\n                },\r\n                modelPath: {\r\n                    title: \"Ruta de modelo\",\r\n                    description: \"Seleccione un modelo de su sistema de archivos local\",\r\n                },\r\n                modelUrl: {\r\n                    title: \"URL del modelo\",\r\n                    description: \"Cargue el modelo desde una URL web pública\",\r\n                },\r\n                predictTag: {\r\n                    title: \"Predecir etiqueta\",\r\n                    description: \"Si se incluirán o no automáticamente las etiquetas en las predicciones\",\r\n                },\r\n            },\r\n        },\r\n        messages: {\r\n            loadingModel: \"Cargando modelo...\",\r\n            errorLoadModel: \"Error al cargar el modelo\",\r\n            saveSuccess: \"La configuración de aprendizaje activa se ha guardada correctamente\",\r\n        },\r\n    },\r\n    profile: {\r\n        settings: \"Configuración de Perfíl\",\r\n    },\r\n    errors: {\r\n        unknown: {\r\n            title: \"Error desconocido\",\r\n            message: \"La aplicación contó un error desconocido.  Por favor inténtalo de nuevo.\",\r\n        },\r\n        projectUploadError: {\r\n            title: \"Error al cargar el archivo\",\r\n            message: `Se ha cargado un error al cargar el archivo.\r\n                Compruebe que el archivo es del tipo correcto e inténtelo de nuevo.`,\r\n        },\r\n        genericRenderError: {\r\n            title: \"Error desconocido\",\r\n            message: \"La aplicación contó un error desconocido.  Por favor inténtalo de nuevo.\",\r\n        },\r\n        projectInvalidSecurityToken: {\r\n            title: \"Error al cargar el archivo de proyecto\",\r\n            message: \"Asegúrese de que el token de seguridad del proyecto existe\",\r\n        },\r\n        projectInvalidJson: {\r\n            title: \"Error al analizar el archivo de proyecto\",\r\n            message: \"El archivo de proyecto no es válido JSON\",\r\n        },\r\n        projectDeleteError: {\r\n            title: \"Error al eliminar el proyecto\",\r\n            message: `Se ha producido un error al eliminar el proyecto.\r\n                Validar el archivo de proyecto y el token de seguridad existen e inténtelo de nuevo`,\r\n        },\r\n        securityTokenNotFound: {\r\n            title: \"Error al cargar el archivo del proyecto\",\r\n            message: `El token de seguridad al que hace referencia el proyecto no se encuentra en la\r\n                configuración de la aplicación actual. Compruebe que existe el token de seguridad e intente\r\n                volver a cargar el proyecto.`,\r\n        },\r\n        canvasError: {\r\n            title: \"Error al cargar el lienzo\",\r\n            message: `Se produjo un error al cargar el lienzo, verifique los activos del\r\n                proyecto y vuelva a intentarlo.`,\r\n        },\r\n        importError: {\r\n            title: \"Error al importar el proyecto V1\",\r\n            message: \"Hubo un error al importar el proyecto V1. Revisa el archivo del proyecto y vuelve a intentarlo\",\r\n        },\r\n        pasteRegionTooBigError: {\r\n            title: \"Error al pegar region al activo\",\r\n            message: \"Hubo un error al pagar el region al activo. Intenta copiar otra region\",\r\n        },\r\n        exportFormatNotFound: {\r\n            title: \"Error exportando proyecto\",\r\n            message: `Proyecto falta el formato de exportación. Seleccione un formato de exportación en la página\r\n            de configuración de exportación.`,\r\n        },\r\n        activeLearningPredictionError: {\r\n            title: \"Error de aprendizaje\",\r\n            message: \"Se ha producido un error al predecir regiones en el activo actual. \\\r\n                Compruebe la configuración de aprendizaje activa y vuelva a intentarlo\",\r\n        },\r\n    },\r\n};\r\n","import { IAppStrings } from \"../strings\";\r\n\r\n/**\r\n * App Strings for Japanese language from Google Translate\r\n */\r\nexport const japanese: IAppStrings = {\r\n    appName: \"ビジュアル オブジェクトタグ付けツール\", // Visual Object Tagging Tool,\r\n    common: {\r\n        displayName: \"表示名\", // Display Name,\r\n        description: \"説明\", // Description,\r\n        submit: \"送信\", // Submit,\r\n        cancel: \"キャンセル\", // Cancel,\r\n        save: \"保存\", // Save,\r\n        delete: \"削除\", // Delete,\r\n        provider: \"プロバイダー\", // Provider,\r\n        homePage: \"ホーム ページ\",  // Home Page\"\r\n    },\r\n    titleBar: {\r\n        help: \"ヘルプ\", // Help,\r\n        minimize: \"最小化\", // Minimize,\r\n        maximize: \"最大化\", // Maximize,\r\n        restore: \"戻す\", // Restore,\r\n        close: \"閉じる\", // Close\"\r\n    },\r\n    homePage: {\r\n        newProject: \"新規プロジェクト\", // New Project,\r\n        openLocalProject: {\r\n            title: \"ローカルプロジェクトを開く\", // Open Local Project\"\r\n        },\r\n        openCloudProject: {\r\n            title: \"クラウドプロジェクトを開く\", // Open Cloud Project,\r\n            selectConnection: \"接続を選択\", // Select a Connection\"\r\n        },\r\n        recentProjects: \"最近のプロジェクト\", // Recent Projects,\r\n        deleteProject: {\r\n            title: \"プロジェクトを削除\", // Delete Project,\r\n            confirmation: \"プロジェクトを削除してもいいですか\", // Are you sure you want to delete project\"\r\n        },\r\n        importProject: {\r\n            title: \"プロジェクトをインポート\",  // Import Project,\r\n            confirmation: \"プロジェクト ${project.file.name} プロジェクト設定を v2 形式に変換してもいいですか\",\r\n            // Are you sure you want to conver project ${project.file.name} project settings to v2 format?\r\n            // We recommend you backup the project file first.\"\r\n        },\r\n        messages: {\r\n            deleteSuccess: \"${project.name} を削除しました\",  // Successfully deleted ${project.name}\"\r\n        },\r\n    },\r\n    appSettings: {\r\n        title: \"アプリケーション設定\", // Application Settings,\r\n        storageTitle: \"ストレージ設定\", // Storage Settings,\r\n        uiHelp: \"設定の保存場所\", // Where your settings are stored,\r\n        save: \"設定の保存\", // Save Settings,\r\n        securityToken: {\r\n            name: {\r\n                title: \"名前\", // Name\"\r\n            },\r\n            key: {\r\n                title: \"キー\", // Key\"\r\n            },\r\n        },\r\n        securityTokens: {\r\n            title: \"セキュリティ トークン\",  // Security Tokens,\r\n            description: \"セキュリティ トークンは、プロジェクト構成内の機密データを暗号化するために使用されます\",\r\n            // Security tokens are used to encrypt sensitive data within your project configuration\"\r\n        },\r\n        version: {\r\n            description: \"バージョン：\", // Version\"\r\n        },\r\n        commit: \"SHA をコミット\",  // Commit SHA,\r\n        devTools: {\r\n            description: \"問題の診断に役立つアプリケーション開発者ツールを開く\", // Open application developer tools to help diagnose issues,\r\n            button: \"開発者ツールを開く\", // Toggle Developer Tools\"\r\n        },\r\n        reload: {\r\n            description: \"現在の変更をすべて破棄して、アプリをリロード\", // Reload the app discarding all current changes,\r\n            button: \"アプリケーションをリフレッシュ\", // Refresh Application\"\r\n        },\r\n        messages: {\r\n            saveSuccess: \"アプリケーション設定を正常に保存しました\", // Successfully saved application settings\"\r\n        },\r\n    },\r\n    projectSettings: {\r\n        title: \"プロジェクト設定\", // Project Settings,\r\n        securityToken: {\r\n            title: \"セキュリティ トークン\",  // Security Token,\r\n            description: \"プロジェクト ファイル内の機密データを暗号化するために使用されます\",  // Used to encrypt sensitive data within project file\"\r\n        },\r\n        useSecurityToken: {\r\n            title: \"セキュリティ トークン\", // Use Security Token\r\n            description: \"有効にすると、プロバイダー構成内の機密データが暗号化されます。\",\r\n            // When enabled will encrypt sensitive data within provider configuration\r\n        },\r\n        save: \"プロジェクトを保存\", // Save Project,\r\n        sourceConnection: {\r\n            title: \"ソース接続\", // Source Connection,\r\n            description: \"アセットのロード元\", // Where to load assets fro\"\r\n        },\r\n        targetConnection: {\r\n            title: \"ターゲット接続\", // Target Connection,\r\n            description: \"プロジェクトとエクスポートされたデータの保存場所\",  // Where to save the project and exported dat\"\r\n        },\r\n        videoSettings: {\r\n            title: \"ビデオ設定\", // Video Settings,\r\n            description: \"タグ付けにおけるフレームの抽出割合\",  // The rate at which frames are extracted for tagging.,\r\n            frameExtractionRate: \"フレーム抽出率（ビデオ 1 秒あたりのフレーム数）\",  // Frame Extraction Rate (frames per a video second)\"\r\n        },\r\n        addConnection: \"接続を追加\", // Add Connection,\r\n        messages: {\r\n            saveSuccess: \"${project.name} プロジェクト設定を正常に保存しました\", // Successfully saved ${project.name} project settings\"\r\n        },\r\n    },\r\n    projectMetrics: {\r\n        title: \"プロジェクト メトリック\",  // Project Metrics,\r\n        assetsSectionTitle: \"アセット\",  // Assets,\r\n        totalAssetCount: \"すべてのアセット\",  // Total Assets,\r\n        visitedAssets: \"訪問済みアセット（${count}）\", // Visited Assets (${count}),\r\n        taggedAssets: \"タグ付きアセット（${count}）\", // Tagged Assets (${count}),\r\n        nonTaggedAssets: \"タグ付けされていないアセット（${count}）\", // Not Tagged Assets (${count}),\r\n        nonVisitedAssets: \"未訪問ないアセット（${count}）\", // Not Visited Assets (${count}),\r\n        tagsSectionTitle: \"タグ\", // Tags & Labels,\r\n        totalRegionCount: \"タグ付けされたすべての領域\",  // Total Tagged Regions,\r\n        totalTagCount: \"すべてのタグ\",  // Total Tags,\r\n        avgTagCountPerAsset: \"アセットごとの平均タグ\", // Average tags per asset\"\r\n    },\r\n    tags: {\r\n        title: \"タグ\", // Tags,\r\n        placeholder: \"新しいタグを追加\", // Add new tag,\r\n        editor: \"タグ エディター\",  // Tags Editor,\r\n        modal: {\r\n            name: \"タグ名\", // Tag Name,\r\n            color: \"タグの色\", // Tag Color\"\r\n        },\r\n        colors: {\r\n            white: \"白\",  // White,\r\n            gray: \"グレー\", // Gray,\r\n            red: \"赤\", // Red,\r\n            maroon: \"マルーン\", // Maroon,\r\n            yellow: \"黄\", // Yellow,\r\n            olive: \"オリーブ\", // Olive,\r\n            lime: \"ライム\", // Lime,\r\n            green: \"緑\", // Green,\r\n            aqua: \"アクア\", // Aqua,\r\n            teal: \"ティール\", // Teal,\r\n            blue: \"青\", // Blue,\r\n            navy: \"濃紺\",  // Navy,\r\n            fuschia: \"赤紫\",  // Fuschia,\r\n            purple: \"紫\",  // Purple\"\r\n        },\r\n        warnings: {\r\n            existingName: \"タグ名が既に存在します。別の名前を選んでください\",  // Tag name already exists. Choose another name,\r\n            emptyName: \"空のタグ名を持つことはできません\", // Cannot have an empty tag name,\r\n            unknownTagName: \"不明\",  // Unknown\"\r\n        },\r\n        toolbar: {\r\n            add: \"新しいタグを追加\", // Add new tag,\r\n            search: \"タグを検索\",  // Search tags,\r\n            edit: \"タグを編集\", // Edit tag,\r\n            lock: \"タグをロック\",  // Lock tag,\r\n            moveUp: \"タグを上に移動\", // Move tag up,\r\n            moveDown: \"タグを下に移動\", // Move tag down,\r\n            delete: \"タグを削除\", // Delete tag\"\r\n        },\r\n    },\r\n    connections: {\r\n        title: \"接続\", // Connections,\r\n        details: \"接続の詳細\", // Connection Details,\r\n        settings: \"接続設定\", // Connection Settings,\r\n        instructions: \"編集する接続を選択してください\", // Please select a connection to edit,\r\n        save: \"接続を保存\", // Save Connection,\r\n        messages: {\r\n            saveSuccess: \"${connection.name} を保存しました\",  // Successfully saved ${connection.name},\r\n            deleteSuccess: \"${connection.name} を削除しました\",  // Successfully deleted ${connection.name}\"\r\n        },\r\n        imageCorsWarning: \"警告：Web ブラウザーで VoTT を使用する場合、CORS（クロス オリジン リソース共有）の制限により、\" +\r\n            \"Bing 画像検索の一部のアセットが正しくエクスポートされない場合があります。\",\r\n        // Warning: When using VoTT in a Web browser, some assets from Bing Image Search may no export\r\n        // correctly due to CORS (Cross Origin Resource Sharing) restrictions.\",\r\n        blobCorsWarning: \"警告：ソースまたはターゲット接続として使用するには、Azure Blob Storage アカウントで CORS（クロス オリジン リソース共有）を有効にする必要があります。 \",\r\n        // Warning: CORS (Cross Domain Resource Sharing) must be enabled on the Azure Blob Storage account, in order\r\n        // to use i as a source or target connection. More information on enabling CORS can be found in the {0}\",\r\n        azDocLinkText: \"Azure ドキュメント\",  // Azure Documentation.,\r\n        providers: {\r\n            azureBlob: {\r\n                title: \"Azure Blob Storage\", // Azure Blob Storage,\r\n                description: \"\",\r\n                accountName: {\r\n                    title: \"アカウント名\", // Account Name,\r\n                    description: \"\",\r\n                },\r\n                containerName: {\r\n                    title: \"コンテナー名\",  // Container Name,\r\n                    description: \"\",\r\n                },\r\n                sas: {\r\n                    title: \"SAS\", // SAS,\r\n                    description: \"Blob Storage アカウントの認証に使用される共有アクセス署名\",\r\n                    // Shared access signature used to authenticate to the blob storage account\"\r\n                },\r\n                createContainer: {\r\n                    title: \"コンテナーを作成\",  // Create Container,\r\n                    description: \"Blob Storage コンテナーがまだ存在しない場合は作成します\",\r\n                    // Creates the blob container if it does not already exist\"\r\n                },\r\n            },\r\n            bing: {\r\n                title: \"Bing 画像検索\",  // Bing Image Search,\r\n                options: {\r\n                    title: \"Bing 画像検索のオプション\",\r\n                },  // Bing Image Search Options,\r\n                endpoint: {\r\n                    title: \"エンドポイント\", // Endpoint\r\n                    description: \"Bing検索 Azure リソース内に一覧表示されるエンドポイント\",\r\n                },\r\n                apiKey: {\r\n                    title: \"APIキー\", // API Key\r\n                    description: \"Bing検索 Azure リソース内に表示される API キー\",\r\n                },\r\n                query: {\r\n                    title: \"クエリ\", // Query\r\n                    description: \"接続の設定に使用する検索クエリ\",\r\n                },\r\n                aspectRatio: {\r\n                    title: \"アスペクト比\", // Aspect Ratio,\r\n                    description: \"指定した縦横比で結果をフィルター処理します。\",\r\n                    options: {\r\n                        all: \"すべて\", // All,\r\n                        square: \"正方形\", // Square,\r\n                        wide: \"横長\", // Wide,\r\n                        tall: \"縦長\", // Tall\"\r\n                    },\r\n                },\r\n                licenseType: {\r\n                    title: \"ライセンスの種類\",\r\n                    description: \"指定したライセンスの種類で結果をフィルター処理します。\",\r\n                    options: {\r\n                        all: \"すべて (画像をフィルター処理しません)\",\r\n                        any: \"任意のライセンスタイプの画像\",\r\n                        public: \"パブリック ドメイン\",\r\n                        share: \"無料で共有・使用\",\r\n                        shareCommercially: \"無料で共有し、商業的に使用する\",\r\n                        modify: \"変更、共有、使用が無料\",\r\n                        modifyCommercially: \"無料で変更、共有、および商用で使用\",\r\n                    },\r\n                },\r\n                size: {\r\n                    title: \"サイズ\",\r\n                    description: \"結果を指定したサイズでフィルター処理します。\",\r\n                    options: {\r\n                        all: \"すべての\",\r\n                        small: \"小 (200x200 未満)\",\r\n                        medium: \"中 (500x500 未満)\",\r\n                        large: \"大 (500x500 より大きい)\",\r\n                        wallpaper: \"壁紙(特大画像)\",\r\n                    },\r\n                },\r\n            },\r\n            local: {\r\n                title: \"ローカル ファイル システム\",  // Local File System,\r\n                folderPath: \"フォルダー パス\",  // Folder Path,\r\n                selectFolder: \"フォルダーを選択\", // Select Folder,\r\n                chooseFolder: \"フォルダーを選択\", // Choose Folder\"\r\n            },\r\n        },\r\n    },\r\n    editorPage: {\r\n        width: \"幅\", // Width,\r\n        height: \"高さ\", // Height,\r\n        tagged: \"タグ付き\", // Tagged,\r\n        visited: \"訪問済み\", // Visited,\r\n        toolbar: {\r\n            select: \"選択（V）\", // Select (V),\r\n            pan: \"パン\", // Pan,\r\n            drawRectangle: \"長方形を描く\", // Draw Rectangle,\r\n            drawPolygon: \"ポリゴンを描く\", // Draw Polygon,\r\n            copyRectangle: \"長方形をコピー\", // Copy Rectangle,\r\n            copy: \"領域をコピー\", // Copy Regions,\r\n            cut: \"領域をカット\",  // Cut Regions,\r\n            paste: \"領域を貼り付け\", // Paste Regions,\r\n            removeAllRegions: \"すべてのリージョンを削除\", // Remove All Regions,\r\n            previousAsset: \"前のアセット\",  // Previous Asset,\r\n            nextAsset: \"次のアセット\",  // Next Asset,\r\n            saveProject: \"プロジェクトを保存\", // Save Project,\r\n            exportProject: \"プロジェクトをエクスポート\",  // Export Project,\r\n            activeLearning: \"アクティブ ラーニング\",  // Active Learning\"\r\n        },\r\n        videoPlayer: {\r\n            previousTaggedFrame: {\r\n                tooltip: \"前のタグ付きフレーム\", // Previous Tagged Frame\"\r\n            },\r\n            nextTaggedFrame: {\r\n                tooltip: \"次のタグ付きフレーム\", // Next Tagged Frame\"\r\n            },\r\n            previousExpectedFrame: {\r\n                tooltip: \"前のフレーム\", // Previous Frame\"\r\n            },\r\n            nextExpectedFrame: {\r\n                tooltip: \"次のフレーム\", // Next Frame\"\r\n            },\r\n        },\r\n        help: {\r\n            title: \"ヘルプ メニューの切り替え\",  // Toggle Help Menu,\r\n            escape: \"ヘルプメニューを抜ける\",  // Escape Help Menu\"\r\n        },\r\n        assetError: \"アセットを読み込めません\", // Unable to load asset,\r\n        tags: {\r\n            hotKey: {\r\n                apply: \"ホット キーでタグを適用\",  // Apply Tag with Hot Key,\r\n                lock: \"ホット キーでタグをロック\",  // Lock Tag with Hot Key\"\r\n            },\r\n            rename: {\r\n                title: \"タグの名前を変更\", // Rename Tag,\r\n                confirmation: \"このタグの名前を変更してもいいですか\",\r\n                // Are you sure you want to rename this tag? It will be renamed throughout all assets\"\r\n            },\r\n            delete: {\r\n                title: \"タグを削除\", // Delete Tag,\r\n                confirmation: \"このタグを削除してもいいですか。このタグはすべてのアセットで削除され、このタグのみのあらゆる領域も削除されます\",\r\n                // Are you sure you want to delete this tag? It will be deleted throughout all assets\r\n                // and any regions where this is the only tag will also be deleted\"\r\n            },\r\n        },\r\n        canvas: {\r\n            removeAllRegions: {\r\n                title: \"すべてのリージョンを削除\", // Remove All Regions,\r\n                confirmation: \"すべてのリージョンを削除してもいいですか\",  // Are you sure you want to remove all regions\"\r\n            },\r\n        },\r\n        messages: {\r\n            enforceTaggedRegions: {\r\n                title: \"無効な領域が検出されました\",  // Invalid region(s) detected,\r\n                description: \"1 つ以上の領域にタグが付けられていません。次のアセットに進む前に、すべての領域をタグ付けしてください。\",\r\n                // 1 or more regions have not been tagged. Ensure all regions ar tagged before continuing to next asset\"\r\n            },\r\n        },\r\n    },\r\n    export: {\r\n        title: \"エクスポート\",  // Export,\r\n        settings: \"エクスポート設定\", // Export Settings,\r\n        saveSettings: \"エクスポート設定を保存\", // Save Export Settings,\r\n        providers: {\r\n            common: {\r\n                properties: {\r\n                    assetState: {\r\n                        title: \"アセットの状態\",  // Asset State,\r\n                        description: \"エクスポートに含めるアセット\", // Which assets to include in the export,\r\n                        options: {\r\n                            all: \"すべてのアセット\",  // All Assets,\r\n                            visited: \"訪問済みのアセットのみ\", // Only Visited Assets,\r\n                            tagged: \"タグ付きアセットのみ\", // Only tagged Assets\"\r\n                        },\r\n                    },\r\n                    testTrainSplit: {\r\n                        title: \"テスト/トレーニング分割\", // Test / Train Split,\r\n                        description: \"エクスポートされたデータに使用するテスト/トレーニングの分割\",\r\n                        // The test train split to use for exported data\"\r\n                    },\r\n                    includeImages: {\r\n                        title: \"画像を含める\", // Include Images,\r\n                        description: \"ターゲット接続にバイナリ画像アセットを含めるかどうか\",\r\n                        // Whether or not to include binary image assets in target connection\"\r\n                    },\r\n                },\r\n            },\r\n            vottJson: {\r\n                displayName: \"VoTT JSON\", // VoTT JSO\"\r\n            },\r\n            azureCV: {\r\n                displayName: \"Azure Custom Vision サービス\",  // Azure Custom Vision Service,\r\n                regions: {\r\n                    australiaEast: \"オーストラリア東部\", // Australia East,\r\n                    centralIndia: \"インド中部\", // Central India,\r\n                    eastUs: \"米国東部\", // East US,\r\n                    eastUs2: \"米国東部 2\",  // East US 2,\r\n                    japanEast: \"東日本\", // Japan East,\r\n                    northCentralUs: \"米国中北部\", // North Central US,\r\n                    northEurope: \"北ヨーロッパ\", // North Europe,\r\n                    southCentralUs: \"アメリカ中南部\", // South Central US,\r\n                    southeastAsia: \"東南アジア\", // Southeast Asia,\r\n                    ukSouth: \"英国南部\", // UK South,\r\n                    westUs2: \"米国西部 2\",  // West US 2,\r\n                    westEurope: \"西ヨーロッパ\", // West Europe\"\r\n                },\r\n                properties: {\r\n                    apiKey: {\r\n                        title: \"API キー\",  // API Key\"\r\n                    },\r\n                    region: {\r\n                        title: \"領域\", // Region,\r\n                        description: \"サービスがデプロイされている Azure リージョン\",  // The Azure region where your service is deployed\"\r\n                    },\r\n                    classificationType: {\r\n                        title: \"分類タイプ\", // Classification Type,\r\n                        options: {\r\n                            multiLabel: \"画像ごとに複数のタグ\", // Multiple tags per image,\r\n                            multiClass: \"画像ごとに単一のタグ\", // Single tag per image\"\r\n                        },\r\n                    },\r\n                    name: {\r\n                        title: \"プロジェクト名\", // Project Name\"\r\n                    },\r\n                    description: {\r\n                        title: \"プロジェクトの説明\", // Project Description\"\r\n                    },\r\n                    domainId: {\r\n                        title: \"ドメイン\", // Domain\"\r\n                    },\r\n                    newOrExisting: {\r\n                        title: \"新規または既存プロジェクト\",  // New or Existing Project,\r\n                        options: {\r\n                            new: \"新規プロジェクト\",  // New Project,\r\n                            existing: \"既存プロジェクト\",  // Existing Project\"\r\n                        },\r\n                    },\r\n                    projectId: {\r\n                        title: \"プロジェクト名\", // Project Name\"\r\n                    },\r\n                    projectType: {\r\n                        title: \"プロジェクトの種類\", // Project Type,\r\n                        options: {\r\n                            classification: \"分類\", // Classification,\r\n                            objectDetection: \"物体検出\", // Object Detection\"\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            tfRecords: {\r\n                displayName: \"TensorFlow レコード\",  // Tensorflow Record\"\r\n            },\r\n            pascalVoc: {\r\n                displayName: \"Pascal VOC\",  // Pascal VOC,\r\n                exportUnassigned: {\r\n                    title: \"未割り当てをエクスポート\",  // Export Unassigned,\r\n                    description: \"エクスポートされたデータに未割り当てのタグを含めるかどうか\",\r\n                    // Whether or not to include unassigned tags in exported data\"\r\n                },\r\n            },\r\n            cntk: {\r\n                displayName: \"Microsoft Cognitive Toolkit（CNTK）\", // Microsoft Cognitive Toolkit (CNTK)\"\r\n            },\r\n            csv: {\r\n                displayName: \"コンマ区切り値（CSV）\", // Comma Separated Values (CSV)\"\r\n            },\r\n        },\r\n        messages: {\r\n            saveSuccess: \"エクスポート設定を保存しました\", // Successfully saved export settings\"\r\n        },\r\n    },\r\n    activeLearning: {\r\n        title: \"アクティブ ラーニング\",  // Active Learning,\r\n        form: {\r\n            properties: {\r\n                modelPathType: {\r\n                    title: \"モデル プロバイダー\",  // Model Provider,\r\n                    description: \"トレーニング モデルのロード元\",  // Where to load the training model from,\r\n                    options: {\r\n                        preTrained: \"事前トレーニング済みの Coco SSD\", // Pre-trained Coco SSD,\r\n                        customFilePath: \"カスタム（ファイル パス）\",  // Custom (File path),\r\n                        customWebUrl: \"カスタム（URL）\",  // Custom (Url)\"\r\n                    },\r\n                },\r\n                autoDetect: {\r\n                    title: \"自動検出\", // Auto Detect,\r\n                    description: \"アセット間を移動するときに自動的に予測を行うかどうか\",\r\n                    // Whether or not to automatically make predictions as you navigate between assets\"\r\n                },\r\n                modelPath: {\r\n                    title: \"モデル パス\",  // Model path,\r\n                    description: \"ローカル ファイル システムからモデルを選択します\",  // Select a model from your local file system\"\r\n                },\r\n                modelUrl: {\r\n                    title: \"モデルURL\", // Model URL,\r\n                    description: \"公開 Web URL からモデルを読み込む\",  // Load your model from a public web URL\"\r\n                },\r\n                predictTag: {\r\n                    title: \"予測タグ\", // Predict Tag,\r\n                    description: \"予測にタグを自動的に含めるかどうか\", // Whether or not to automatically include tags in predictions\"\r\n                },\r\n            },\r\n        },\r\n        messages: {\r\n            loadingModel: \"アクティブ ラーニング モデルを読み込んでいます...\", // Loading active learning model...,\r\n            errorLoadModel: \"アクティブ ラーニング モデルの読み込みエラー\", // Error loading active learning model,\r\n            saveSuccess: \"アクティブ ラーニング設定を保存しました\",  // Successfully saved active learning settings\"\r\n        },\r\n    },\r\n    profile: {\r\n        settings: \"プロファイル設定\", // Profile Settings\"\r\n    },\r\n    errors: {\r\n        unknown: {\r\n            title: \"不明なエラー\", // Unknown Error,\r\n            message: \"アプリで不明なエラーが発生しました。\", // The app encountered an unknown error. Please try again\"\r\n        },\r\n        projectUploadError: {\r\n            title: \"ファイルのアップロード エラー\",  // Error Uploading File,\r\n            message: \"ファイルのアップロード中にエラーが発生しました。\",\r\n            // There was an error uploading the file. Please verify the file is of the correct format and try again.\"\r\n        },\r\n        genericRenderError: {\r\n            title: \"アプリケーションの読み込みエラー\", // Error Loading Application,\r\n            message: \"アプリケーションのレンダリング中にエラーが発生しました。\",\r\n            // An error occured while rendering the application. Please try again\"\r\n        },\r\n        projectInvalidSecurityToken: {\r\n            title: \"プロジェクト ファイルの読み込みエラー\",  // Error loading project file,\r\n            message: \"プロジェクトが参照するセキュリティ トークンが無効です。\",\r\n            // The security token referenced by the project is invalid.\r\n            // Verify that the security token for the project has been set correctly within your application settings\"\r\n        },\r\n        projectInvalidJson: {\r\n            title: \"プロジェクト ファイルの解析エラー\",  // Error parsing project file,\r\n            message: \"選択したプロジェクト ファイルに有効なJSONが含まれていません。\",\r\n            // The selected project files does not contain valid JSON Please check the file any try again.\"\r\n        },\r\n        projectDeleteError: {\r\n            title: \"プロジェクトの削除エラー\", // Error deleting project,\r\n            message: \"プロジェクトの削除中にエラーが発生しました。\",\r\n            // An error occured while deleting the project.\r\n            // Validate the project file an security token exist and try again\"\r\n        },\r\n        securityTokenNotFound: {\r\n            title: \"プロジェクト ファイルの読み込みエラー\",  // Error loading project file,\r\n            message: \"プロジェクトが参照するセキュリティ トークンが現在のアプリケーション設定に見つかりません。\",\r\n            // The security token referenced by the project cannot be found in your current application settings.\r\n            // Verify the security token exists and try to reload the project.\"\r\n        },\r\n        canvasError: {\r\n            title: \"キャンバスの読み込みエラー\", // Error loading canvas,\r\n            message: \"キャンバスのロード中にエラーが発生しました。プロジェクトのアセットを確認して、再試行してください。\",\r\n            // There was an error loading the canvas, check the project's assets and try again.\"\r\n        },\r\n        importError: {\r\n            title: \"V1 プロジェクトのインポート エラー\",  // Error importing V1 project,\r\n            message: \"V1 プロジェクトのインポート中にエラーが発生しました。\",\r\n            // There was an error importing the V1 project. Check the project file and try again\"\r\n        },\r\n        pasteRegionTooBigError: {\r\n            title: \"領域の貼り付けエラー\", // Error pasting region,\r\n            message: \"このアセットに対して領域が大きすぎます。別のリージョンをコピーしてください\",\r\n            // Region too big for this asset. Try copying another region\"\r\n        },\r\n        exportFormatNotFound: {\r\n            title: \"プロジェクトのエクスポート エラー\",  // Error exporting project,\r\n            message: \"プロジェクトにエクスポート形式がありません。\",\r\n            // Project is missing export format. Please select an export format in the export setting page.\"\r\n        },\r\n        activeLearningPredictionError: {\r\n            title: \"アクティブ ラーニングのエラー\",  // Active Learning Error,\r\n            message: \"現在のアセットの領域を予測中にエラーが発生しました。\",\r\n            // An error occurred while predicting regions in the current asset.\r\n            // Please verify your active learning configuration and try again\"\r\n        },\r\n    },\r\n};\r\n","import { IAppStrings } from \"../strings\";\r\n\r\n/**\r\n * App Strings for Traditional Chinese (zh-tw)\r\n */\r\nexport const chinesetw: IAppStrings = {\r\n    appName: \"VOTT視覺物件標記工具\", // Visual Object Tagging Tool\r\n    common: {\r\n        displayName: \"顯示名稱\", // Display Name\r\n        description: \"說明\", // Description\r\n        submit: \"送出\", // Submit\r\n        cancel: \"取消\", // Cancel\r\n        save: \"儲存\", // Save\r\n        delete: \"刪除\", // Delete\r\n        provider: \"提供者\", // Provider\r\n        homePage: \"首頁\", // Home Page\r\n    },\r\n    titleBar: {\r\n        help: \"說明\", // Help\r\n        minimize: \"最小化\", // Minimize\r\n        maximize: \"最大化\", // Maximize\r\n        restore: \"還原\", // Restore\r\n        close: \"關閉\", // Close\r\n    },\r\n    homePage: {\r\n        newProject: \"新專案\", // New Project\r\n        openLocalProject: {\r\n            title: \"打開本機專案\", // Open Local Project\r\n        },\r\n        openCloudProject: {\r\n            title: \"打開雲端專案\", // Open Cloud Project\r\n            selectConnection: \"選擇連線\", // Select a Connection\r\n        },\r\n        recentProjects: \"最近的專案\", // Recent Projects\r\n        deleteProject: {\r\n            title: \"刪除專案\", // Delete Project\r\n            confirmation: \"確定要刪除專案?\", // Are you sure you want to delete project\r\n        },\r\n        importProject: {\r\n            title: \"匯入專案\", // Import Project\r\n            confirmation: \"您確定要將專案${project.file.name}的設定轉換為v2格式嗎？我們建議您首先備份專案文件。\",\r\n            // Are you sure you want to convert project ${project.file.name} project settings to v2 format?\r\n            // We recommend you backup the project file first.\r\n        },\r\n        messages: {\r\n            deleteSuccess: \"已成功刪除${project.name}專案\", // Successfully deleted ${project.name}\r\n        },\r\n    },\r\n    appSettings: {\r\n        title: \"應用程式設定\", // Application Settings\r\n        storageTitle: \"儲存空間設定\", // Storage Settings\r\n        uiHelp: \"您的設定存放在哪裡\", // Where your settings are stored\r\n        save: \"保存設定\", // Save Settings\r\n        securityToken: {\r\n            name: {\r\n                title: \"名稱\", // Name\r\n            },\r\n            key: {\r\n                title: \"鍵\", // Key\r\n            },\r\n        },\r\n        securityTokens: {\r\n            title: \"安全性權杖\", // Security Tokens\r\n            description: \"安全性權杖用於加密專案組態中的敏感資料\",\r\n            // Security tokens are used to encrypt sensitive data within your project configuration\r\n        },\r\n        version: {\r\n            description: \"版本：\", // Version:\r\n        },\r\n        commit: \"提交SHA\", // Commit SHA\r\n        devTools: {\r\n            description: \"打開應用程式開發工具以幫助診斷問題\", // Open application developer tools to help diagnose issues\r\n            button: \"切換開發工具\", // Toggle Developer Tools\r\n        },\r\n        reload: {\r\n            description: \"重新載入應用程式，放棄所有目前做的修改\", // Reload the app discarding all current changes\r\n            button: \"重新整理應用程式\", // Refresh Application\r\n        },\r\n        messages: {\r\n            saveSuccess: \"已成功保存應用程式設定\", // Successfully saved application settings\r\n        },\r\n    },\r\n    projectSettings: {\r\n        title: \"專案設定\", // Project Settings\r\n        securityToken: {\r\n            title: \"安全性權杖\", // Security Token\r\n            description: \"用於加密專案檔案中的敏感資料\", // Used to encrypt sensitive data within project files\r\n        },\r\n        useSecurityToken: {\r\n            title: \"使用安全令牌\", // Use Security Token\r\n            description: \"啟用後將在提供者配置內加密敏感數據\",\r\n            // When enabled will encrypt sensitive data within provider configuration\r\n        },\r\n        save: \"保存專案\", // Save Project\r\n        sourceConnection: {\r\n            title: \"來源連線\", // Source Connection\r\n            description: \"從何處載入資料\", // Where to load assets from\r\n        },\r\n        targetConnection: {\r\n            title: \"目標連線\", // Target Connection\r\n            description: \"在哪裡保存專案和匯出的資料\", // Where to save the project and exported data\r\n        },\r\n        videoSettings: {\r\n            title: \"影片設定\", // Video Settings\r\n            description: \"設定影片標記的速率\", // The rate at which frames are extracted for tagging.\r\n            frameExtractionRate: \"影像取樣率（影像每秒的畫面數）\", // Frame Extraction Rate (frames per a video second)\r\n        },\r\n        addConnection: \"新增連線\", // Add Connection\r\n        messages: {\r\n            saveSuccess: \"已成功保存${project.name}專案設定\", // Successfully saved ${project.name} project settings\r\n        },\r\n    },\r\n    projectMetrics: {\r\n        title: \"專案相關指標\", // Project Metrics\r\n        assetsSectionTitle: \"圖像數據\", // Assets\r\n        // As for this VOTT tool, translate \"Assets\" to \"Image data\" in Traditional Chinese,\r\n        // as \"Asset\" can be confusing if directly translated.\r\n        totalAssetCount: \"圖像數據總數\", // Total Assets\r\n        visitedAssets: \"已檢視的圖像數據（${count}）\", // Visited Assets (${count})\r\n        taggedAssets: \"已標記的圖像數據（${count}）\", // Tagged Assets (${count})\r\n        nonTaggedAssets: \"未標記的圖像數據（${count}）\", // Not Tagged Assets (${count})\r\n        nonVisitedAssets: \"未檢視的圖像數據（${count}）\", // Not Visited Assets (${count})\r\n        tagsSectionTitle: \"標記和標籤\",\r\n        // Tags & Labels, so it can actually be same translation to Tags and Labels in Traditional Chinese,\r\n        // to differentiate, having slightly different translation for both keywords.\r\n        totalRegionCount: \"已標記區域總數\", // Total Tagged Regions\r\n        totalTagCount: \"標記總數\", // Total Tags\r\n        avgTagCountPerAsset: \"每個圖像數據的平均標記數\", // Average tags per asset\r\n    },\r\n    tags: {\r\n        title: \"標記\", // Tags\r\n        placeholder: \"新增標記\", // Add new tag\r\n        editor: \"標記編輯器\", // Tags Editor\r\n        modal: {\r\n            name: \"標記名稱\", // Tag Name\r\n            color: \"標記顏色\", // Tag Color\r\n        },\r\n        colors: {\r\n            white: \"白色\", // White\r\n            gray: \"灰色\", // Gray\r\n            red: \"紅色\", // Red\r\n            maroon: \"栗色\", // Maroon\r\n            yellow: \"黃色\", // Yellow\r\n            olive: \"橄欖\", // Olive\r\n            lime: \"酸橙\", // Lime\r\n            green: \"綠色\", // Green\r\n            aqua: \"水色\", // Aqua\r\n            teal: \"藍綠色\", // Teal\r\n            blue: \"藍色\", // Blue\r\n            navy: \"海軍\", // Navy\r\n            fuschia: \"紫紅色\", // Fuschia\r\n            purple: \"紫色\", // Purple\r\n        },\r\n        warnings: {\r\n            existingName: \"標記名稱已存在。請選擇其他名字\", // Tag name already exists. Choose another name\r\n            emptyName: \"標記名稱不能為空白\", // Cannot have an empty tag name\r\n            unknownTagName: \"未命名\", // Unknown\r\n        },\r\n        toolbar: {\r\n            add: \"新增標記\", // Add new tag\r\n            search: \"尋找標記\", // Search tags\r\n            edit: \"編輯標記\", // Edit tag\r\n            lock: \"鎖定標記\", // Lock tag\r\n            moveUp: \"向上移動標記\", // Move tag up\r\n            moveDown: \"向下移動標記\", // Move tag down\r\n            delete: \"刪除標記\", // Delete tag\r\n        },\r\n    },\r\n    connections: {\r\n        title: \"連線\", // Connections\r\n        details: \"連線細節\", // Connection Details\r\n        settings: \"連線設定\", // Connection Settings\r\n        instructions: \"請選擇一個連線進行編輯\", // Please select a connection to edit\r\n        save: \"保存連線\", // Save Connection\r\n        messages: {\r\n            saveSuccess: \"已成功儲存${connection.name}\", // Successfully saved ${connection.name}\r\n            deleteSuccess: \"已成功刪除${connection.name}\", // Successfully deleted ${connection.name}\r\n        },\r\n        imageCorsWarning: \"警告：在Web瀏覽器中使用VoTT時，由於CORS（跨源資源共享）限制，來自Bing Image Search的某些圖像數據可能無法正確匯出。\",\r\n        // Warning: When using VoTT in a Web browser, some assets from Bing Image Search may not export correctly\r\n        // due to CORS (Cross Origin Resource Sharing) restrictions.\r\n        blobCorsWarning: \"警告：必須在Azure Blob儲存體帳戶上啟用CORS（跨域資源共享），才能將其用作來源或目標連接。 {0}中提供了有關啟用CORS的更多資訊。\",\r\n        // Warning: CORS (Cross Domain Resource Sharing) must be enabled on the Azure Blob Storage account,\r\n        // in order to use it as a source or target connection.\r\n        // More information on enabling CORS can be found in the {0}\r\n        azDocLinkText: \"Azure說明文件\", // Azure Documentation.\r\n        providers: {\r\n            azureBlob: {\r\n                title: \"Azure Blob 儲存體\", // Azure Blob Storage\r\n                description: \"\",\r\n                accountName: {\r\n                    title: \"帳戶名\", // Account Name\r\n                    description: \"\",\r\n                },\r\n                containerName: {\r\n                    title: \"容器名稱\", // Container Name\r\n                    description: \"\",\r\n                },\r\n                sas: {\r\n                    title: \"SAS\", // SAS\r\n                    description: \"用於驗證Blob儲存體帳戶的共用存取簽章\",\r\n                    // Shared access signature used to authenticate to the blob storage account\r\n                },\r\n                createContainer: {\r\n                    title: \"新增容器\", // Create Container\r\n                    description: \"新增blob容器（如果還不存在時）\", // Creates the blob container if it does not already exist\r\n                },\r\n            },\r\n            bing: {\r\n                title: \"Bing 影像搜尋\", // Bing Image Search\r\n                options: {\r\n                    title: \"Bing 影像搜尋選項\",\r\n                }, // Bing Image Search Options\r\n                endpoint: {\r\n                    title: \"Endpoint\",\r\n                    description: \"必應搜索 Azure 資源中列出的終結點\",\r\n                },\r\n                apiKey: {\r\n                    title: \"API密鑰\",\r\n                    description: \"必應搜索 Azure 資源中列出的 API 金鑰\",\r\n                }, // API Key\r\n                query: {\r\n                    title: \"查詢\",\r\n                    description: \"用於填充連接的搜索查詢\",\r\n                }, // Query\r\n                aspectRatio: {\r\n                    title: \"長寬比\", // Aspect Ratio\r\n                    description: \"按指定的縱橫比篩選結果\",\r\n                    options: {\r\n                        all: \"所有\", // All\r\n                        square: \"矩形\", // Square\r\n                        wide: \"寬\", // Wide\r\n                        tall: \"高\", // Tall\r\n                    },\r\n                },\r\n                licenseType: {\r\n                    title: \"許可證類型\",\r\n                    description: \"按指定的許可證類型篩選結果\",\r\n                    options: {\r\n                        all: \"全部(不過濾任何影像)\",\r\n                        any: \"任何許可證類型的圖像\",\r\n                        public: \"公有領域\",\r\n                        share: \"免費分享和使用\",\r\n                        shareCommercially: \"免費共用和使用商業\",\r\n                        modify: \"免費修改、共用和使用\",\r\n                        modifyCommercially: \"可自由修改、共用和在商業上使用\",\r\n                    },\r\n                },\r\n                size: {\r\n                    title: \"大小\",\r\n                    description: \"按指定大小篩選結果\",\r\n                    options: {\r\n                        all: \"所有\",\r\n                        small: \"小(小於200x200)\",\r\n                        medium: \"中等(小於 500x500)\",\r\n                        large: \"大(大於 500x500)\",\r\n                        wallpaper: \"桌布(超大影像)\",\r\n                    },\r\n                },\r\n            },\r\n            local: {\r\n                title: \"本機檔案系統\", // Local File System\r\n                folderPath: \"資料夾路徑\", // Folder Path\r\n                selectFolder: \"選擇資料夾\", // Select Folder\r\n                chooseFolder: \"選取資料夾\", // Choose Folder\r\n            },\r\n        },\r\n    },\r\n    editorPage: {\r\n        width: \"寬度\", // Width\r\n        height: \"高度\", // Height\r\n        tagged: \"已標記\", // Tagged\r\n        visited: \"已檢視\", // Visited\r\n        toolbar: {\r\n            select: \"選擇 (V)\", // Select (V)\r\n            pan: \"全景\", // Pan\r\n            drawRectangle: \"繪製矩形\", // Draw Rectangle\r\n            drawPolygon: \"繪製多邊形\", // Draw Polygon\r\n            copyRectangle: \"複製矩形\", // Copy Rectangle\r\n            copy: \"複製區域\", // Copy Regions\r\n            cut: \"剪下區域\", // Cut Regions\r\n            paste: \"貼上區域\", // Paste Regions\r\n            removeAllRegions: \"刪除所有區域\", // Remove All Regions\r\n            previousAsset: \"以前的圖像數據\", // Previous Asset\r\n            nextAsset: \"下一個圖像數據\", // Next Asset\r\n            saveProject: \"儲存專案\", // Save Project\r\n            exportProject: \"匯出專案\", // Export Project\r\n            activeLearning: \"主動學習\", // Active Learning\r\n        },\r\n        videoPlayer: {\r\n            previousTaggedFrame: {\r\n                tooltip: \"上一個標記的畫面\", // Previous Tagged Frame\r\n            },\r\n            nextTaggedFrame: {\r\n                tooltip: \"下一個標記的畫面\", // Next Tagged Frame\r\n            },\r\n            previousExpectedFrame: {\r\n                tooltip: \"上一個畫面\", // Previous Frame\r\n            },\r\n            nextExpectedFrame: {\r\n                tooltip: \"下一個畫面\", // Next Frame\r\n            },\r\n        },\r\n        help: {\r\n            title: \"切換輔助說明選單\", // Toggle Help Menu\r\n            escape: \"離開輔助說明選單\", // Escape Help Menu\r\n        },\r\n        assetError: \"無法載入圖像數據\", // Unable to load asset\r\n        tags: {\r\n            hotKey: {\r\n                apply: \"使用快捷鍵來套用標記\", // Apply Tag with Hot Key\r\n                lock: \"用快捷鍵來鎖定標記\", // Lock Tag with Hot Key\r\n            },\r\n            rename: {\r\n                title: \"重新命名標記\", // Rename Tag\r\n                confirmation: \"您確定要重新命名此標記嗎？它將在所有圖像數據中被重新命名\",\r\n                // Are you sure you want to rename this tag? It will be renamed throughout all assets\r\n            },\r\n            delete: {\r\n                title: \"刪除標記\", // Delete Tag\r\n                confirmation: \"您確定要刪除此標記嗎？它將在所有圖像數據中被刪除，並且只有使用此標記的任何區域也將被刪除\",\r\n                // Are you sure you want to delete this tag? It will be deleted throughout all assets\r\n                // and any regions where this is the only tag will also be deleted\r\n            },\r\n        },\r\n        canvas: {\r\n            removeAllRegions: {\r\n                title: \"刪除所有區域\", // Remove All Regions\r\n                confirmation: \"您確定要刪除所有區域嗎？\", // Are you sure you want to remove all regions?\r\n            },\r\n        },\r\n        messages: {\r\n            enforceTaggedRegions: {\r\n                title: \"檢測到無效的區域\", // Invalid region(s) detected\r\n                description: \"一個或多個區域尚未被標記。在繼續下一個圖像數據之前，請確保所有區域均已標記。\",\r\n                // 1 or more regions have not been tagged.\r\n                // Ensure all regions are tagged before continuing to next asset.\r\n            },\r\n        },\r\n    },\r\n    export: {\r\n        title: \"匯出\", // Export\r\n        settings: \"匯出設定\", // Export Settings\r\n        saveSettings: \"儲存匯出設定\", // Save Export Settings\r\n        providers: {\r\n            common: {\r\n                properties: {\r\n                    assetState: {\r\n                        title: \"圖像數據狀態\", // Asset State\r\n                        description: \"匯出項目中包括哪些圖像數據\", // Which assets to include in the export\r\n                        options: {\r\n                            all: \"所有圖像數據\", // All Assets\r\n                            visited: \"只有已檢視的圖像數據\", // Only Visited Assets\r\n                            tagged: \"只有已標記的圖像數據\", // Only tagged Assets\r\n                        },\r\n                    },\r\n                    testTrainSplit: {\r\n                        title: \"測試/訓練分割\", // Test / Train Split\r\n                        description: \"測試訓練分割以用於匯出數據\", // The test train split to use for exported data\r\n                    },\r\n                    includeImages: {\r\n                        title: \"包含圖像\", // Include Images\r\n                        description: \"是否在目標連接中包括二進位圖像數據\",\r\n                        // Whether or not to include binary image assets in target connection\r\n                    },\r\n                },\r\n            },\r\n            vottJson: {\r\n                displayName: \"VoTT JSON\", // VoTT JSON\r\n            },\r\n            azureCV: {\r\n                displayName: \"Azure自訂視覺服務\", // Azure Custom Vision Service\r\n                regions: {\r\n                    // reference to https://azure.microsoft.com/zh-tw/global-infrastructure/geographies/\r\n                    // for official translation\r\n                    australiaEast: \"澳大利亞東部\", // Australia East\r\n                    centralIndia: \"印度中部\", // Central India\r\n                    eastUs: \"美國東部\", // East US\r\n                    eastUs2: \"美國東部 2\", // East US 2\r\n                    japanEast: \"日本東部\", // Japan East\r\n                    northCentralUs: \"美國中北部\", // North Central US\r\n                    northEurope: \"北歐\", // North Europe\r\n                    southCentralUs: \"美國中南部\", // South Central US\r\n                    southeastAsia: \"東南亞\", // Southeast Asia\r\n                    ukSouth: \"英國南部\", // UK South\r\n                    westUs2: \"美國西部 2\", // West US 2\r\n                    westEurope: \"西歐\", // West Europe\r\n                },\r\n                properties: {\r\n                    apiKey: {\r\n                        title: \"API密鑰\", // API Key\r\n                    },\r\n                    region: {\r\n                        title: \"區域\", // Region\r\n                        description: \"部署服務的Azure區域\", // The Azure region where your service is deployed\r\n                    },\r\n                    classificationType: {\r\n                        title: \"分類類型\", // Classification Type\r\n                        options: {\r\n                            multiLabel: \"每個圖像多個標記\", // Multiple tags per image\r\n                            multiClass: \"每個圖像一個標記\", // Single tag per image\r\n                        },\r\n                    },\r\n                    name: {\r\n                        title: \"專案名\", // Project Name\r\n                    },\r\n                    description: {\r\n                        title: \"專案簡介\", // Project Description\r\n                    },\r\n                    domainId: {\r\n                        title: \"領域\", // Domain\r\n                    },\r\n                    newOrExisting: {\r\n                        title: \"新增專案或既有專案\", // New or Existing Project\r\n                        options: {\r\n                            new: \"新增專案\", // New Project\r\n                            existing: \"既有專案\", // Existing Project\r\n                        },\r\n                    },\r\n                    projectId: {\r\n                        title: \"專案名稱\", // Project Name\r\n                    },\r\n                    projectType: {\r\n                        title: \"專案類型\", // Project Type\r\n                        options: {\r\n                            classification: \"分類\", // Classification\r\n                            objectDetection: \"物件偵測\", // Object Detection\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            tfRecords: {\r\n                displayName: \"Tensorflow記錄\", // Tensorflow Records\r\n            },\r\n            pascalVoc: {\r\n                displayName: \"Pascal VOC\", // Pascal VOC\r\n                exportUnassigned: {\r\n                    title: \"匯出未指定的項目\", // Export Unassigned\r\n                    description: \"是否在已匯出的數據中包括未指定的標記\", // Whether or not to include unassigned tags in exported data\r\n                },\r\n            },\r\n            cntk: {\r\n                displayName: \"Microsoft Cognitive Toolkit（CNTK)\", // Microsoft Cognitive Toolkit (CNTK)\r\n            },\r\n            csv: {\r\n                displayName: \"逗號分隔格式 (CSV)\", // Comma Separated Values (CSV)\r\n            },\r\n        },\r\n        messages: {\r\n            saveSuccess: \"已成功儲存匯出設定\", // Successfully saved export settings\r\n        },\r\n    },\r\n    activeLearning: {\r\n        title: \"主動學習\", // Active Learning\r\n        form: {\r\n            properties: {\r\n                modelPathType: {\r\n                    title: \"模型提供者\", // Model Provider\r\n                    description: \"從何處載入訓練模型\", // Where to load the training model from\r\n                    options: {\r\n                        preTrained: \"預先訓練Coco SSD\", // Pre-trained Coco SSD\r\n                        customFilePath: \"自訂（檔案路徑）\", // Custom (File path)\r\n                        customWebUrl: \"自訂 (URL)\", // Custom (Url)\r\n                    },\r\n                },\r\n                autoDetect: {\r\n                    title: \"自動偵測\", // Auto Detect\r\n                    description: \"在圖像數據之間瀏覽時是否自動進行預測\",\r\n                    // Whether or not to automatically make predictions as you navigate between assets\r\n                },\r\n                modelPath: {\r\n                    title: \"模型路徑\", // Model path\r\n                    description: \"從本機檔案系統中選擇模型\", // Select a model from your local file system\r\n                },\r\n                modelUrl: {\r\n                    title: \"模型網址\", // Model URL\r\n                    description: \"從公共網址載入模型\", // Load your model from a public web URL\r\n                },\r\n                predictTag: {\r\n                    title: \"預測標記\", // Predict Tag\r\n                    description: \"是否在預測中自動包含標記\", // Whether or not to automatically include tags in predictions\r\n                },\r\n            },\r\n        },\r\n        messages: {\r\n            loadingModel: \"正在載入主動學習模型...\", // Loading active learning model...\r\n            errorLoadModel: \"載入主動學習模型時出現錯誤\", // Error loading active learning model\r\n            saveSuccess: \"已成功儲存主動學習設定\", // Successfully saved active learning settings\r\n        },\r\n    },\r\n    profile: {\r\n        settings: \"個人資料設定\", // Profile Settings\r\n    },\r\n    errors: {\r\n        unknown: {\r\n            title: \"未知錯誤\", // Unknown Error\r\n            message: \"該應用程式遇到未知錯誤。請再試一遍。\", // The app encountered an unknown error. Please try again.\r\n        },\r\n        projectUploadError: {\r\n            title: \"上傳檔案時出現錯誤\", // Error Uploading File\r\n            message: \"上傳檔案時出現錯誤。請確認檔案格式正確，然後重試。\",\r\n            // There was an error uploading the file. Please verify the file is of the correct format and try again.\r\n        },\r\n        genericRenderError: {\r\n            title: \"載入應用程序時出現錯誤\", // Error Loading Application\r\n            message: \"轉譯應用程序時發生錯誤。請再試一遍\", // An error occured while rendering the application. Please try again\r\n        },\r\n        projectInvalidSecurityToken: {\r\n            title: \"載入專案文件時出現錯誤\", // Error loading project file\r\n            message: \"專案使用的安全性認證無效。請驗證是否在您的應用程式設定中正確的設定了專案的安全性認證\",\r\n            // The security token referenced by the project is invalid. Verify that the security token\r\n            // for the project has been set correctly within your application settings\r\n        },\r\n        projectInvalidJson: {\r\n            title: \"解析專案文件時出現錯誤\", // Error parsing project file\r\n            message: \"所選擇的專案文件不包含有效的JSON格式。請確認該專案檔案並且重試。\",\r\n            // The selected project files does not contain valid JSON. Please check the file any try again.\r\n        },\r\n        projectDeleteError: {\r\n            title: \"刪除專案時出現錯誤\", // Error deleting project\r\n            message: \"刪除專案時發生錯誤。請確認專案檔案和安全性認證是否存在，然後重試\",\r\n            // An error occured while deleting the project.\r\n            // Validate the project file and security token exist and try again\r\n        },\r\n        securityTokenNotFound: {\r\n            title: \"載入專案檔案時出現錯誤\", // Error loading project file\r\n            message: \"在當前的應用程式設定中找不到該專案所使用的安全性認證。請確認安全性認證是否存在，然後嘗試重新載入專案。\",\r\n            // The security token referenced by the project cannot be found in your current application settings.\r\n            // Verify the security token exists and try to reload the project.\r\n        },\r\n        canvasError: {\r\n            title: \"載入畫面時出現錯誤\", // Error loading canvas\r\n            message: \"載入畫面時發生錯誤，請檢查專案的圖像數據，然後重試。\",\r\n            // There was an error loading the canvas, check the project's assets and try again.\r\n        },\r\n        importError: {\r\n            title: \"匯入V1格式專案時出現錯誤\", // Error importing V1 project\r\n            message: \"匯入V1格式專案時出現錯誤。請檢查專案檔案，然後重試\",\r\n            // There was an error importing the V1 project. Check the project file and try again\r\n        },\r\n        pasteRegionTooBigError: {\r\n            title: \"貼上區域時發生錯誤\", // Error pasting region\r\n            message: \"此區域對於這一個圖像數據太大了。請嘗試複製其他的區域\",\r\n            // Region too big for this asset. Try copying another region\r\n        },\r\n        exportFormatNotFound: {\r\n            title: \"匯出專案時出現錯誤\", // Error exporting project\r\n            message: \"專案設定中缺少匯出格式。請在匯出設定畫面中選擇一種匯出格式。\",\r\n            // Project is missing export format.  Please select an export format in the export setting page.\r\n        },\r\n        activeLearningPredictionError: {\r\n            title: \"主動學習錯誤\", // Active Learning Error\r\n            message: \"在預測當前圖像數據中的區域時發生錯誤。請確認您的主動學習相關設定，然後重試\",\r\n            // An error occurred while predicting regions in the current asset.\r\n            // Please verify your active learning configuration and try again\r\n        },\r\n    },\r\n};\r\n","import { IAppStrings } from \"../strings\";\r\n\r\n/**\r\n * App Strings for Korean language from Google Translate\r\n */\r\nexport const korean: IAppStrings = {\r\n    appName: \"비주얼 객체 태깅 도구\", // Visual Object Tagging Tool,\r\n    common: {\r\n        displayName: \"프로젝트 이름\", // Display Name,\r\n        description: \"설명\", // Description,\r\n        submit: \"제출\", // Submit,\r\n        cancel: \"취소\", // Cancel,\r\n        save: \"저장\", // Save,\r\n        delete: \"삭제\", // Delete,\r\n        provider: \"공급자\", // Provider,\r\n        homePage: \"홈페이지\",  // Home Page\"\r\n    },\r\n    titleBar: {\r\n        help: \"도움\", // Help,\r\n        minimize: \"최소화\", // Minimize,\r\n        maximize: \"최대화\", // Maximize,\r\n        restore: \"되돌리기\", // Restore,\r\n        close: \"닫기\", // Close\"\r\n    },\r\n    homePage: {\r\n        newProject: \"새로운 프로젝트\", // New Project,\r\n        openLocalProject: {\r\n            title: \"로컬 프로젝트 열기\", // Open Local Project\"\r\n        },\r\n        openCloudProject: {\r\n            title: \"클라우드 프로젝트 열기\", // Open Cloud Project,\r\n            selectConnection: \"Connection 선택\", // Select a Connection\r\n        },\r\n        recentProjects: \"최근 프로젝트\", // Recent Projects,\r\n        deleteProject: {\r\n            title: \"프로젝트 삭제\", // Delete Project,\r\n            confirmation: \"프로젝트를 삭제 하시겠습니까?\", // Are you sure you want to delete project\r\n        },\r\n        importProject: {\r\n            title: \"프로젝트 가져 오기\",  // Import Project,\r\n            confirmation: \"${project.file.name} 프로젝트 설정을 v2 형식으로 수정 하시겠습니까? 수정하시기 전에 프로젝트 파일을 백업해두시기 바랍니다.\",\r\n            // Are you sure you want to conver project ${project.file.name} project settings to v2 format?\r\n            // We recommend you backup the project file first.\"\r\n        },\r\n        messages: {\r\n            deleteSuccess: \"${project.name}을 삭제했습니다\",  // Successfully deleted ${project.name}\"\r\n        },\r\n    },\r\n    appSettings: {\r\n        title: \"애플리케이션 설정\", // Application Settings,\r\n        storageTitle: \"저장소 설정\", // Storage Settings,\r\n        uiHelp: \"설정이 저장된 위치\", // Where your settings are stored,\r\n        save: \"설정 저장\", // Save Settings,\r\n        securityToken: {\r\n            name: {\r\n                title: \"이름\", // Name\r\n            },\r\n            key: {\r\n                title: \"키\", // Key\r\n            },\r\n        },\r\n        securityTokens: {\r\n            title: \"보안 토큰\",  // Security Tokens,\r\n            description: \"보안 토큰은 프로젝트 구성 내에서 중요한 데이터를 암호화하는 데 사용됩니다\",\r\n            // Security tokens are used to encryp sensitive data within your project configuration\"\r\n        },\r\n        version: {\r\n            description: \"버전：\", // Version\"\r\n        },\r\n        commit: \"커밋 SHA\",  // Commit SHA,\r\n        devTools: {\r\n            description: \"이슈 진단을 돕기 위한 개발자 도구 열기\", // Open application developer tools to help diagnose issues,\r\n            button: \"개발자 도구 전환\", // Toggle Developer Tools\r\n        },\r\n        reload: {\r\n            description: \"모든 변경사항을 버리고 애플리케이션을 재시작 합니다\", // Reload the app discarding all current changes,\r\n            button: \"애플리케이션 새로고침\", // Refresh Application\r\n        },\r\n        messages: {\r\n            saveSuccess: \"애플리케이션 설정이 성공적으로 저장되었습니다\", // Successfully saved application settings\r\n        },\r\n    },\r\n    projectSettings: {\r\n        title: \"프로젝트 설정\", // Project Settings,\r\n        securityToken: {\r\n            title: \"보안 토큰\",  // Security Token,\r\n            description: \"프로젝트 파일 내에서 중요한 데이터를 암호화하는 데 사용\",  // Used to encrypt sensitive data within project file\r\n        },\r\n        useSecurityToken: {\r\n            title: \"보안 토큰 사용\", // Use Security Token\r\n            description: \"활성화되면 공급자 구성 내에서 중요한 데이터를 암호화합니다.\",\r\n            // When enabled will encrypt sensitive data within provider configuration\r\n        },\r\n        save: \"프로젝트 저장\", // Save Project,\r\n        sourceConnection: {\r\n            title: \"소스 연결\", // Source Connection,\r\n            description: \"Asset 저장 경로\", // Where to load assets from\r\n        },\r\n        targetConnection: {\r\n            title: \"대상 연결\", // Target Connection,\r\n            description: \"프로젝트 및 내 보낸 데이터를 저장할 위치\",  // Where to save the project and exported data\r\n        },\r\n        videoSettings: {\r\n            title: \"비디오 설정\", // Video Settings,\r\n            description: \"태그 지정을 위해 프레임을 추출하는 비율\",  // The rate at which frames are extracted for tagging\r\n            frameExtractionRate: \"프레임 추출 속도 (비디오 초당 프레임)\",  // Frame Extraction Rate (frames per a video second)\r\n        },\r\n        addConnection: \"연결 추가\", // Add Connection,\r\n        messages: {\r\n            saveSuccess: \"${project.name} 프로젝트 설정을 성공적으로 저장했습니다\", // Successfully saved ${project.name} project settings\r\n        },\r\n    },\r\n    projectMetrics: {\r\n        title: \"프로젝트 매트릭\",  // Project Metrics,\r\n        assetsSectionTitle: \"Asset\",  // Assets,\r\n        totalAssetCount: \"총 Asset\",  // Total Assets,\r\n        visitedAssets: \"검토한 Asset (${count})\", // Visited Assets (${count}),\r\n        taggedAssets: \"태그된 Asset (${count})\", // Tagged Assets (${count}),\r\n        nonTaggedAssets: \"태그가 없는 Asset (${count})\", // Not Tagged Assets (${count}),\r\n        nonVisitedAssets: \"검토하지 않은 Asset (${count})\", // Not Visited Assets (${count}),\r\n        tagsSectionTitle: \"태그\", // Tags & Labels,\r\n        totalRegionCount: \"태그된 지역 수\",  // Total Tagged Regions,\r\n        totalTagCount: \"태그 숫자\",  // Total Tags,\r\n        avgTagCountPerAsset: \"Asset 당 평균 태그 숫자\", // Average tags per asset\"\r\n    },\r\n    tags: {\r\n        title: \"태그\", // Tags,\r\n        placeholder: \"새 태그 추가\", // Add new tag,\r\n        editor: \"태그 편집기\",  // Tags Editor,\r\n        modal: {\r\n            name: \"태그 이름\", // Tag Name,\r\n            color: \"태그 색상\", // Tag Color\"\r\n        },\r\n        colors: {\r\n            white: \"하얀색\",  // White,\r\n            gray: \"회색\", // Gray,\r\n            red: \"빨간색\", // Red,\r\n            maroon: \"밤색\", // Maroon,\r\n            yellow: \"노랑색\", // Yellow,\r\n            olive: \"올리브색\", // Olive,\r\n            lime: \"라임색\", // Lime,\r\n            green: \"초록색\", // Green,\r\n            aqua: \"아쿠아\", // Aqua,\r\n            teal: \"물오리\", // Teal,\r\n            blue: \"파랑색\", // Blue,\r\n            navy: \"군청색\",  // Navy,\r\n            fuschia: \"푸시아\",  // Fuschia,\r\n            purple: \"보라색\",  // Purple\"\r\n        },\r\n        warnings: {\r\n            existingName: \"태그 이름이 이미 존재합니다. 다른 이름을 입력하십시오\",  // Tag name already exists. Choose another name,\r\n            emptyName: \"빈 태그 이름을 가질 수 없습니다\", // Cannot have an empty tag name,\r\n            unknownTagName: \"알 수 없는 태그 이름\",  // Unknown\"\r\n        },\r\n        toolbar: {\r\n            add: \"새 태그 추가\", // Add new tag,\r\n            search: \"태크 검색\",  // Search tags,\r\n            edit: \"태그 편집\", // Edit tag,\r\n            lock: \"태그 잠금\",  // Lock tag,\r\n            moveUp: \"태그를 위로 이동\", // Move tag up,\r\n            moveDown: \"태그를 아래로 이동\", // Move tag down,\r\n            delete: \"태그 삭제\", // Delete tag\"\r\n        },\r\n    },\r\n    connections: {\r\n        title: \"연결 설정\", // Connections,\r\n        details: \"설명\", // Connection Details,\r\n        settings: \"설정\", // Connection Settings,\r\n        instructions: \"편집 할 연결 정보를 선택하십시오\", // Please select a connection to edit,\r\n        save: \"저장\", // Save Connection,\r\n        messages: {\r\n            saveSuccess: \"${connection.name}을 성공적으로 저장했습니다\",  // Successfully saved ${connection.name},\r\n            deleteSuccess: \"${connection.name}을 삭제했습니다.\",  // Successfully deleted ${connection.name}\"\r\n        },\r\n        imageCorsWarning: \"경고 : 웹 브라우저에서 VoTT를 사용하는 경우 CORS (Cross Origin Resource Sharing) \" +\r\n            \"제한으로 인해 Bing Image Search의 일부 정보가 제대로 내보내지지 않을 수 있습니다.\",\r\n        // Warning: When using VoTT in a Web browser, some assets from Bing Image Search may no export\r\n        // correctly due to CORS (Cross Origin Resource Sharing) restrictions.\",\r\n        blobCorsWarning: \"경고 : 소스 또는 대상 연결로 사용하려면, Azure Blob Storage 계정에서 CORS(Cross Domain Resource Sharing) \" +\r\n            \"설정을 활성화 해야 합니다. CORS 설정에 대한 자세한 정보는 {0}에서 찾을 수 있습니다.\",\r\n        // Warning: CORS (Cross Domain Resource Sharing) must be enabled on the Azure Blob Storage account, in order\r\n        // to use i as a source or target connection. More information on enabling CORS can be found in the {0}\",\r\n        azDocLinkText: \"Azure 설명서.\",  // Azure Documentation.,\r\n        providers: {\r\n            azureBlob: {\r\n                title: \"Azure Blob 저장소\", // Azure Blob Storage,\r\n                description: \"\",\r\n                accountName: {\r\n                    title: \"계정 이름\", // Account Name,\r\n                    description: \"\",\r\n                },\r\n                containerName: {\r\n                    title: \"컨테이너 이름\",  // Container Name,\r\n                    description: \"\",\r\n                },\r\n                sas: {\r\n                    title: \"SAS\", // SAS,\r\n                    description: \"Blob Storage 계정을 인증하는 데 사용되는 공유 액세스 서명\",\r\n                    // Shared access signature used to authenticate to the blob storage account\"\r\n                },\r\n                createContainer: {\r\n                    title: \"컨테이너 만들기\",  // Create Container,\r\n                    description: \"Blob 컨테이너가 없으면 새로 생성합니다.\",\r\n                    // Creates the blob container if it does not already exist\"\r\n                },\r\n            },\r\n            bing: {\r\n                title: \"Bing 이미지 검색\",  // Bing Image Search,\r\n                options: {\r\n                    title: \"Bing 이미지 검색 옵션\",\r\n                },  // Bing Image Search Options,\r\n                endpoint: {\r\n                    title: \"끝점\",\r\n                    description: \"Bing 검색 Azure 리소스 내에 나열된 끝점\",\r\n                },\r\n                apiKey: {\r\n                    title: \"API 키\",\r\n                    description: \"Bing 검색 Azure 리소스 내에 나열된 API 키\",\r\n                }, // API Key,\r\n                query: {\r\n                    title: \"쿼리\",\r\n                    description: \"연결을 채우는 데 사용되는 검색 쿼리\",\r\n                },  // Query,\r\n                aspectRatio: {\r\n                    title: \"종횡비\", // Aspect Ratio,\r\n                    description: \"지정된 종횡비로 결과를 필터링합니다.\",\r\n                    options: {\r\n                        all: \"모두\", // All,\r\n                        square: \"정사각형\", // Square,\r\n                        wide: \"넓은\", // Wide,\r\n                        tall: \"긴\", // Tall\"\r\n                    },\r\n                },\r\n                licenseType: {\r\n                    title: \"라이센스 유형\",\r\n                    description: \"지정된 라이센스 유형으로 결과 필터링\",\r\n                    options: {\r\n                        all: \"모든 (이미지를 필터링하지 않음)\",\r\n                        any: \"라이센스 유형이 있는 모든 이미지\",\r\n                        public: \"퍼블릭 도메인\",\r\n                        share: \"무료 공유 및 사용\",\r\n                        shareCommercially: \"상업적으로 자유롭게 공유하고 사용할 수 있습니다.\",\r\n                        modify: \"자유롭게 수정, 공유 및 사용\",\r\n                        modifyCommercially: \"상업적으로 자유롭게 수정, 공유 및 사용\",\r\n                    },\r\n                },\r\n                size: {\r\n                    title: \"크기\",\r\n                    description: \"지정된 크기로 결과를 필터링합니다.\",\r\n                    options: {\r\n                        all: \"모든\",\r\n                        small: \"스몰(200x200 미만)\",\r\n                        medium: \"중간(500x500 미만)\",\r\n                        large: \"대형(500x500 이상)\",\r\n                        wallpaper: \"배경 화면 (초대형 이미지)\",\r\n                    },\r\n                },\r\n            },\r\n            local: {\r\n                title: \"로컬 파일 시스템\",  // Local File System,\r\n                folderPath: \"경로\",  // Folder Path,\r\n                selectFolder: \"폴더 선택\", // Select Folder,\r\n                chooseFolder: \"선택\", // Choose Folder\"\r\n            },\r\n        },\r\n    },\r\n    editorPage: {\r\n        width: \"너비\", // Width,\r\n        height: \"높이\", // Height,\r\n        tagged: \"태그\", // Tagged,\r\n        visited: \"방문\", // Visited,\r\n        toolbar: {\r\n            select: \"선택 (V)\", // Select (V),\r\n            pan: \"팬\", // Pan,\r\n            drawRectangle: \"사각형 그리기\", // Draw Rectangle,\r\n            drawPolygon: \"다각형 그리기\", // Draw Polygon,\r\n            copyRectangle: \"사각형 복사\", // Copy Rectangle,\r\n            copy: \"영역 복사\", // Copy Regions,\r\n            cut: \"영역 잘라내기\",  // Cut Regions,\r\n            paste: \"영역 붙여 넣기\", // Paste Regions,\r\n            removeAllRegions: \"모든 지역 제거\", // Remove All Regions,\r\n            previousAsset: \"이전 Asset\",  // Previous Asset,\r\n            nextAsset: \"다음 Asset\",  // Next Asset,\r\n            saveProject: \"프로젝트 저장\", // Save Project,\r\n            exportProject: \"프로젝트 내보내기\",  // Export Project,\r\n            activeLearning: \"Active Learning\",  // Active Learning\"\r\n        },\r\n        videoPlayer: {\r\n            previousTaggedFrame: {\r\n                tooltip: \"이전 태그 된 프레임\", // Previous Tagged Frame\"\r\n            },\r\n            nextTaggedFrame: {\r\n                tooltip: \"다음 태그 된 프레임\", // Next Tagged Frame\"\r\n            },\r\n            previousExpectedFrame: {\r\n                tooltip: \"이전 프레임\", // Previous Frame\"\r\n            },\r\n            nextExpectedFrame: {\r\n                tooltip: \"다음 프레임\", // Next Frame\"\r\n            },\r\n        },\r\n        help: {\r\n            title: \"도움말\",  // Toggle Help Menu,\r\n            escape: \"나가기\",  // Escape Help Menu\"\r\n        },\r\n        assetError: \"Asset을 불러올 수 없습니다\", // Unable to load asset,\r\n        tags: {\r\n            hotKey: {\r\n                apply: \"단축키로 태그 적용\",  // Apply Tag with Hot Key,\r\n                lock: \"단축키가 있는 태그 잠금\",  // Lock Tag with Hot Key\"\r\n            },\r\n            rename: {\r\n                title: \"태그 이름 바꾸기\", // Rename Tag,\r\n                confirmation: \"이 태그의 이름을 바꾸시겠습니까? 모든 Asset에서 이름이 변경됩니다\",\r\n                // Are you sure you want to rename this tag? It will be renamed throughout all assets\"\r\n            },\r\n            delete: {\r\n                title: \"태그 삭제\", // Delete Tag,\r\n                confirmation: \"이 태그를 삭제 하시겠습니까? 모든 Asset 및 태그가 유일한 지역 인 모든 지역에서 삭제됩니다.\",\r\n                // Are you sure you want to delete this tag? It will be deleted throughout all assets\r\n                // and any regions where this is the only tag will also be deleted\"\r\n            },\r\n        },\r\n        canvas: {\r\n            removeAllRegions: {\r\n                title: \"모든 지역 제거\", // Remove All Regions,\r\n                confirmation: \"모든 지역을 삭제 하시겠습니까?\",  // Are you sure you want to remove all regions\"\r\n            },\r\n        },\r\n        messages: {\r\n            enforceTaggedRegions: {\r\n                title: \"유효하지 않은 지역이 감지되었습니다.\",  // Invalid region(s) detected,\r\n                description: \"1 개 이상의 지역이 태그되어야 합니다. 다음 작업을 계속 진행하기 위해 모든 지역에 태그가 지정되어 있는지 확인하십시오.\",\r\n                // 1 or more regions have not been tagged. Ensure all regions ar tagged before continuing to next asset\"\r\n            },\r\n        },\r\n    },\r\n    export: {\r\n        title: \"내보내기\",  // Export,\r\n        settings: \"내보내기 설정\", // Export Settings,\r\n        saveSettings: \"내보내기 설정 저장\", // Save Export Settings,\r\n        providers: {\r\n            common: {\r\n                properties: {\r\n                    assetState: {\r\n                        title: \"Asset 상태\",  // Asset State,\r\n                        description: \"내보내기에 포함 할 Asset\", // Which assets to include in the export,\r\n                        options: {\r\n                            all: \"모든 Asset\",  // All Assets,\r\n                            visited: \"방문한 Asset만\", // Only Visited Assets,\r\n                            tagged: \"태그된 Asset만\", // Only tagged Assets\"\r\n                        },\r\n                    },\r\n                    testTrainSplit: {\r\n                        title: \"테스트용 / 학습용 분할\", // Test / Train Split,\r\n                        description: \"내보내는 데이터에 테스트용 / 학습용 분할\",\r\n                        // The test train split to use for exported data\"\r\n                    },\r\n                    includeImages: {\r\n                        title: \"이미지 포함\", // Include Images,\r\n                        description: \"대상 연결에 이진 이미지 Asset을 포함할지 여부\",\r\n                        // Whether or not to include binary image assets in target connection\"\r\n                    },\r\n                },\r\n            },\r\n            vottJson: {\r\n                displayName: \"VoTT JSON\", // VoTT JSON\r\n            },\r\n            azureCV: {\r\n                displayName: \"Azure Custom Vision 서비스\",  // Azure Custom Vision Service,\r\n                regions: {\r\n                    australiaEast: \"호주 동부\", // Australia East,\r\n                    centralIndia: \"중앙 인도\", // Central India,\r\n                    eastUs: \"미국 동부\", // East US,\r\n                    eastUs2: \"미국 동부 2\",  // East US 2,\r\n                    japanEast: \"일본 동부\", // Japan East,\r\n                    northCentralUs: \"미국 중북부\", // North Central US,\r\n                    northEurope: \"북유럽\", // North Europe,\r\n                    southCentralUs: \"미국 중남부\", // South Central US,\r\n                    southeastAsia: \"동남아시아\", // Southeast Asia,\r\n                    ukSouth: \"영국 남부\", // UK South,\r\n                    westUs2: \"미국 서부 2\",  // West US 2,\r\n                    westEurope: \"서유럽\", // West Europe\"\r\n                },\r\n                properties: {\r\n                    apiKey: {\r\n                        title: \"API 키\",  // API Key\"\r\n                    },\r\n                    region: {\r\n                        title: \"지역\", // Region,\r\n                        description: \"서비스가 배포 된 Azure 지역\",  // The Azure region where your service is deployed\"\r\n                    },\r\n                    classificationType: {\r\n                        title: \"분류 유형\", // Classification Type,\r\n                        options: {\r\n                            multiLabel: \"이미지 당 여러 태그\", // Multiple tags per image,\r\n                            multiClass: \"이미지 당 단일 태그\", // Single tag per image\"\r\n                        },\r\n                    },\r\n                    name: {\r\n                        title: \"프로젝트 이름\", // Project Name\"\r\n                    },\r\n                    description: {\r\n                        title: \"설명\", // Project Description\"\r\n                    },\r\n                    domainId: {\r\n                        title: \"도메인\", // Domain\"\r\n                    },\r\n                    newOrExisting: {\r\n                        title: \"신규 또는 기존 프로젝트\",  // New or Existing Project,\r\n                        options: {\r\n                            new: \"새로운 프로젝트\",  // New Project,\r\n                            existing: \"기존 프로젝트\",  // Existing Project\"\r\n                        },\r\n                    },\r\n                    projectId: {\r\n                        title: \"프로젝트 이름\", // Project Name\"\r\n                    },\r\n                    projectType: {\r\n                        title: \"프로젝트 유형\", // Project Type,\r\n                        options: {\r\n                            classification: \"분류\", // Classification,\r\n                            objectDetection: \"물체 감지\", // Object Detection\"\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            tfRecords: {\r\n                displayName: \"TensorFlow 기록\",  // Tensorflow Record\"\r\n            },\r\n            pascalVoc: {\r\n                displayName: \"Pascal VOC\",  // Pascal VOC,\r\n                exportUnassigned: {\r\n                    title: \"할당되지 않은 태그 내보내기\",  // Export Unassigned,\r\n                    description: \"내보내는 데이터에 할당되지 않은 태그를 포함할지 여부\",\r\n                    // Whether or not to include unassigned tags in exported data\"\r\n                },\r\n            },\r\n            cntk: {\r\n                displayName: \"Microsoft Cognitive Toolkit（CNTK）\", // Microsoft Cognitive Toolkit (CNTK)\"\r\n            },\r\n            csv: {\r\n                displayName: \"쉼표로 구분 된 값（CSV）\", // Comma Separated Values (CSV)\"\r\n            },\r\n        },\r\n        messages: {\r\n            saveSuccess: \"내보내기 설정이 성공적으로 저장되었습니다\", // Successfully saved export settings\"\r\n        },\r\n    },\r\n    activeLearning: {\r\n        title: \"Active Learning\",  // Active Learning,\r\n        form: {\r\n            properties: {\r\n                modelPathType: {\r\n                    title: \"모델 제공자\",  // Model Provider,\r\n                    description: \"학습 모델을 불러올 위치\",  // Where to load the training model from,\r\n                    options: {\r\n                        preTrained: \"미리 학습된 Coco SSD\", // Pre-trained Coco SSD,\r\n                        customFilePath: \"사용자 정의 (파일 경로)\",  // Custom (File path),\r\n                        customWebUrl: \"사용자 정의 (URL)\",  // Custom (Url)\"\r\n                    },\r\n                },\r\n                autoDetect: {\r\n                    title: \"자동 감지\", // Auto Detect,\r\n                    description: \"Asset 간을 탐색 할 때 자동 예측 여부\",\r\n                    // Whether or not to automatically make predictions as you navigate between assets\"\r\n                },\r\n                modelPath: {\r\n                    title: \"모델 경로\",  // Model path,\r\n                    description: \"로컬 파일 시스템에서 모델을 선택하십시오.\",  // Select a model from your local file system\"\r\n                },\r\n                modelUrl: {\r\n                    title: \"모델 URL\", // Model URL,\r\n                    description: \"URL에서 모델 불러오기\",  // Load your model from a public web URL\"\r\n                },\r\n                predictTag: {\r\n                    title: \"태그 예측\", // Predict Tag,\r\n                    description: \"예측에 태그를 자동으로 포함할지 여부\", // Whether or not to automatically include tags in predictions\"\r\n                },\r\n            },\r\n        },\r\n        messages: {\r\n            loadingModel: \"Active Learning 모델 불러오는 중 ...\", // Loading active learning model...,\r\n            errorLoadModel: \"Active Learning 모델을 불러오는 중 오류가 발생했습니다\", // Error loading active learning model,\r\n            saveSuccess: \"Active Learning 모델 설정을 성공적으로 저장했습니다\",  // Successfully saved active learning settings\"\r\n        },\r\n    },\r\n    profile: {\r\n        settings: \"프로필 설정\", // Profile Settings\"\r\n    },\r\n    errors: {\r\n        unknown: {\r\n            title: \"알 수 없는 오류\", // Unknown Error,\r\n            message: \"애플리케이션에 알 수 없는 오류가 발생했습니다. 다시 시도하십시오.\", // The app encountered an unknown error. Please try again\"\r\n        },\r\n        projectUploadError: {\r\n            title: \"파일 업로드 오류\",  // Error Uploading File,\r\n            message: \"파일을 업로드하는 중에 오류가 발생했습니다. 파일이 올바른 형식인지 확인한 후 다시 시도하십시오.\",\r\n            // There was an error uploading the file. Please verify the file is of the correct format and try again.\"\r\n        },\r\n        genericRenderError: {\r\n            title: \"응용 프로그램 로딩 오류\", // Error Loading Application,\r\n            message: \"응용 프로그램을 렌더링하는 중에 오류가 발생했습니다. 다시 시도하십시오\",\r\n            // An error occured while rendering the application. Please try again\"\r\n        },\r\n        projectInvalidSecurityToken: {\r\n            title: \"프로젝트 파일을 로드하는 중 오류가 발생했습니다\",  // Error loading project file,\r\n            message: \"프로젝트에서 참조한 보안 토큰이 유효하지 않습니다.응용 프로그램 설정 내에서 프로젝트의 보안 토큰이 올바르게 설정되었는지 확인하십시오\",\r\n            // The security token referenced by the project is invalid.\r\n            // Verify that the security token for the project has been set correctly within your application settings\"\r\n        },\r\n        projectInvalidJson: {\r\n            title: \"프로젝트 파일 파싱 오류\",  // Error parsing project file,\r\n            message: \"선택한 프로젝트 파일에 유효한 JSON이 포함되어 있지 않습니다. 파일을 다시 확인하십시오.\",\r\n            // The selected project files does not contain valid JSON Please check the file any try again.\"\r\n        },\r\n        projectDeleteError: {\r\n            title: \"프로젝트 삭제 오류\", // Error deleting project,\r\n            message: \"프로젝트를 삭제하는 중에 오류가 발생했습니다. 프로젝트 파일에 보안 토큰이 존재하는지 확인한 후 다시 시도하십시오.\",\r\n            // An error occured while deleting the project.\r\n            // Validate the project file an security token exist and try again\"\r\n        },\r\n        securityTokenNotFound: {\r\n            title: \"프로젝트 파일을 로드하는 중 오류가 발생했습니다\",  // Error loading project file,\r\n            message: \"프로젝트가 참조하는 보안 토큰을 현재 애플리케이션 설정에서 찾을 수 없습니다. 보안 토큰이 있는지 확인하고 프로젝트를 다시로드하십시오.\",\r\n            // The security token referenced by the project cannot be found in your current application settings.\r\n            // Verify the security token exists and try to reload the project.\"\r\n        },\r\n        canvasError: {\r\n            title: \"캔버스 불러 오기 오류\", // Error loading canvas,\r\n            message: \"캔버스를 로드하는 중에 오류가 발생했습니다. 프로젝트 Asset을 확인한 후 다시 시도하십시오.\",\r\n            // There was an error loading the canvas, check the project's assets and try again.\"\r\n        },\r\n        importError: {\r\n            title: \"V1 프로젝트 가져 오기 오류\",  // Error importing V1 project,\r\n            message: \"V1 프로젝트를 가져 오는 중에 오류가 발생했습니다. 프로젝트 파일을 확인하고 다시 시도하십시오.\",\r\n            // There was an error importing the V1 project. Check the project file and try again\"\r\n        },\r\n        pasteRegionTooBigError: {\r\n            title: \"지역 붙여 넣기 오류\", // Error pasting region,\r\n            message: \"이 Asset에 비해 지역이 너무 큽니다. 다른 지역을 복사 해보십시오.\",\r\n            // Region too big for this asset. Try copying another region\"\r\n        },\r\n        exportFormatNotFound: {\r\n            title: \"프로젝트 내보내기 오류\",  // Error exporting project,\r\n            message: \"프로젝트에 내보내기 형식이 없습니다. 내보내기 설정 페이지에서 내보내기 형식을 선택하십시오.\",\r\n            // Project is missing export format. Please select an export format in the export setting page.\"\r\n        },\r\n        activeLearningPredictionError: {\r\n            title: \"Active Learning 오류\",  // Active Learning Error,\r\n            message: \"현재 Asset의 지역을 예측하는 동안 오류가 발생했습니다. Active Learning 구성을 확인하고 다시 시도하십시오\",\r\n            // An error occurred while predicting regions in the current asset.\r\n            // Please verify your active learning configuration and try again\"\r\n        },\r\n    },\r\n};\r\n","import { IAppStrings } from \"../strings\";\r\n\r\n/**\r\n * App Strings for Simplified Chinese (zh-ch)\r\n */\r\nexport const chinese: IAppStrings = {\r\n    appName: \"视觉对象标记工具\", // Visual Object Tagging Tool\r\n    common: {\r\n        displayName: \"显示名称\", // Display Name\r\n        description: \"描述\", // Description\r\n        submit: \"提交\", // Submit\r\n        cancel: \"取消\", // Cancel\r\n        save: \"保存\", // Save\r\n        delete: \"删除\", // Delete\r\n        provider: \"提供者\", // Provider\r\n        homePage: \"主页\", // Home Page\r\n    },\r\n    titleBar: {\r\n        help: \"帮助\", // Help\r\n        minimize: \"最小化\", // Minimize\r\n        maximize: \"最大化\", // Maximize\r\n        restore: \"复原\", // Restore\r\n        close: \"关闭\", // Close\r\n    },\r\n    homePage: {\r\n        newProject: \"新项目\", // New Project\r\n        openLocalProject: {\r\n            title: \"打开本地项目\", // Open Local Project\r\n        },\r\n        openCloudProject: {\r\n            title: \"打开云端项目\", // Open Cloud Project\r\n            selectConnection: \"选择一个连接\", // Select a Connection\r\n        },\r\n        recentProjects: \"最近的项目\", // Recent Projects\r\n        deleteProject: {\r\n            title: \"删除项目\", // Delete Project\r\n            confirmation: \"确定要删除项目吗\", // Are you sure you want to delete project\r\n        },\r\n        importProject: {\r\n            title: \"导入项目\", // Import Project\r\n            confirmation: \"您确定要将项目${project.file.name}设置转换为v2格式吗？我们建议您首先备份项目文件。\",\r\n            // Are you sure you want to convert project ${project.file.name} project settings to v2 format?\r\n            // We recommend you backup the project file first.\r\n        },\r\n        messages: {\r\n            deleteSuccess: \"已成功删除${project.name}\", // Successfully deleted ${project.name}\r\n        },\r\n    },\r\n    appSettings: {\r\n        title: \"应用程序设置\", // Application Settings\r\n        storageTitle: \"储存设置\", // Storage Settings\r\n        uiHelp: \"您的设置储存在哪里\", // Where your settings are stored\r\n        save: \"保存设置\", // Save Settings\r\n        securityToken: {\r\n            name: {\r\n                title: \"名称\", // Name\r\n            },\r\n            key: {\r\n                title: \"密钥\", // Key\r\n            },\r\n        },\r\n        securityTokens: {\r\n            title: \"安全令牌\", // Security Tokens\r\n            description: \"安全令牌用于加密项目配置中的敏感数据\",\r\n            // Security tokens are used to encrypt sensitive data within your project configuration\r\n        },\r\n        version: {\r\n            description: \"版本：\", // Version:\r\n        },\r\n        commit: \"提交SHA\", // Commit SHA\r\n        devTools: {\r\n            description: \"打开应用程序开发者工具以帮助诊断问题\", // Open application developer tools to help diagnose issues\r\n            button: \"切换至开发者工具\", // Toggle Developer Tools\r\n        },\r\n        reload: {\r\n            description: \"重新加载应用，放弃当前所有更改\", // Reload the app discarding all current changes\r\n            button: \"刷新应用\", // Refresh Application\r\n        },\r\n        messages: {\r\n            saveSuccess: \"成功保存应用程序设置\", // Successfully saved application settings\r\n        },\r\n    },\r\n    projectSettings: {\r\n        title: \"项目设定\", // Project Settings\r\n        securityToken: {\r\n            title: \"安全令牌\", // Security Token\r\n            description: \"用于加密项目文件中的敏感数据\", // Used to encrypt sensitive data within project files\r\n        },\r\n        useSecurityToken: {\r\n            title: \"使用安全令牌\", // Use Security Token\r\n            description: \"启用后将在提供者配置内加密敏感数据\",\r\n            // When enabled will encrypt sensitive data within provider configuration\r\n        },\r\n        save: \"保存项目\", // Save Project\r\n        sourceConnection: {\r\n            title: \"源连接\", // Source Connection\r\n            description: \"从何处加载素材\", // Where to load assets from\r\n        },\r\n        targetConnection: {\r\n            title: \"目标连接\", // Target Connection\r\n            description: \"在哪里保存项目和导出数据\", // Where to save the project and exported data\r\n        },\r\n        videoSettings: {\r\n            title: \"视频设定\", // Video Settings\r\n            description: \"提取帧以进行标记的速率\", // The rate at which frames are extracted for tagging.\r\n            frameExtractionRate: \"帧提取率（每视频每秒的帧数）\", // Frame Extraction Rate (frames per a video second)\r\n        },\r\n        addConnection: \"添加连接\", // Add Connection\r\n        messages: {\r\n            saveSuccess: \"成功保存${project.name}项目设置\", // Successfully saved ${project.name} project settings\r\n        },\r\n    },\r\n    projectMetrics: {\r\n        title: \"项目指标\", // Project Metrics\r\n        assetsSectionTitle: \"素材\", // Assets\r\n        totalAssetCount: \"素材总数\", // Total Assets\r\n        visitedAssets: \"已访问素材（${count}）\", // Visited Assets (${count})\r\n        taggedAssets: \"已标记素材（${count}）\", // Tagged Assets (${count})\r\n        nonTaggedAssets: \"未标记素材（${count}）\", // Not Tagged Assets (${count})\r\n        nonVisitedAssets: \"未访问素材（${count}）\", // Not Visited Assets (${count})\r\n        tagsSectionTitle: \"标记与标签\", // Tags & Labels\r\n        totalRegionCount: \"标记区域总数\", // Total Tagged Regions\r\n        totalTagCount: \"标签总数\", // Total Tags\r\n        avgTagCountPerAsset: \"每个素材的平均标签数\", // Average tags per asset\r\n    },\r\n    tags: {\r\n        title: \"标签\", // Tags\r\n        placeholder: \"添加标签\", // Add new tag\r\n        editor: \"编辑标签\", // Tags Editor\r\n        modal: {\r\n            name: \"标签名称\", // Tag Name\r\n            color: \"标签颜色\", // Tag Color\r\n        },\r\n        colors: {\r\n            white: \"白色\", // White\r\n            gray: \"灰色\", // Gray\r\n            red: \"红色\", // Red\r\n            maroon: \"栗色\", // Maroon\r\n            yellow: \"黄色\", // Yellow\r\n            olive: \"橄榄色\", // Olive\r\n            lime: \"青色\", // Lime\r\n            green: \"绿色\", // Green\r\n            aqua: \"浅绿色\", // Aqua\r\n            teal: \"蓝绿色\", // Teal\r\n            blue: \"蓝色\", // Blue\r\n            navy: \"海军蓝色\", // Navy\r\n            fuschia: \"紫红色\", // Fuschia\r\n            purple: \"紫色\", // Purple\r\n        },\r\n        warnings: {\r\n            existingName: \"标签名称已存在。请选择另一个名字\", // Tag name already exists. Choose another name\r\n            emptyName: \"标签名称不能为空\", // Cannot have an empty tag name\r\n            unknownTagName: \"未知\", // Unknown\r\n        },\r\n        toolbar: {\r\n            add: \"添加标签\", // Add new tag\r\n            search: \"搜索标签\", // Search tags\r\n            edit: \"编辑标签\", // Edit tag\r\n            lock: \"锁定标签\", // Lock tag\r\n            moveUp: \"向上移动标签\", // Move tag up\r\n            moveDown: \"向下移动标签\", // Move tag down\r\n            delete: \"删除标签\", // Delete tag\r\n        },\r\n    },\r\n    connections: {\r\n        title: \"连接数\", // Connections\r\n        details: \"连接详细信息\", // Connection Details\r\n        settings: \"连接设定\", // Connection Settings\r\n        instructions: \"请选择一个连接进行编辑\", // Please select a connection to edit\r\n        save: \"保存连接\", // Save Connection\r\n        messages: {\r\n            saveSuccess: \"已成功保存${connection.name}\", // Successfully saved ${connection.name}\r\n            deleteSuccess: \"已成功删除${connection.name}\", // Successfully deleted ${connection.name}\r\n        },\r\n        imageCorsWarning: \"警告：在Web浏览器中使用VoTT时，由于CORS（跨源资源共享）限制，来自Bing Image Search的某些素材可能无法正确导出。\",\r\n        // Warning: When using VoTT in a Web browser, some assets from Bing Image Search may not export correctly\r\n        // due to CORS (Cross Origin Resource Sharing) restrictions.\r\n        blobCorsWarning: \"警告：必须在Azure Blob存储帐户上启用CORS（跨域资源共享），才能将其用作源或目标连接。 {0}中提供了有关启用CORS的更多信息。\",\r\n        // Warning: CORS (Cross Domain Resource Sharing) must be enabled on the Azure Blob Storage account,\r\n        // in order to use it as a source or target connection.\r\n        // More information on enabling CORS can be found in the {0}\r\n        azDocLinkText: \"Azure文档\", // Azure Documentation.\r\n        providers: {\r\n            azureBlob: {\r\n                title: \"Azure Blob存储\", // Azure Blob Storage\r\n                description: \"\",\r\n                accountName: {\r\n                    title: \"用户名\", // Account Name\r\n                    description: \"\",\r\n                },\r\n                containerName: {\r\n                    title: \"容器名称\", // Container Name\r\n                    description: \"\",\r\n                },\r\n                sas: {\r\n                    title: \"SAS\", // SAS\r\n                    description: \"用于验证Blob存储帐户的共享访问签名\",\r\n                    // Shared access signature used to authenticate to the blob storage account\r\n                },\r\n                createContainer: {\r\n                    title: \"创建容器\", // Create Container\r\n                    description: \"创建blob容器（如果尚不存在）\",\r\n                    // Creates the blob container if it does not already exist\r\n                },\r\n            },\r\n            bing: {\r\n                title: \"必应图片搜索\", // Bing Image Search\r\n                options: {\r\n                    title: \"必应图像搜索选项\",\r\n                }, // Bing Image Search Options\r\n                endpoint: {\r\n                    title: \"端点\",\r\n                    description: \"必应搜索 Azure 资源中列出的终结点\",\r\n                },\r\n                apiKey: {\r\n                    title: \"API密钥\",\r\n                    description: \"必应搜索 Azure 资源中列出的 API 密钥\",\r\n                }, // API Key\r\n                query: {\r\n                    title: \"查询\",\r\n                    description: \"用于填充连接的搜索查询\",\r\n                }, // Query\r\n                aspectRatio: {\r\n                    title: \"长宽比\", // Aspect Ratio\r\n                    description: \"按指定的纵横比筛选结果\",\r\n                    options: {\r\n                        all: \"所有\", // All\r\n                        square: \"正方形\", // Square\r\n                        wide: \"宽\", // Wide\r\n                        tall: \"高\", // Tall\r\n                    },\r\n                },\r\n                licenseType: {\r\n                    title: \"许可证类型\",\r\n                    description: \"按指定的许可证类型筛选结果\",\r\n                    options: {\r\n                        all: \"全部（不过滤任何图像）\",\r\n                        any: \"任何许可证类型的图像\",\r\n                        public: \"公有领域\",\r\n                        share: \"免费分享和使用\",\r\n                        shareCommercially: \"免费共享和使用商业\",\r\n                        modify: \"免费修改、共享和使用\",\r\n                        modifyCommercially: \"可自由修改、共享和在商业上使用\",\r\n                    },\r\n                },\r\n                size: {\r\n                    title: \"大小\",\r\n                    description: \"按指定大小筛选结果\",\r\n                    options: {\r\n                        all: \"所有\",\r\n                        small: \"小（小于200x200）\",\r\n                        medium: \"中等（小于 500x500）\",\r\n                        large: \"大（大于 500x500）\",\r\n                        wallpaper: \"壁纸（超大图像）\",\r\n                    },\r\n                },\r\n            },\r\n            local: {\r\n                title: \"本地文件系统\", // Local File System\r\n                folderPath: \"文件夹路径\", // Folder Path\r\n                selectFolder: \"选择文件夹\", // Select Folder\r\n                chooseFolder: \"选择文件夹\", // Choose Folder\r\n            },\r\n        },\r\n    },\r\n    editorPage: {\r\n        width: \"宽度\", // Width\r\n        height: \"高度\", // Height\r\n        tagged: \"已标记\", // Tagged\r\n        visited: \"已访问\", // Visited\r\n        toolbar: {\r\n            select: \"选择[V]\", // Select (V)\r\n            pan: \"泛\", // Pan\r\n            drawRectangle: \"绘制矩形\", // Draw Rectangle\r\n            drawPolygon: \"绘制多边形\", // Draw Polygon\r\n            copyRectangle: \"复制矩形\", // Copy Rectangle\r\n            copy: \"复制区域\", // Copy Regions\r\n            cut: \"剪切区域\", // Cut Regions\r\n            paste: \"粘贴区域\", // Paste Regions\r\n            removeAllRegions: \"删除所有区域\", // Remove All Regions\r\n            previousAsset: \"以前的素材\", // Previous Asset\r\n            nextAsset: \"下一项素材\", // Next Asset\r\n            saveProject: \"保存项目\", // Save Project\r\n            exportProject: \"导出项目\", // Export Project\r\n            activeLearning: \"主动学习\", // Active Learning\r\n        },\r\n        videoPlayer: {\r\n            previousTaggedFrame: {\r\n                tooltip: \"上一个已标记的帧\", // Previous Tagged Frame\r\n            },\r\n            nextTaggedFrame: {\r\n                tooltip: \"下一个已标记的帧\", // Next Tagged Frame\r\n            },\r\n            previousExpectedFrame: {\r\n                tooltip: \"上一帧\", // Previous Frame\r\n            },\r\n            nextExpectedFrame: {\r\n                tooltip: \"下一帧\", // Next Frame\r\n            },\r\n        },\r\n        help: {\r\n            title: \"切换帮助菜单\", // Toggle Help Menu\r\n            escape: \"退出帮助菜单\", // Escape Help Menu\r\n        },\r\n        assetError: \"无法加载素材\", // Unable to load asset\r\n        tags: {\r\n            hotKey: {\r\n                apply: \"使用快捷键应用标签\", // Apply Tag with Hot Key\r\n                lock: \"使用快捷键锁定标签\", // Lock Tag with Hot Key\r\n            },\r\n            rename: {\r\n                title: \"重新命名标签\", // Rename Tag\r\n                confirmation: \"您确定要重新命名此标签吗？它将在所有素材中被重新命名\",\r\n                // Are you sure you want to rename this tag? It will be renamed throughout all assets\r\n            },\r\n            delete: {\r\n                title: \"删除标签\", // Delete Tag\r\n                confirmation: \"您确定要删除此标签吗？它将在所有素材中被删除，并且仅使用此标签标记的任何区域也将被删除\",\r\n                // Are you sure you want to delete this tag? It will be deleted throughout all assets\r\n                // and any regions where this is the only tag will also be deleted\r\n            },\r\n        },\r\n        canvas: {\r\n            removeAllRegions: {\r\n                title: \"删除所有区域\", // Remove All Regions\r\n                confirmation: \"您确定要删除所有区域吗？\", // Are you sure you want to remove all regions?\r\n            },\r\n        },\r\n        messages: {\r\n            enforceTaggedRegions: {\r\n                title: \"检测到无效的区域\", // Invalid region(s) detected\r\n                description: \"1个或多个区域尚未被标记。在继续下一个素材之前，请确保所有区域均已标记。\",\r\n                // 1 or more regions have not been tagged.\r\n                // Ensure all regions are tagged before continuing to next asset.\r\n            },\r\n        },\r\n    },\r\n    export: {\r\n        title: \"导出\", // Export\r\n        settings: \"导出设置\", // Export Settings\r\n        saveSettings: \"保存导出设置\", // Save Export Settings\r\n        providers: {\r\n            common: {\r\n                properties: {\r\n                    assetState: {\r\n                        title: \"素材状态\", // Asset State\r\n                        description: \"导出中包括哪些素材\", // Which assets to include in the export\r\n                        options: {\r\n                            all: \"所有素材\", // All Assets\r\n                            visited: \"仅已访问素材\", // Only Visited Assets\r\n                            tagged: \"仅已标记素材\", // Only tagged Assets\r\n                        },\r\n                    },\r\n                    testTrainSplit: {\r\n                        title: \"测试/训练用数据分离\", // Test / Train Split\r\n                        description: \"导出时分离测试/训练用数据\", // The test train split to use for exported data\r\n                    },\r\n                    includeImages: {\r\n                        title: \"包含图片\", // Include Images\r\n                        description: \"是否在目标连接中包括二值化图像素材\",\r\n                        // Whether or not to include binary image assets in target connection\r\n                    },\r\n                },\r\n            },\r\n            vottJson: {\r\n                displayName: \"VoTT JSON\", // VoTT JSON\r\n            },\r\n            azureCV: {\r\n                displayName: \"Azure自定义视觉服务\", // Azure Custom Vision Service\r\n                regions: {\r\n                    australiaEast: \"澳大利亚东部\", // Australia East\r\n                    centralIndia: \"印度中部\", // Central India\r\n                    eastUs: \"美国东部\", // East US\r\n                    eastUs2: \"美国东部2\", // East US 2\r\n                    japanEast: \"日本东部\", // Japan East\r\n                    northCentralUs: \"美国中北部\", // North Central US\r\n                    northEurope: \"欧州北部\", // North Europe\r\n                    southCentralUs: \"美国中南部\", // South Central US\r\n                    southeastAsia: \"东南亚\", // Southeast Asia\r\n                    ukSouth: \"英国南部\", // UK South\r\n                    westUs2: \"美国西部2\", // West US 2\r\n                    westEurope: \"欧州西部\", // West Europe\r\n                },\r\n                properties: {\r\n                    apiKey: {\r\n                        title: \"API密钥\", // API Key\r\n                    },\r\n                    region: {\r\n                        title: \"区域\", // Region\r\n                        description: \"部署服务的Azure区域\", // The Azure region where your service is deployed\r\n                    },\r\n                    classificationType: {\r\n                        title: \"分类类型\", // Classification Type\r\n                        options: {\r\n                            multiLabel: \"每个图像多个标签\", // Multiple tags per image\r\n                            multiClass: \"每个图像一个标签\", // Single tag per image\r\n                        },\r\n                    },\r\n                    name: {\r\n                        title: \"项目名\", // Project Name\r\n                    },\r\n                    description: {\r\n                        title: \"项目简介\", // Project Description\r\n                    },\r\n                    domainId: {\r\n                        title: \"域\", // Domain\r\n                    },\r\n                    newOrExisting: {\r\n                        title: \"新项目或现有项目\", // New or Existing Project\r\n                        options: {\r\n                            new: \"新项目\", // New Project\r\n                            existing: \"现有项目\", // Existing Project\r\n                        },\r\n                    },\r\n                    projectId: {\r\n                        title: \"项目名\", // Project Name\r\n                    },\r\n                    projectType: {\r\n                        title: \"项目类型\", // Project Type\r\n                        options: {\r\n                            classification: \"分类\", // Classification\r\n                            objectDetection: \"物体识别\", // Object Detection\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            tfRecords: {\r\n                displayName: \"Tensorflow记录\", // Tensorflow Records\r\n            },\r\n            pascalVoc: {\r\n                displayName: \"Pascal VOC\", // Pascal VOC\r\n                exportUnassigned: {\r\n                    title: \"导出未分配\", // Export Unassigned\r\n                    description: \"是否在导出的数据中包括未被分配的标签\", // Whether or not to include unassigned tags in exported data\r\n                },\r\n            },\r\n            cntk: {\r\n                displayName: \"Microsoft Cognitive Toolkit（CNTK)\", // Microsoft Cognitive Toolkit (CNTK)\r\n            },\r\n            csv: {\r\n                displayName: \"逗号分隔值 (CSV)\", // Comma Separated Values (CSV)\r\n            },\r\n        },\r\n        messages: {\r\n            saveSuccess: \"成功保存导出设置\", // Successfully saved export settings\r\n        },\r\n    },\r\n    activeLearning: {\r\n        title: \"主动学习\", // Active Learning\r\n        form: {\r\n            properties: {\r\n                modelPathType: {\r\n                    title: \"模型提供者\", // Model Provider\r\n                    description: \"从何处加载训练模型\", // Where to load the training model from\r\n                    options: {\r\n                        preTrained: \"预先训练 Coco SSD\", // Pre-trained Coco SSD\r\n                        customFilePath: \"自定义（文件路径）\", // Custom (File path)\r\n                        customWebUrl: \"自定义 (URL)\", // Custom (Url)\r\n                    },\r\n                },\r\n                autoDetect: {\r\n                    title: \"自动识别\", // Auto Detect\r\n                    description: \"在素材之间导航时是否自动进行预测\",\r\n                    // Whether or not to automatically make predictions as you navigate between assets\r\n                },\r\n                modelPath: {\r\n                    title: \"模型路径\", // Model path\r\n                    description: \"从本地文件系统中选择模型\", // Select a model from your local file system\r\n                },\r\n                modelUrl: {\r\n                    title: \"模型 URL\", // Model URL\r\n                    description: \"从公共网址加载模型\", // Load your model from a public web URL\r\n                },\r\n                predictTag: {\r\n                    title: \"预测标签\", // Predict Tag\r\n                    description: \"是否在预测中自动包含标签\", // Whether or not to automatically include tags in predictions\r\n                },\r\n            },\r\n        },\r\n        messages: {\r\n            loadingModel: \"正在加载主动学习模型...\", // Loading active learning model...\r\n            errorLoadModel: \"加载主动学习模型时出错\", // Error loading active learning model\r\n            saveSuccess: \"成功保存了主动学习设置\", // Successfully saved active learning settings\r\n        },\r\n    },\r\n    profile: {\r\n        settings: \"个人资料设置\", // Profile Settings\r\n    },\r\n    errors: {\r\n        unknown: {\r\n            title: \"未知错误\", // Unknown Error\r\n            message: \"该应用程序遇到未知错误。请重试。\", // The app encountered an unknown error. Please try again.\r\n        },\r\n        projectUploadError: {\r\n            title: \"上传文件时出错\", // Error Uploading File\r\n            message: \"上传文件时出错。请确认文件格式正确，然后重试。\",\r\n            // There was an error uploading the file. Please verify the file is of the correct format and try again.\r\n        },\r\n        genericRenderError: {\r\n            title: \"加载应用程序时出错\", // Error Loading Application\r\n            message: \"呈现应用程序时发生错误。请重试\",\r\n            // An error occured while rendering the application. Please try again\r\n        },\r\n        projectInvalidSecurityToken: {\r\n            title: \"加载项目文件时出错\", // Error loading project file\r\n            message: \"项目引用的安全令牌无效。请验证是否在您的应用程序设置中正确设置了项目的安全令牌\",\r\n            // The security token referenced by the project is invalid.\r\n            // Verify that the security token for the project has been set correctly within your application settings\r\n        },\r\n        projectInvalidJson: {\r\n            title: \"解析项目文件时出错\", // Error parsing project file\r\n            message: \"所选的项目文件不包含有效的JSON。请检查该文件, 然后重试。\",\r\n            // The selected project files does not contain valid JSON. Please check the file any try again.\r\n        },\r\n        projectDeleteError: {\r\n            title: \"删除项目时出错\", // Error deleting project\r\n            message: \"删除项目时发生错误。验证项目文件和安全令牌是否存在，然后重试\",\r\n            // An error occured while deleting the project.\r\n            // Validate the project file and security token exist and try again\r\n        },\r\n        securityTokenNotFound: {\r\n            title: \"加载项目文件时出错\", // Error loading project file\r\n            message: \"在当前的应用程序设置中找不到该项目引用的安全令牌。验证安全令牌是否存在，然后尝试重新加载项目。\",\r\n            // The security token referenced by the project cannot be found in your current application settings.\r\n            // Verify the security token exists and try to reload the project.\r\n        },\r\n        canvasError: {\r\n            title: \"加载画布时出错\", // Error loading canvas\r\n            message: \"加载画布时发生错误，请检查项目的素材，然后重试。\",\r\n            // There was an error loading the canvas, check the project's assets and try again.\r\n        },\r\n        importError: {\r\n            title: \"导入V1项目时出错\", // Error importing V1 project\r\n            message: \"导入V1项目时出错。检查项目文件，然后重试\",\r\n            // There was an error importing the V1 project. Check the project file and try again\r\n        },\r\n        pasteRegionTooBigError: {\r\n            title: \"粘贴区域时出错\", // Error pasting region\r\n            message: \"区域对于该素材过大。请尝试复制其他区域\", // Region too big for this asset. Try copying another region\r\n        },\r\n        exportFormatNotFound: {\r\n            title: \"导出项目时出错\", // Error exporting project\r\n            message: \"项目缺少导出格式。请在导出设置页面中选择一种导出格式。\",\r\n            // Project is missing export format.  Please select an export format in the export setting page.\r\n        },\r\n        activeLearningPredictionError: {\r\n            title: \"主动学习错误\", // Active Learning Error\r\n            message: \"预测当前素材中的区域时发生错误。请验证您的主动学习配置，然后重试\",\r\n            // An error occurred while predicting regions in the current asset.\r\n            // Please verify your active learning configuration and try again\r\n        },\r\n    },\r\n};\r\n","import LocalizedStrings, { LocalizedStringsMethods } from \"react-localization\";\r\nimport { english } from \"./localization/en-us\";\r\nimport { spanish } from \"./localization/es-cl\";\r\nimport { japanese } from \"./localization/ja\";\r\nimport { chinesetw } from \"./localization/zh-tw\";\r\nimport { korean } from \"./localization/ko-kr\";\r\nimport { chinese } from \"./localization/zh-ch\";\r\n\r\n/**\r\n * Interface for all required strings in application\r\n * Language must add all strings to be compliant for localization\r\n */\r\nexport interface IAppStrings {\r\n    appName: string;\r\n    common: {\r\n        displayName: string;\r\n        description: string;\r\n        submit: string;\r\n        cancel: string;\r\n        save: string;\r\n        delete: string;\r\n        provider: string;\r\n        homePage: string;\r\n    };\r\n    titleBar: {\r\n        help: string;\r\n        minimize: string;\r\n        maximize: string;\r\n        restore: string;\r\n        close: string;\r\n    };\r\n    homePage: {\r\n        newProject: string;\r\n        openLocalProject: {\r\n            title: string;\r\n        },\r\n        openCloudProject: {\r\n            title: string;\r\n            selectConnection: string;\r\n        },\r\n        deleteProject: {\r\n            title: string;\r\n            confirmation: string;\r\n        },\r\n        importProject: {\r\n            title: string;\r\n            confirmation: string;\r\n        },\r\n        recentProjects: string,\r\n        messages: {\r\n            deleteSuccess: string,\r\n        },\r\n    };\r\n    appSettings: {\r\n        title: string;\r\n        storageTitle: string;\r\n        uiHelp: string;\r\n        save: string;\r\n        securityToken: {\r\n            name: {\r\n                title: string;\r\n            },\r\n            key: {\r\n                title: string;\r\n            },\r\n        },\r\n        securityTokens: {\r\n            title: string;\r\n            description: string;\r\n        },\r\n        version: {\r\n            description: string;\r\n        },\r\n        commit: string,\r\n        devTools: {\r\n            description: string;\r\n            button: string;\r\n        },\r\n        reload: {\r\n            description: string;\r\n            button: string;\r\n        },\r\n        messages: {\r\n            saveSuccess: string;\r\n        },\r\n    };\r\n    projectSettings: {\r\n        title: string;\r\n        securityToken: {\r\n            title: string;\r\n            description: string;\r\n        },\r\n        useSecurityToken: {\r\n            title: string;\r\n            description: string;\r\n        },\r\n        save: string;\r\n        sourceConnection: {\r\n            title: string;\r\n            description: string;\r\n        },\r\n        targetConnection: {\r\n            title: string;\r\n            description: string;\r\n        },\r\n        videoSettings: {\r\n            title: string;\r\n            description: string;\r\n            frameExtractionRate: string;\r\n        },\r\n        addConnection: string,\r\n        messages: {\r\n            saveSuccess: string;\r\n        },\r\n    };\r\n    projectMetrics: {\r\n        title: string;\r\n        assetsSectionTitle: string\r\n        totalAssetCount: string;\r\n        visitedAssets: string;\r\n        taggedAssets: string;\r\n        nonVisitedAssets: string;\r\n        nonTaggedAssets: string;\r\n        tagsSectionTitle: string;\r\n        totalRegionCount: string;\r\n        totalTagCount: string;\r\n        avgTagCountPerAsset: string;\r\n    };\r\n    tags: {\r\n        title: string;\r\n        placeholder: string;\r\n        editor: string;\r\n        modal: {\r\n            name: string;\r\n            color: string;\r\n        }\r\n        toolbar: {\r\n            add: string;\r\n            search: string;\r\n            lock: string;\r\n            edit: string;\r\n            moveUp: string;\r\n            moveDown: string;\r\n            delete: string;\r\n        }\r\n        colors: {\r\n            white: string;\r\n            gray: string;\r\n            red: string;\r\n            maroon: string;\r\n            yellow: string;\r\n            olive: string;\r\n            lime: string;\r\n            green: string;\r\n            aqua: string;\r\n            teal: string;\r\n            blue: string;\r\n            navy: string;\r\n            fuschia: string;\r\n            purple: string;\r\n        }\r\n        warnings: {\r\n            existingName: string;\r\n            emptyName: string;\r\n            unknownTagName: string;\r\n        }\r\n    };\r\n    connections: {\r\n        title: string;\r\n        details: string;\r\n        settings: string;\r\n        instructions: string;\r\n        save: string;\r\n        messages: {\r\n            saveSuccess: string;\r\n            deleteSuccess: string;\r\n        },\r\n        imageCorsWarning: string;\r\n        blobCorsWarning: string;\r\n        azDocLinkText: string;\r\n        providers: {\r\n            azureBlob: {\r\n                title: string;\r\n                description: string,\r\n                accountName: {\r\n                    title: string,\r\n                    description: string,\r\n                },\r\n                containerName: {\r\n                    title: string,\r\n                    description: string,\r\n                },\r\n                sas: {\r\n                    title: string,\r\n                    description: string,\r\n                },\r\n                createContainer: {\r\n                    title: string,\r\n                    description: string,\r\n                }\r\n            },\r\n            bing: {\r\n                title: string,\r\n                endpoint: {\r\n                    title: string,\r\n                    description?: string,\r\n                },\r\n                apiKey: {\r\n                    title: string,\r\n                    description?: string,\r\n                },\r\n                query: {\r\n                    title: string,\r\n                    description?: string,\r\n                },\r\n                options: {\r\n                    title: string,\r\n                },\r\n                aspectRatio: {\r\n                    title: string;\r\n                    description?: string,\r\n                    options: {\r\n                        all: string;\r\n                        square: string;\r\n                        wide: string;\r\n                        tall: string;\r\n                    }\r\n                },\r\n                size: {\r\n                    title: string,\r\n                    description?: string,\r\n                    options: {\r\n                        all: string,\r\n                        small: string,\r\n                        medium: string,\r\n                        large: string,\r\n                        wallpaper: string,\r\n                    },\r\n                },\r\n                licenseType: {\r\n                    title: string,\r\n                    description?: string,\r\n                    options: {\r\n                        all: string,\r\n                        any: string,\r\n                        public: string,\r\n                        share: string,\r\n                        shareCommercially: string,\r\n                        modify: string,\r\n                        modifyCommercially: string,\r\n                    },\r\n                },\r\n            },\r\n            local: {\r\n                title: string;\r\n                folderPath: string;\r\n                selectFolder: string;\r\n                chooseFolder: string;\r\n            },\r\n        }\r\n    };\r\n    editorPage: {\r\n        width: string;\r\n        height: string;\r\n        tagged: string;\r\n        visited: string;\r\n        toolbar: {\r\n            select: string;\r\n            pan: string;\r\n            drawRectangle: string;\r\n            drawPolygon: string;\r\n            copyRectangle: string;\r\n            copy: string;\r\n            cut: string;\r\n            paste: string;\r\n            removeAllRegions: string;\r\n            previousAsset: string;\r\n            nextAsset: string;\r\n            saveProject: string;\r\n            exportProject: string;\r\n            activeLearning: string;\r\n        }\r\n        videoPlayer: {\r\n            nextTaggedFrame: {\r\n                tooltip: string,\r\n            },\r\n            previousTaggedFrame: {\r\n                tooltip: string,\r\n            },\r\n            nextExpectedFrame: {\r\n                tooltip: string,\r\n            },\r\n            previousExpectedFrame: {\r\n                tooltip: string,\r\n            },\r\n        }\r\n        help: {\r\n            title: string;\r\n            escape: string;\r\n        }\r\n        assetError: string;\r\n        tags: {\r\n            hotKey: {\r\n                apply: string;\r\n                lock: string;\r\n            },\r\n            rename: {\r\n                title: string;\r\n                confirmation: string;\r\n            },\r\n            delete: {\r\n                title: string;\r\n                confirmation: string;\r\n            },\r\n        }\r\n        canvas: {\r\n            removeAllRegions: {\r\n                title: string;\r\n                confirmation: string;\r\n            },\r\n        },\r\n        messages: {\r\n            enforceTaggedRegions: {\r\n                title: string,\r\n                description: string,\r\n            },\r\n        }\r\n    };\r\n    export: {\r\n        title: string;\r\n        settings: string;\r\n        saveSettings: string;\r\n        providers: {\r\n            common: {\r\n                properties: {\r\n                    assetState: {\r\n                        title: string,\r\n                        description: string,\r\n                        options: {\r\n                            all: string,\r\n                            visited: string,\r\n                            tagged: string,\r\n                        },\r\n                    },\r\n                    testTrainSplit: {\r\n                        title: string,\r\n                        description: string,\r\n                    },\r\n                    includeImages: {\r\n                        title: string,\r\n                        description: string,\r\n                    },\r\n                },\r\n            },\r\n            vottJson: {\r\n                displayName: string,\r\n            },\r\n            azureCV: {\r\n                displayName: string,\r\n                regions: {\r\n                    eastUs: string,\r\n                    eastUs2: string,\r\n                    northCentralUs: string,\r\n                    southCentralUs: string,\r\n                    westUs2: string,\r\n                    westEurope: string,\r\n                    northEurope: string,\r\n                    southeastAsia: string,\r\n                    australiaEast: string,\r\n                    centralIndia: string,\r\n                    ukSouth: string,\r\n                    japanEast: string,\r\n                },\r\n                properties: {\r\n                    apiKey: {\r\n                        title: string,\r\n                    },\r\n                    region: {\r\n                        title: string,\r\n                        description: string,\r\n                    },\r\n                    newOrExisting: {\r\n                        title: string,\r\n                        options: {\r\n                            new: string,\r\n                            existing: string,\r\n                        },\r\n                    },\r\n                    name: {\r\n                        title: string,\r\n                    },\r\n                    description: {\r\n                        title: string,\r\n                    },\r\n                    projectType: {\r\n                        title: string,\r\n                        options: {\r\n                            classification: string,\r\n                            objectDetection: string,\r\n                        },\r\n                    },\r\n                    classificationType: {\r\n                        title: string,\r\n                        options: {\r\n                            multiLabel: string,\r\n                            multiClass: string,\r\n                        },\r\n                    },\r\n                    domainId: {\r\n                        title: string,\r\n                    },\r\n                    projectId: {\r\n                        title: string,\r\n                    },\r\n                },\r\n            },\r\n            tfRecords: {\r\n                displayName: string,\r\n            },\r\n            pascalVoc: {\r\n                displayName: string,\r\n                exportUnassigned: {\r\n                    title: string,\r\n                    description: string,\r\n                },\r\n            },\r\n            cntk: {\r\n                displayName: string,\r\n            },\r\n            csv: {\r\n                displayName: string,\r\n            },\r\n        },\r\n        messages: {\r\n            saveSuccess: string;\r\n        },\r\n    };\r\n    activeLearning: {\r\n        title: string;\r\n        form: {\r\n            properties: {\r\n                modelPathType: {\r\n                    title: string,\r\n                    description: string,\r\n                    options: {\r\n                        preTrained: string,\r\n                        customFilePath: string,\r\n                        customWebUrl: string,\r\n                    },\r\n                },\r\n                autoDetect: {\r\n                    title: string,\r\n                    description: string,\r\n                },\r\n                predictTag: {\r\n                    title: string,\r\n                    description: string,\r\n                },\r\n                modelPath: {\r\n                    title: string,\r\n                    description: string,\r\n                },\r\n                modelUrl: {\r\n                    title: string,\r\n                    description: string,\r\n                },\r\n            },\r\n        }\r\n        messages: {\r\n            loadingModel: string;\r\n            errorLoadModel: string;\r\n            saveSuccess: string;\r\n        }\r\n    };\r\n    profile: {\r\n        settings: string;\r\n    };\r\n    errors: {\r\n        unknown: IErrorMetadata,\r\n        projectInvalidJson: IErrorMetadata,\r\n        projectInvalidSecurityToken: IErrorMetadata,\r\n        projectUploadError: IErrorMetadata,\r\n        projectDeleteError: IErrorMetadata,\r\n        genericRenderError: IErrorMetadata,\r\n        securityTokenNotFound: IErrorMetadata,\r\n        canvasError: IErrorMetadata,\r\n        importError: IErrorMetadata,\r\n        pasteRegionTooBigError: IErrorMetadata,\r\n        exportFormatNotFound: IErrorMetadata,\r\n        activeLearningPredictionError: IErrorMetadata,\r\n    };\r\n}\r\n\r\ninterface IErrorMetadata {\r\n    title: string;\r\n    message: string;\r\n}\r\n\r\ninterface IStrings extends LocalizedStringsMethods, IAppStrings { }\r\n\r\nexport const strings: IStrings = new LocalizedStrings({\r\n    // TODO: Need to comment out other languages which will not be used\r\n    en: english,\r\n    es: spanish,\r\n    ja: japanese,\r\n    tw: chinesetw,\r\n    ko: korean,\r\n    ch: chinese,\r\n});\r\n\r\n/**\r\n * Add localization values to JSON object. Substitutes value\r\n * of variable placeholders with value of currently set language\r\n * Example variable: ${strings.profile.settings}\r\n * @param json JSON object containing variable placeholders\r\n */\r\nexport function addLocValues(json: any) {\r\n    return interpolateJson(json, { strings });\r\n}\r\n\r\n/**\r\n * Stringifies the JSON and substitutes values from params\r\n * @param json JSON object\r\n * @param params Parameters for substitution\r\n */\r\nexport function interpolateJson(json: any, params: any) {\r\n    const template = JSON.stringify(json);\r\n    const outputJson = interpolate(template, params);\r\n    return JSON.parse(outputJson);\r\n}\r\n\r\n/**\r\n * Makes substitution of values in string\r\n * @param template String containing variables\r\n * @param params Params containing substitution values\r\n */\r\nexport function interpolate(template: string, params: any) {\r\n    const names = Object.keys(params);\r\n    const vals = Object[\"values\"](params);\r\n    return new Function(...names, `return \\`${template}\\`;`)(...vals);\r\n}\r\n","// extracted by mini-css-extract-plugin","import os from \"os\";\r\n\r\n/**\r\n * @name - Host Process\r\n * @description - Describes the host process\r\n * @member type - The type of the host process (electron, browser, etc)\r\n * @member release - The release string of the host process\r\n */\r\nexport interface IHostProcess {\r\n    type: HostProcessType;\r\n    release: string;\r\n}\r\n\r\n/**\r\n * @enum ELECTRON - Electron Host Process Type\r\n * @enum BROWSER - Browser Host Process Type\r\n */\r\nexport enum HostProcessType {\r\n    Electron = 1, // bits: 01\r\n    Browser = 2,  // bits: 10\r\n    All = 3,      // bits: 11\r\n}\r\n\r\nexport enum PlatformType {\r\n    Web = \"web\",\r\n    Windows = \"win32\",\r\n    Linux = \"linux\",\r\n    MacOS = \"darwin\",\r\n}\r\n\r\nfunction getHostProcess(): IHostProcess {\r\n    const osRelease = os.release().toLowerCase();\r\n    let hostProcessType: HostProcessType;\r\n    if (osRelease.indexOf(\"electron\") > -1 || process.env.HOST_TYPE === \"electron\") {\r\n        hostProcessType = HostProcessType.Electron;\r\n    } else {\r\n        hostProcessType = HostProcessType.Browser;\r\n    }\r\n\r\n    return {\r\n        release: osRelease,\r\n        type: hostProcessType,\r\n    };\r\n}\r\n\r\nexport function isElectron(): boolean {\r\n    return getHostProcess().type === HostProcessType.Electron;\r\n}\r\n\r\nexport function isBrowser(): boolean {\r\n    return getHostProcess().type === HostProcessType.Browser;\r\n}\r\n\r\nexport default getHostProcess;\r\n","import axios, { AxiosRequestConfig } from \"axios\";\r\nimport { IAsset, AssetType, IFileInfo } from \"../models/applicationState\";\r\nimport Guard from \"./guard\";\r\nimport { TFRecordsReader } from \"../providers/export/tensorFlowRecords/tensorFlowReader\";\r\nimport { FeatureType } from \"../providers/export/tensorFlowRecords/tensorFlowBuilder\";\r\n\r\n/**\r\n * Helper class for reading HTML files\r\n */\r\nexport default class HtmlFileReader {\r\n\r\n    public static videoAssetFiles = {};\r\n\r\n    /**\r\n     * Reads the file and returns the string value contained\r\n     * @param file HTML file to read\r\n     */\r\n    public static readAsText(file: File): Promise<IFileInfo> {\r\n        Guard.null(file);\r\n        let fileInfo: IFileInfo;\r\n\r\n        return new Promise<IFileInfo>((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.onerror = reject;\r\n            reader.onload = () => {\r\n                if (reader.result) {\r\n                    fileInfo = {\r\n                        content: reader.result,\r\n                        file,\r\n                    };\r\n                    resolve(fileInfo);\r\n                } else {\r\n                    reject();\r\n                }\r\n            };\r\n\r\n            try {\r\n                reader.readAsText(file);\r\n            } catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reads attributes from asset depending on type (video or image)\r\n     * @param asset Asset to read from\r\n     */\r\n    public static async readAssetAttributes(asset: IAsset)\r\n        : Promise<{ width: number, height: number, duration?: number }> {\r\n        Guard.null(asset);\r\n\r\n        switch (asset.type) {\r\n            case AssetType.Image:\r\n                return await this.readImageAttributes(asset.path);\r\n            case AssetType.Video:\r\n                return await this.readVideoAttributes(asset.path);\r\n            case AssetType.TFRecord:\r\n                return await this.readTFRecordAttributes(asset);\r\n            default:\r\n                throw new Error(\"Asset not supported\");\r\n        }\r\n    }\r\n\r\n    public static async readAssetAttributesWithBuffer(base64: string)\r\n        : Promise<{ width: number, height: number, duration?: number }> {\r\n        Guard.null(base64);\r\n\r\n        return await this.readImageAttributes(\"data:image;base64,\" + base64);\r\n    }\r\n\r\n    /**\r\n     * Downloads the binary blob from the asset path\r\n     * @param asset The asset to download\r\n     */\r\n    public static async getAssetBlob(asset: IAsset): Promise<Blob> {\r\n        Guard.null(asset);\r\n\r\n        const config: AxiosRequestConfig = {\r\n            responseType: \"blob\",\r\n        };\r\n\r\n        let data = null;\r\n        if (asset.type === AssetType.VideoFrame) {\r\n            data = await this.getAssetFrameImage(asset);\r\n        } else {\r\n            // Download the asset binary from the storage provider\r\n            const response = await axios.get<Blob>(asset.path, config);\r\n            if (response.status !== 200) {\r\n                throw new Error(\"Error downloading asset binary\");\r\n            }\r\n            data = await response.data;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Downloads the binary array from the asset path\r\n     * @param asset The asset to download\r\n     */\r\n    public static async getAssetArray(asset: IAsset): Promise<ArrayBuffer> {\r\n        const blob = await this.getAssetBlob(asset);\r\n        return await new Response(blob).arrayBuffer();\r\n    }\r\n\r\n    /**\r\n     * Extracts the specified image frame from a video asset\r\n     * @param asset The asset video frame to retrieve from the parent video\r\n     */\r\n    public static async getAssetFrameImage(asset: IAsset): Promise<Blob> {\r\n        return new Promise<Blob>((resolve, reject) => {\r\n            const cachingEnabled = false;\r\n            let refresh = !cachingEnabled;\r\n            let video: HTMLVideoElement = this.videoAssetFiles[asset.parent.name];\r\n\r\n            // Ensure the asset name includes jpg file extension\r\n            if (!asset.name.toLowerCase().endsWith(\".jpg\")) {\r\n                asset.name += \".jpg\";\r\n            }\r\n\r\n            if (!video) {\r\n                video = document.createElement(\"video\");\r\n                if (cachingEnabled) {\r\n                    this.videoAssetFiles[asset.parent.name] = video;\r\n                    refresh = true;\r\n                }\r\n            }\r\n\r\n            video.onloadedmetadata = () => {\r\n                video.currentTime = asset.timestamp;\r\n            };\r\n            video.onseeked = () => {\r\n                const canvas = document.createElement(\"canvas\");\r\n                canvas.height = video.videoHeight;\r\n                canvas.width = video.videoWidth;\r\n                const ctx = canvas.getContext(\"2d\");\r\n                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n                canvas.toBlob(resolve, \"image/jpeg\", 1.0);\r\n            };\r\n            video.onerror = reject;\r\n            if (refresh) {\r\n                video.src = asset.parent.path;\r\n            } else {\r\n                video.currentTime = asset.timestamp;\r\n            }\r\n        });\r\n    }\r\n\r\n    private static readVideoAttributes(url: string): Promise<{ width: number, height: number, duration: number }> {\r\n        return new Promise((resolve, reject) => {\r\n            const video = document.createElement(\"video\") as HTMLVideoElement;\r\n            video.onloadedmetadata = () => {\r\n                resolve({\r\n                    width: video.videoWidth,\r\n                    height: video.videoHeight,\r\n                    duration: video.duration,\r\n                });\r\n            };\r\n            video.onerror = reject;\r\n            video.src = url;\r\n        });\r\n    }\r\n\r\n    private static readImageAttributes(url: string): Promise<{ width: number, height: number }> {\r\n        return new Promise((resolve, reject) => {\r\n            const image = document.createElement(\"img\") as HTMLImageElement;\r\n            image.onload = () => {\r\n                resolve({\r\n                    width: image.naturalWidth,\r\n                    height: image.naturalHeight,\r\n                });\r\n            };\r\n            image.onerror = reject;\r\n            image.src = url;\r\n        });\r\n    }\r\n\r\n    private static async readTFRecordAttributes(asset: IAsset): Promise<{ width: number, height: number }> {\r\n        // Get from TFRecord Reader\r\n        const tfrecords = new Buffer(await this.getAssetArray(asset));\r\n        const reader = new TFRecordsReader(tfrecords);\r\n        const width = reader.getFeature(0, \"image/width\", FeatureType.Int64) as number;\r\n        const height = reader.getFeature(0, \"image/height\", FeatureType.Int64) as number;\r\n\r\n        return { width, height };\r\n    }\r\n}\r\n","import { IStorageProvider } from \"./storageProviderFactory\";\r\nimport { IAsset, AssetType, StorageType } from \"../../models/applicationState\";\r\nimport { AssetService } from \"../../services/assetService\";\r\nimport {\r\n    TokenCredential, AnonymousCredential, ContainerURL,\r\n    StorageURL, ServiceURL, Credential, Aborter, BlockBlobURL,\r\n} from \"@azure/storage-blob\";\r\nimport { BlobDeleteResponse } from \"@azure/storage-blob/typings/lib/generated/lib/models\";\r\n\r\n/**\r\n * Options for Azure Cloud Storage\r\n * @member accountName - Name of Storage Account\r\n * @member containerName - Name of targeted container\r\n * @member createContainer - Option for creating container in `initialize()`\r\n * @member sas - Shared Access Signature (SAS) token for accessing Azure Blob Storage\r\n * @member oauthToken - Not yet implemented. Optional token for accessing Azure Blob Storage\r\n */\r\nexport interface IAzureCloudStorageOptions {\r\n    accountName: string;\r\n    containerName: string;\r\n    createContainer: boolean;\r\n    sas?: string;\r\n    oauthToken?: string;\r\n}\r\n\r\n/**\r\n * Storage Provider for Azure Blob Storage\r\n */\r\nexport class AzureBlobStorage implements IStorageProvider {\r\n\r\n    /**\r\n     * Storage type\r\n     * @returns - StorageType.Cloud\r\n     */\r\n    public storageType: StorageType = StorageType.Cloud;\r\n\r\n    constructor(private options?: IAzureCloudStorageOptions) { }\r\n\r\n    /**\r\n     * Initialize connection to Blob Storage account & container\r\n     * If `createContainer` was specified in options, this function\r\n     * creates the container. Otherwise, validates that container\r\n     * is contained in list of containers\r\n     * @throws - Error if container does not exist or not able to\r\n     * connect to Azure Blob Storage\r\n     */\r\n    public async initialize(): Promise<void> {\r\n        const containerName = this.options.containerName;\r\n        if (this.options.createContainer) {\r\n            await this.createContainer(containerName);\r\n        } else {\r\n            const containers = await this.listContainers(null);\r\n            if (containers.indexOf(containerName) === -1) {\r\n                throw new Error(`Container \"${containerName}\" does not exist`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reads text from specified blob\r\n     * @param blobName - Name of blob in container\r\n     */\r\n    public async readText(blobName: string): Promise<string> {\r\n        const blockBlobURL = this.getBlockBlobURL(blobName);\r\n        const downloadResponse = await blockBlobURL.download(Aborter.none, 0);\r\n\r\n        return await this.bodyToString(downloadResponse);\r\n    }\r\n\r\n    /**\r\n     * Reads Buffer from specified blob\r\n     * @param blobName - Name of blob in container\r\n     */\r\n    public async readBinary(blobName: string) {\r\n        const text = await this.readText(blobName);\r\n        return Buffer.from(text);\r\n    }\r\n\r\n    /**\r\n     * Writes text to blob in container\r\n     * @param blobName - Name of blob in container\r\n     * @param content - Content to write to blob (string or Buffer)\r\n     */\r\n    public async writeText(blobName: string, content: string | Buffer) {\r\n        const blockBlobURL = this.getBlockBlobURL(blobName);\r\n        await blockBlobURL.upload(\r\n            Aborter.none,\r\n            content,\r\n            content.length,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Writes buffer to blob in container\r\n     * @param blobName - Name of blob in container\r\n     * @param content - Buffer to write to blob\r\n     */\r\n    public writeBinary(blobName: string, content: Buffer) {\r\n        return this.writeText(blobName, content);\r\n    }\r\n\r\n    /**\r\n     * Deletes file from container\r\n     * @param blobName - Name of blob in container\r\n     */\r\n    public async deleteFile(blobName: string): Promise<void> {\r\n        await this.getBlockBlobURL(blobName).delete(Aborter.none);\r\n    }\r\n\r\n    /**\r\n     * Lists files in container\r\n     * @param path - NOT USED IN CURRENT IMPLEMENTATION. Only uses container\r\n     * as specified in Azure Cloud Storage Options. Included to satisfy\r\n     * Storage Provider interface\r\n     * @param ext - Extension of files to filter on when retrieving files\r\n     * from container\r\n     */\r\n    public async listFiles(path: string, ext?: string): Promise<string[]> {\r\n        const result: string[] = [];\r\n        let marker;\r\n        const containerURL = this.getContainerURL();\r\n        do {\r\n            const listBlobsResponse = await containerURL.listBlobFlatSegment(\r\n                Aborter.none,\r\n                marker,\r\n            );\r\n            marker = listBlobsResponse.nextMarker;\r\n            for (const blob of listBlobsResponse.segment.blobItems) {\r\n                if ((ext && blob.name.endsWith(ext)) || !ext) {\r\n                    result.push(blob.name);\r\n                }\r\n            }\r\n        } while (marker);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Lists the containers with in the Azure Blob Storage account\r\n     * @param path - NOT USED IN CURRENT IMPLEMENTATION. Lists containers in storage account.\r\n     * Path does not really make sense in this scenario. Included to satisfy interface\r\n     */\r\n    public async listContainers(path: string) {\r\n        const result: string[] = [];\r\n        let marker;\r\n        do {\r\n            const listContainersResponse = await this.getServiceURL().listContainersSegment(\r\n                Aborter.none,\r\n                marker,\r\n            );\r\n            marker = listContainersResponse.nextMarker;\r\n            for (const container of listContainersResponse.containerItems) {\r\n                result.push(container.name);\r\n            }\r\n        } while (marker);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates container specified in Azure Cloud Storage options\r\n     * @param containerName - NOT USED IN CURRENT IMPLEMENTATION. Because `containerName`\r\n     * is a required attribute of the Azure Cloud Storage options used to instantiate the\r\n     * provider, this function creates that container. Included to satisfy interface\r\n     */\r\n    public async createContainer(containerName: string): Promise<void> {\r\n        const containerURL = this.getContainerURL();\r\n        try {\r\n            await containerURL.create(Aborter.none);\r\n        } catch (e) {\r\n            if (e.statusCode === 409) {\r\n                return;\r\n            }\r\n\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes container specified in Azure Cloud Storage options\r\n     * @param containerName - NOT USED IN CURRENT IMPLEMENTATION. Because `containerName`\r\n     * is a required attribute of the Azure Cloud Storage options used to instantiate the\r\n     * provider, this function creates that container. Included to satisfy interface\r\n     */\r\n    public async deleteContainer(containerName: string): Promise<void> {\r\n        await this.getContainerURL().delete(Aborter.none);\r\n    }\r\n\r\n    /**\r\n     * Retrieves assets from Azure Blob Storage container\r\n     * @param containerName - Container from which to retrieve assets. Defaults to\r\n     * container specified in Azure Cloud Storage options\r\n     */\r\n    public async getAssets(): Promise<IAsset[]> {\r\n        const { containerName } = this.options;\r\n        const files = await this.listFiles(containerName);\r\n        const result: IAsset[] = [];\r\n        for (const file of files) {\r\n            const url = this.getUrl(file);\r\n            const asset = AssetService.createAssetFromFilePath(url, this.getFileName(url));\r\n            if (asset.type !== AssetType.Unknown) {\r\n                result.push(asset);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param url - URL for Azure Blob\r\n     */\r\n    public getFileName(url: string) {\r\n        const pathParts = url.split(\"/\");\r\n        return pathParts[pathParts.length - 1].split(\"?\")[0];\r\n    }\r\n\r\n    /**\r\n     * @returns - URL for Azure Blob Storage account with SAS token appended if specified\r\n     */\r\n    public getAccountUrl(): string {\r\n        return `https://${this.options.accountName}.blob.core.windows.net` + (this.options.sas || \"\");\r\n    }\r\n\r\n    /**\r\n     * Gets a Credential object. OAuthToken if specified in options, anonymous\r\n     * credential otherwise (uses the SAS token)\r\n     * @returns - Credential object from Azure Storage SDK\r\n     */\r\n    private getCredential(): Credential {\r\n        if (this.options.oauthToken) {\r\n            return new TokenCredential(this.options.oauthToken);\r\n        } else {\r\n            return new AnonymousCredential();\r\n        }\r\n    }\r\n\r\n    private getServiceURL(): ServiceURL {\r\n        const credential = this.getCredential();\r\n        const pipeline = StorageURL.newPipeline(credential);\r\n        const accountUrl = this.getAccountUrl();\r\n        const serviceUrl = new ServiceURL(\r\n            accountUrl,\r\n            pipeline,\r\n        );\r\n        return serviceUrl;\r\n    }\r\n\r\n    private getContainerURL(serviceURL?: ServiceURL, containerName?: string): ContainerURL {\r\n        return ContainerURL.fromServiceURL(\r\n            (serviceURL) ? serviceURL : this.getServiceURL(),\r\n            (containerName) ? containerName : this.options.containerName,\r\n        );\r\n    }\r\n\r\n    private getBlockBlobURL(blobName: string): BlockBlobURL {\r\n        const containerURL = this.getContainerURL();\r\n        return BlockBlobURL.fromContainerURL(\r\n            containerURL,\r\n            blobName,\r\n        );\r\n    }\r\n\r\n    private getUrl(blobName: string): string {\r\n        return this.getBlockBlobURL(blobName).url;\r\n    }\r\n\r\n    private async bodyToString(\r\n        response: {\r\n            readableStreamBody?: NodeJS.ReadableStream;\r\n            blobBody?: Promise<Blob>;\r\n        },\r\n        // tslint:disable-next-line:variable-name\r\n        _length?: number,\r\n    ): Promise<string> {\r\n        const blob = await response.blobBody!;\r\n        return this.blobToString(blob);\r\n    }\r\n\r\n    private async blobToString(blob: Blob): Promise<string> {\r\n        const fileReader = new FileReader();\r\n\r\n        return new Promise<string>((resolve, reject) => {\r\n            fileReader.onloadend = (ev: any) => {\r\n                resolve(ev.target!.result);\r\n            };\r\n            fileReader.onerror = reject;\r\n            fileReader.readAsText(blob);\r\n        });\r\n    }\r\n}\r\n","import { Dispatch, Action } from \"redux\";\r\nimport { IAppError } from \"../../models/applicationState\";\r\nimport { createPayloadAction, IPayloadAction, createAction } from \"./actionCreators\";\r\nimport { ActionTypes } from \"./actionTypes\";\r\n\r\n/**\r\n * Action to display alert when there's an error in the app\r\n * @member showError\r\n * @member clearError\r\n * @interface\r\n */\r\nexport default interface IAppErrorActions {\r\n    showError(appError: IAppError): void;\r\n    clearError(): void;\r\n}\r\n\r\n/**\r\n * show alert popup to indicate error\r\n * @param appError {IAppError} the error to display in alert\r\n * @returns {(dispatch: Dispatch) => void}\r\n */\r\nexport function showError(appError: IAppError): (dispatch: Dispatch) => void {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(showErrorAction(appError));\r\n    };\r\n}\r\n\r\n/**\r\n * clear alert popup\r\n * @returns {(dispatch: Dispatch) => void}\r\n */\r\nexport function clearError(): (dispatch: Dispatch) => void {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(clearErrorAction());\r\n    };\r\n}\r\n\r\n/**\r\n * Show error action type\r\n */\r\nexport interface IShowAppErrorAction extends IPayloadAction<string, IAppError> {\r\n    type: ActionTypes.SHOW_ERROR;\r\n}\r\n\r\n/**\r\n * Clear error action type\r\n */\r\nexport interface IClearErrorAction extends Action<string> {\r\n    type: ActionTypes.CLEAR_ERROR;\r\n}\r\n\r\n/**\r\n * Instance of show error action\r\n */\r\nexport const showErrorAction = createPayloadAction<IShowAppErrorAction>(ActionTypes.SHOW_ERROR);\r\n\r\n/**\r\n * Instance of clear error action\r\n * @type {() => Action<IClearErrorAction[\"type\"]>}\r\n */\r\nexport const clearErrorAction = createAction<IClearErrorAction>(ActionTypes.CLEAR_ERROR);\r\n","import React from \"react\";\r\nimport { IAssetProps } from \"./assetPreview\";\r\nimport { IAsset } from \"../../../../models/applicationState\";\r\nimport HtmlFileReader from \"../../../../common/htmlFileReader\";\r\nimport { TFRecordsReader } from \"../../../../providers/export/tensorFlowRecords/tensorFlowReader\";\r\nimport { FeatureType } from \"../../../../providers/export/tensorFlowRecords/tensorFlowBuilder\";\r\n\r\n/**\r\n * State for TFRecord Asset Image component\r\n * @member tfRecordImage64 - base64 representation of the image data\r\n * @member hasError - Whether or not there was an error loading the image data from the tf record\r\n */\r\nexport interface ITFRecordState {\r\n    tfRecordImage64: string;\r\n    hasError: boolean;\r\n}\r\n\r\n/**\r\n * React component that displays an image from a TFRecord asset file\r\n */\r\nexport class TFRecordAsset extends React.Component<IAssetProps, ITFRecordState> {\r\n    public state: ITFRecordState = {\r\n        tfRecordImage64: \"\",\r\n        hasError: false,\r\n    };\r\n\r\n    private image: React.RefObject<HTMLImageElement> = React.createRef();\r\n\r\n    public render() {\r\n        return (\r\n            <img ref={this.image}\r\n                src={this.state.tfRecordImage64}\r\n                onLoad={this.onLoad}\r\n                onError={this.onError}\r\n                crossOrigin=\"anonymous\" />\r\n        );\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        await this.updateImage();\r\n    }\r\n\r\n    public async componentDidUpdate(prevProps: Readonly<IAssetProps>) {\r\n        if (this.props.asset !== prevProps.asset) {\r\n            await this.updateImage();\r\n        }\r\n    }\r\n\r\n    private updateImage = async (): Promise<void> => {\r\n        try {\r\n            const base64ImageData = await this.getTFRecordBase64Image(this.props.asset);\r\n            this.setState({\r\n                tfRecordImage64: base64ImageData,\r\n                hasError: !(!!base64ImageData),\r\n            });\r\n        } catch (e) {\r\n            this.setState({\r\n                hasError: true,\r\n            });\r\n\r\n            this.onError(e);\r\n        }\r\n    }\r\n\r\n    private onLoad = () => {\r\n        if (this.props.onLoaded) {\r\n            this.props.onLoaded(this.image.current);\r\n        }\r\n        if (this.props.onActivated) {\r\n            this.props.onActivated(this.image.current);\r\n        }\r\n        if (this.props.onDeactivated) {\r\n            this.props.onDeactivated(this.image.current);\r\n        }\r\n    }\r\n\r\n    private onError = (e: React.SyntheticEvent<Element>) => {\r\n        if (this.props.onError && (this.state.tfRecordImage64 || this.state.hasError)) {\r\n            this.props.onError(e);\r\n        }\r\n    }\r\n\r\n    private async getTFRecordBase64Image(asset: IAsset): Promise<string> {\r\n        const tfrecords = new Buffer(await HtmlFileReader.getAssetArray(asset));\r\n        const reader = new TFRecordsReader(tfrecords);\r\n        const buffer = reader.getFeature(0, \"image/encoded\", FeatureType.Binary) as Uint8Array;\r\n\r\n        // Get Base64\r\n        const image64 = btoa(buffer.reduce((data, byte) => data + String.fromCharCode(byte), \"\"));\r\n        return \"data:image;base64,\" + image64;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { IAppError, ErrorCode, AppError } from \"../../../../models/applicationState\";\r\nimport { strings } from \"../../../../common/strings\";\r\nimport Alert from \"../alert/alert\";\r\nimport { Env } from \"../../../../common/environment\";\r\nimport { trackError } from \"../../../../telemetry\";\r\n\r\n/**\r\n * Component properties for ErrorHandler component\r\n */\r\nexport interface IErrorHandlerProps extends React.Props<ErrorHandler> {\r\n    error: IAppError;\r\n    onError: (error: IAppError) => void;\r\n    onClearError: () => void;\r\n}\r\n\r\n/**\r\n * Component for catching and handling global application errors\r\n */\r\nexport class ErrorHandler extends React.Component<IErrorHandlerProps> {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.onWindowError = this.onWindowError.bind(this);\r\n        this.onUnhandedRejection = this.onUnhandedRejection.bind(this);\r\n    }\r\n\r\n    public componentDidMount() {\r\n        window.addEventListener(\"error\", this.onWindowError, true);\r\n        window.addEventListener(\"unhandledrejection\", this.onUnhandedRejection, true);\r\n    }\r\n\r\n    public componentWillMount() {\r\n        window.removeEventListener(\"error\", this.onWindowError);\r\n        window.removeEventListener(\"unhandledrejection\", this.onUnhandedRejection);\r\n    }\r\n\r\n    public render() {\r\n        const showError = !!this.props.error;\r\n        let localizedError: IAppError = null;\r\n        if (showError) {\r\n            localizedError = this.getLocalizedError(this.props.error);\r\n        }\r\n\r\n        if (!showError) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <Alert title={localizedError ? localizedError.title : \"\"}\r\n                message={localizedError ? localizedError.message : \"\"}\r\n                closeButtonColor=\"secondary\"\r\n                show={showError}\r\n                onClose={this.props.onClearError} />\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Unhandled errors that bubbled up to top of stack\r\n     * @param evt Error Event\r\n     */\r\n    private onWindowError(evt: ErrorEvent) {\r\n        this.handleError(evt.error);\r\n        evt.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Handles async / promise based errors\r\n     * @param evt Unhandled Rejection Event\r\n     */\r\n    private onUnhandedRejection(evt: any) {\r\n        this.handleError(evt.reason || evt.detail);\r\n        evt.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Handles various error format scenarios\r\n     * @param error The error to handle\r\n     */\r\n    private handleError(error: string | Error | AppError) {\r\n        if (!error) {\r\n            return;\r\n        }\r\n\r\n        // This is a special case where we don't need to throw an\r\n        // exception. The error is thrown from within a few layers\r\n        // of components, so we don't have access to ReactDnD (drag and drop)\r\n        // directly. The action is performed correctly, so we\r\n        // don't need to display the error here\r\n        if (this.isReactDnDError(error)) {\r\n            return;\r\n        }\r\n        let appError: IAppError = null;\r\n        // Promise rejection with reason\r\n        if (typeof (error) === \"string\") {\r\n            // Promise rejection with string base reason\r\n            appError = {\r\n                errorCode: ErrorCode.Unknown,\r\n                message: error || this.getUnknownErrorMessage(error),\r\n            };\r\n        } else if (error instanceof AppError) {\r\n            // Promise rejection with AppError\r\n            const reason = error as IAppError;\r\n            appError = {\r\n                title: reason.title || strings.errors.unknown.title,\r\n                errorCode: reason.errorCode,\r\n                message: reason.message || this.getUnknownErrorMessage(error),\r\n            };\r\n        } else if (error instanceof Error) {\r\n            // Promise rejection with other error like object\r\n            const reason = error as Error;\r\n            appError = {\r\n                title: reason.name || strings.errors.unknown.title,\r\n                errorCode: ErrorCode.Unknown,\r\n                message: reason.message || this.getUnknownErrorMessage(error),\r\n            };\r\n        } else {\r\n            appError = {\r\n                title: strings.errors.unknown.title,\r\n                errorCode: ErrorCode.Unknown,\r\n                message: this.getUnknownErrorMessage(error),\r\n            };\r\n        }\r\n\r\n        // appInsights: track error event\r\n        trackError(appError);\r\n\r\n        this.props.onError(appError);\r\n    }\r\n\r\n    private getUnknownErrorMessage(e) {\r\n        if (Env.get() !== \"production\") {\r\n            return (<pre>{JSON.stringify(e, null, 2)}</pre>);\r\n        } else {\r\n            return strings.errors.unknown.message;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a localized version of the error\r\n     * @param appError The error thrown by the application\r\n     */\r\n    private getLocalizedError(appError: IAppError): IAppError {\r\n        if (appError.errorCode === ErrorCode.Unknown) {\r\n            return appError;\r\n        }\r\n        const localizedError = strings.errors[appError.errorCode];\r\n        if (!localizedError) {\r\n            return appError;\r\n        }\r\n        return {\r\n            errorCode: appError.errorCode,\r\n            message: localizedError.message,\r\n            title: localizedError.title,\r\n        };\r\n    }\r\n\r\n    private isReactDnDError(e) {\r\n        return e && e.name === \"Invariant Violation\" && e.message === \"Expected to find a valid target.\";\r\n    }\r\n}\r\n","import MD5 from \"md5.js\";\r\nimport _ from \"lodash\";\r\nimport * as shortid from \"shortid\";\r\nimport Guard from \"../common/guard\";\r\nimport {\r\n    IAsset, AssetType, IProject, IAssetMetadata, AssetState,\r\n    IRegion, RegionType, ITFRecordMetadata,\r\n} from \"../models/applicationState\";\r\nimport { AssetProviderFactory, IAssetProvider } from \"../providers/storage/assetProviderFactory\";\r\nimport { StorageProviderFactory, IStorageProvider } from \"../providers/storage/storageProviderFactory\";\r\nimport { constants } from \"../common/constants\";\r\nimport HtmlFileReader from \"../common/htmlFileReader\";\r\nimport { TFRecordsReader } from \"../providers/export/tensorFlowRecords/tensorFlowReader\";\r\nimport { FeatureType } from \"../providers/export/tensorFlowRecords/tensorFlowBuilder\";\r\nimport { appInfo } from \"../common/appInfo\";\r\nimport { encodeFileURI } from \"../common/utils\";\r\n\r\n/**\r\n * @name - Asset Service\r\n * @description - Functions for dealing with project assets\r\n */\r\nexport class AssetService {\r\n\r\n    /**\r\n     * Create IAsset from filePath\r\n     * @param assetFilePath - filepath of asset\r\n     * @param assetFileName - name of asset\r\n     */\r\n    public static createAssetFromFilePath(\r\n            assetFilePath: string,\r\n            assetFileName?: string,\r\n            assetIdentifier?: string): IAsset {\r\n        Guard.empty(assetFilePath);\r\n        const normalizedPath = assetFilePath.toLowerCase();\r\n\r\n        // If the path is not already prefixed with a protocol\r\n        // then assume it comes from the local file system\r\n        if (!normalizedPath.startsWith(\"http://\") &&\r\n            !normalizedPath.startsWith(\"https://\") &&\r\n            !normalizedPath.startsWith(\"file:\")) {\r\n            // First replace \\ character with / the do the standard url encoding then encode unsupported characters\r\n            assetFilePath = encodeFileURI(assetFilePath, true);\r\n        }\r\n        assetIdentifier = assetIdentifier || assetFilePath;\r\n\r\n        const md5Hash = new MD5().update(assetIdentifier).digest(\"hex\");\r\n        const pathParts = assetFilePath.split(/[\\\\\\/]/);\r\n        // Example filename: video.mp4#t=5\r\n        // fileNameParts[0] = \"video\"\r\n        // fileNameParts[1] = \"mp4\"\r\n        // fileNameParts[2] = \"t=5\"\r\n        assetFileName = assetFileName || pathParts[pathParts.length - 1];\r\n        const fileNameParts = assetFileName.split(\".\");\r\n        const extensionParts = fileNameParts[fileNameParts.length - 1].split(/[\\?#]/);\r\n        const assetFormat = extensionParts[0];\r\n\r\n        const assetType = this.getAssetType(assetFormat);\r\n\r\n        return {\r\n            id: md5Hash,\r\n            format: assetFormat,\r\n            state: AssetState.NotVisited,\r\n            type: assetType,\r\n            name: assetFileName,\r\n            path: assetFilePath,\r\n            size: null,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get Asset Type from format (file extension)\r\n     * @param format - File extension of asset\r\n     */\r\n    public static getAssetType(format: string): AssetType {\r\n        switch (format.toLowerCase()) {\r\n            case \"gif\":\r\n            case \"jpg\":\r\n            case \"jpeg\":\r\n            case \"tif\":\r\n            case \"tiff\":\r\n            case \"png\":\r\n            case \"bmp\":\r\n                return AssetType.Image;\r\n            case \"mp4\":\r\n            case \"mov\":\r\n            case \"avi\":\r\n            case \"m4v\":\r\n            case \"mpg\":\r\n            case \"wmv\":\r\n                return AssetType.Video;\r\n            case \"tfrecord\":\r\n                return AssetType.TFRecord;\r\n            default:\r\n                return AssetType.Unknown;\r\n        }\r\n    }\r\n\r\n    private assetProviderInstance: IAssetProvider;\r\n    private storageProviderInstance: IStorageProvider;\r\n\r\n    constructor(private project: IProject) {\r\n        Guard.null(project);\r\n    }\r\n\r\n    /**\r\n     * Get Asset Provider from project's source connction\r\n     */\r\n    protected get assetProvider(): IAssetProvider {\r\n        if (!this.assetProviderInstance) {\r\n            this.assetProviderInstance = AssetProviderFactory.create(\r\n                this.project.sourceConnection.providerType,\r\n                this.project.sourceConnection.providerOptions,\r\n            );\r\n\r\n            return this.assetProviderInstance;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get Storage Provider from project's target connection\r\n     */\r\n    protected get storageProvider(): IStorageProvider {\r\n        if (!this.storageProviderInstance) {\r\n            this.storageProviderInstance = StorageProviderFactory.create(\r\n                this.project.targetConnection.providerType,\r\n                this.project.targetConnection.providerOptions,\r\n            );\r\n        }\r\n\r\n        return this.storageProviderInstance;\r\n    }\r\n\r\n    /**\r\n     * Get assets from provider\r\n     */\r\n    public async getAssets(): Promise<IAsset[]> {\r\n        return await this.assetProvider.getAssets();\r\n    }\r\n\r\n    /**\r\n     * Get a list of child assets associated with the current asset\r\n     * @param rootAsset The parent asset to search\r\n     */\r\n    public getChildAssets(rootAsset: IAsset): IAsset[] {\r\n        Guard.null(rootAsset);\r\n\r\n        if (rootAsset.type !== AssetType.Video) {\r\n            return [];\r\n        }\r\n\r\n        return _\r\n            .values(this.project.assets)\r\n            .filter((asset) => asset.parent && asset.parent.id === rootAsset.id)\r\n            .sort((a, b) => a.timestamp - b.timestamp);\r\n    }\r\n\r\n    /**\r\n     * Save metadata for asset\r\n     * @param metadata - Metadata for asset\r\n     */\r\n    public async save(metadata: IAssetMetadata): Promise<IAssetMetadata> {\r\n        Guard.null(metadata);\r\n\r\n        const fileName = `${metadata.asset.id}${constants.assetMetadataFileExtension}`;\r\n\r\n        // Only save asset metadata if asset is in a tagged state\r\n        // Otherwise primary asset information is already persisted in the project file.\r\n        if (metadata.asset.state === AssetState.Tagged) {\r\n            await this.storageProvider.writeText(fileName, JSON.stringify(metadata, null, 4));\r\n        } else {\r\n            // If the asset is no longer tagged, then it doesn't contain any regions\r\n            // and the file is not required.\r\n            try {\r\n                await this.storageProvider.deleteFile(fileName);\r\n            } catch (err) {\r\n                // The file may not exist - that's OK\r\n            }\r\n        }\r\n        return metadata;\r\n    }\r\n\r\n    /**\r\n     * Get metadata for asset\r\n     * @param asset - Asset for which to retrieve metadata\r\n     */\r\n    public async getAssetMetadata(asset: IAsset): Promise<IAssetMetadata> {\r\n        Guard.null(asset);\r\n\r\n        const fileName = `${asset.id}${constants.assetMetadataFileExtension}`;\r\n        try {\r\n            const json = await this.storageProvider.readText(fileName);\r\n            return JSON.parse(json) as IAssetMetadata;\r\n        } catch (err) {\r\n            if (asset.type === AssetType.TFRecord) {\r\n                return {\r\n                    asset: { ...asset },\r\n                    regions: await this.getRegionsFromTFRecord(asset),\r\n                    version: appInfo.version,\r\n                };\r\n            } else {\r\n                return {\r\n                    asset: { ...asset },\r\n                    regions: [],\r\n                    version: appInfo.version,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a tag from asset metadata files\r\n     * @param tagName Name of tag to delete\r\n     */\r\n    public async deleteTag(tagName: string): Promise<IAssetMetadata[]> {\r\n        const transformer = (tags) => tags.filter((t) => t !== tagName);\r\n        return await this.getUpdatedAssets(tagName, transformer);\r\n    }\r\n\r\n    /**\r\n     * Rename a tag within asset metadata files\r\n     * @param tagName Name of tag to rename\r\n     */\r\n    public async renameTag(tagName: string, newTagName: string): Promise<IAssetMetadata[]> {\r\n        const transformer = (tags) => tags.map((t) => (t === tagName) ? newTagName : t);\r\n        return await this.getUpdatedAssets(tagName, transformer);\r\n    }\r\n\r\n    /**\r\n     * Update tags within asset metadata files\r\n     * @param tagName Name of tag to update within project\r\n     * @param transformer Function that accepts array of tags from a region and returns a modified array of tags\r\n     */\r\n    private async getUpdatedAssets(tagName: string, transformer: (tags: string[]) => string[])\r\n        : Promise<IAssetMetadata[]> {\r\n        // Loop over assets and update if necessary\r\n        const updates = await _.values(this.project.assets).mapAsync(async (asset) => {\r\n            const assetMetadata = await this.getAssetMetadata(asset);\r\n            const isUpdated = this.updateTagInAssetMetadata(assetMetadata, tagName, transformer);\r\n\r\n            return isUpdated ? assetMetadata : null;\r\n        });\r\n\r\n        return updates.filter((assetMetadata) => !!assetMetadata);\r\n    }\r\n\r\n    /**\r\n     * Update tag within asset metadata object\r\n     * @param assetMetadata Asset metadata to update\r\n     * @param tagName Name of tag being updated\r\n     * @param transformer Function that accepts array of tags from a region and returns a modified array of tags\r\n     * @returns Modified asset metadata object or null if object does not need to be modified\r\n     */\r\n    private updateTagInAssetMetadata(\r\n        assetMetadata: IAssetMetadata,\r\n        tagName: string,\r\n        transformer: (tags: string[]) => string[]): boolean {\r\n        let foundTag = false;\r\n\r\n        for (const region of assetMetadata.regions) {\r\n            if (region.tags.find((t) => t === tagName)) {\r\n                foundTag = true;\r\n                region.tags = transformer(region.tags);\r\n            }\r\n        }\r\n        if (foundTag) {\r\n            assetMetadata.regions = assetMetadata.regions.filter((region) => region.tags.length > 0);\r\n            assetMetadata.asset.state = (assetMetadata.regions.length) ? AssetState.Tagged : AssetState.Visited;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private async getRegionsFromTFRecord(asset: IAsset): Promise<IRegion[]> {\r\n        const objectArray = await this.getTFRecordMetadata(asset);\r\n        const regions: IRegion[] = [];\r\n\r\n        // Add Regions from TFRecord in Regions\r\n        for (let index = 0; index < objectArray.textArray.length; index++) {\r\n            regions.push({\r\n                id: shortid.generate(),\r\n                type: RegionType.Rectangle,\r\n                tags: [objectArray.textArray[index]],\r\n                boundingBox: {\r\n                    left: objectArray.xminArray[index] * objectArray.width,\r\n                    top: objectArray.yminArray[index] * objectArray.height,\r\n                    width: (objectArray.xmaxArray[index] - objectArray.xminArray[index]) * objectArray.width,\r\n                    height: (objectArray.ymaxArray[index] - objectArray.yminArray[index]) * objectArray.height,\r\n                },\r\n                points: [{\r\n                    x: objectArray.xminArray[index] * objectArray.width,\r\n                    y: objectArray.yminArray[index] * objectArray.height,\r\n                },\r\n                {\r\n                    x: objectArray.xmaxArray[index] * objectArray.width,\r\n                    y: objectArray.ymaxArray[index] * objectArray.height,\r\n                }],\r\n            });\r\n        }\r\n\r\n        return regions;\r\n    }\r\n\r\n    private async getTFRecordMetadata(asset: IAsset): Promise<ITFRecordMetadata> {\r\n        const tfrecords = new Buffer(await HtmlFileReader.getAssetArray(asset));\r\n        const reader = new TFRecordsReader(tfrecords);\r\n\r\n        const width = reader.getFeature(0, \"image/width\", FeatureType.Int64) as number;\r\n        const height = reader.getFeature(0, \"image/height\", FeatureType.Int64) as number;\r\n\r\n        const xminArray = reader.getArrayFeature(0, \"image/object/bbox/xmin\", FeatureType.Float) as number[];\r\n        const yminArray = reader.getArrayFeature(0, \"image/object/bbox/ymin\", FeatureType.Float) as number[];\r\n        const xmaxArray = reader.getArrayFeature(0, \"image/object/bbox/xmax\", FeatureType.Float) as number[];\r\n        const ymaxArray = reader.getArrayFeature(0, \"image/object/bbox/ymax\", FeatureType.Float) as number[];\r\n        const textArray = reader.getArrayFeature(0, \"image/object/class/text\", FeatureType.String) as string[];\r\n\r\n        return { width, height, xminArray, yminArray, xmaxArray, ymaxArray, textArray };\r\n    }\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport Menu, { MenuItem, SubMenu, Divider } from \"rc-menu\";\r\nimport { PlatformType } from \"../../../common/hostProcess\";\r\nimport \"./titleBar.scss\";\r\nimport { strings } from \"../../../common/strings\";\r\nimport { HelpMenu } from \"./helpMenu\";\r\n\r\nexport interface ITitleBarProps extends React.Props<TitleBar> {\r\n    icon?: string | JSX.Element;\r\n    title?: string;\r\n}\r\n\r\nexport interface ITitleBarState {\r\n    isElectron: boolean;\r\n    platform: string;\r\n    maximized: boolean;\r\n    fullscreen: boolean;\r\n    menu: Electron.Menu;\r\n}\r\n\r\nexport class TitleBar extends React.Component<ITitleBarProps, ITitleBarState> {\r\n    public state: ITitleBarState = {\r\n        isElectron: false,\r\n        platform: global && global.process && global.process.platform ? global.process.platform : \"web\",\r\n        maximized: false,\r\n        fullscreen: false,\r\n        menu: null,\r\n    };\r\n\r\n    private menu: Menu = React.createRef();\r\n    private remote: Electron.Remote;\r\n    private currentWindow: Electron.BrowserWindow;\r\n\r\n    public componentDidMount() {\r\n        const isElectron: boolean = !!window[\"require\"];\r\n\r\n        if (isElectron) {\r\n            this.remote = (window as any).require(\"electron\").remote as Electron.Remote;\r\n            this.currentWindow = this.remote.getCurrentWindow();\r\n\r\n            this.currentWindow.on(\"maximize\", () => this.onMaximize(true));\r\n            this.currentWindow.on(\"unmaximize\", () => this.onMaximize(false));\r\n            this.currentWindow.on(\"enter-full-screen\", () => this.onFullScreen(true));\r\n            this.currentWindow.on(\"leave-full-screen\", () => this.onFullScreen(false));\r\n\r\n            this.setState({\r\n                isElectron: true,\r\n                maximized: this.currentWindow.isMaximized(),\r\n                fullscreen: this.currentWindow.isFullScreen(),\r\n                menu: this.remote.Menu.getApplicationMenu(),\r\n            });\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: Readonly<ITitleBarProps>) {\r\n        if (this.props.title !== prevProps.title) {\r\n            this.syncTitle();\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        if (this.state.fullscreen) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"title-bar bg-lighter-3\">\r\n                {(this.state.platform === PlatformType.Windows || this.state.platform === PlatformType.Web) &&\r\n                    <div className=\"title-bar-icon\">\r\n                        {typeof (this.props.icon) === \"string\" && <i className={`${this.props.icon}`}></i>}\r\n                        {typeof (this.props.icon) !== \"string\" && this.props.icon}\r\n                    </div>\r\n                }\r\n                {this.state.platform === PlatformType.Windows &&\r\n                    <div className=\"title-bar-menu\">\r\n                        <Menu ref={this.menu}\r\n                            mode=\"horizontal\"\r\n                            selectable={false}\r\n                            triggerSubMenuAction=\"click\"\r\n                            onClick={this.onMenuItemSelected}>\r\n                            {this.renderMenu(this.state.menu)}\r\n                        </Menu>\r\n                    </div>\r\n                }\r\n                <div className=\"title-bar-main\">{this.props.title || \"Welcome\"} - VoTT</div>\r\n                <div className=\"title-bar-controls\">\r\n                    {this.props.children}\r\n                    {this.state.platform === PlatformType.Windows &&\r\n                        <ul>\r\n                            <li title={strings.titleBar.minimize} className=\"btn-window-minimize\"\r\n                                    onClick={this.minimizeWindow}>\r\n                                <i className=\"far fa-window-minimize\" />\r\n                            </li>\r\n                            {!this.state.maximized &&\r\n                                <li title={strings.titleBar.maximize} className=\"btn-window-maximize\"\r\n                                        onClick={this.maximizeWindow}>\r\n                                    <i className=\"far fa-window-maximize\" />\r\n                                </li>\r\n                            }\r\n                            {this.state.maximized &&\r\n                                <li title={strings.titleBar.restore} className=\"btn-window-restore\"\r\n                                        onClick={this.unmaximizeWindow}>\r\n                                    <i className=\"far fa-window-restore\" />\r\n                                </li>\r\n                            }\r\n                            <li title={strings.titleBar.close} className=\"btn-window-close\"\r\n                                    onClick={this.closeWindow}>\r\n                                <i className=\"fas fa-times\" />\r\n                            </li>\r\n                        </ul>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onMaximize = (isMaximized: boolean) => {\r\n        this.setState({\r\n            maximized: isMaximized,\r\n        });\r\n    }\r\n\r\n    private onFullScreen = (isFullScreen: boolean) => {\r\n        this.setState({\r\n            fullscreen: isFullScreen,\r\n        });\r\n    }\r\n\r\n    private renderMenu = (menu: Electron.Menu) => {\r\n        if (!menu) {\r\n            return null;\r\n        }\r\n\r\n        return menu.items.map(this.renderMenuItem);\r\n    }\r\n\r\n    private renderMenuItem = (menuItem: Electron.MenuItem, index: number) => {\r\n        if (!menuItem.visible) {\r\n            return null;\r\n        }\r\n\r\n        const itemType: string = menuItem[\"type\"];\r\n\r\n        switch (itemType) {\r\n            case \"submenu\":\r\n                return (\r\n                    <SubMenu title={menuItem.label} key={menuItem.label} popupOffset={[0, 0]}>\r\n                        {this.renderMenu(menuItem[\"submenu\"])}\r\n                    </SubMenu>\r\n                );\r\n            case \"separator\":\r\n                return (<Divider key={index} />);\r\n            case \"checkbox\":\r\n                return (\r\n                    <MenuItem key={menuItem.label}\r\n                        disabled={!menuItem.enabled}\r\n                        onClick={(e) => this.onMenuItemClick(e, menuItem)}>\r\n                        <div className=\"menu-item-container\">\r\n                            {Boolean(menuItem.checked) &&\r\n                                <div className=\"menu-item-checkbox\">\r\n                                    <i className=\"fas fa-check\" />\r\n                                </div>\r\n                            }\r\n                            <div className=\"menu-item-label\">{menuItem.label}{menuItem[\"sublabel\"]}</div>\r\n                            <div className=\"menu-item-accelerator\">{this.getAcceleratorString(menuItem)}</div>\r\n                        </div>\r\n                    </MenuItem>);\r\n            case \"normal\":\r\n                return (\r\n                    <MenuItem key={menuItem.label}\r\n                        disabled={!menuItem.enabled}\r\n                        onClick={(e) => this.onMenuItemClick(e, menuItem)}>\r\n                        <div className=\"menu-item-container\">\r\n                            <div className=\"menu-item-label\">{menuItem.label}{menuItem[\"sublabel\"]}</div>\r\n                            <div className=\"menu-item-accelerator\">{this.getAcceleratorString(menuItem)}</div>\r\n                        </div>\r\n                    </MenuItem>\r\n                );\r\n        }\r\n    }\r\n\r\n    private onMenuItemClick(e: any, menuItem: Electron.MenuItem) {\r\n        if (menuItem.click) {\r\n            menuItem.click.call(menuItem, menuItem, this.currentWindow);\r\n        }\r\n\r\n        this.setState({ menu: { ...this.state.menu } as Electron.Menu });\r\n    }\r\n\r\n    private syncTitle = (): void => {\r\n        if (this.state.isElectron) {\r\n            this.currentWindow.setTitle(`${this.props.title} - VoTT`);\r\n        }\r\n    }\r\n\r\n    private minimizeWindow = () => {\r\n        this.currentWindow.minimize();\r\n    }\r\n\r\n    private maximizeWindow = () => {\r\n        this.currentWindow.maximize();\r\n    }\r\n\r\n    private unmaximizeWindow = () => {\r\n        this.currentWindow.unmaximize();\r\n    }\r\n\r\n    private closeWindow = () => {\r\n        this.currentWindow.close();\r\n    }\r\n\r\n    private onMenuItemSelected = (key: string, item: React.Component) => {\r\n        // Required to auto-close the menu after user selects an item.\r\n        this.menu.current.store.setState({\r\n            openKeys: [],\r\n            selectedKeys: [],\r\n        });\r\n    }\r\n\r\n    private getAcceleratorString(menuItem: Electron.MenuItem) {\r\n        const accelerator = menuItem[\"accelerator\"] || this.getAcceleratorFromRole(menuItem[\"role\"]);\r\n        if (accelerator) {\r\n            return accelerator.replace(\"CmdOrCtrl\", \"Ctrl\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getAcceleratorFromRole(role: string) {\r\n        switch (role) {\r\n            case \"undo\":\r\n                return \"CmdOrCtrl+Z\";\r\n            case \"redo\":\r\n                return \"CmdOrCtrl+Y\";\r\n            case \"cut\":\r\n                return \"CmdOrCtrl+X\";\r\n            case \"copy\":\r\n                return \"CmdOrCtrl+C\";\r\n            case \"paste\":\r\n                return \"CmdOrCtrl+V\";\r\n            case \"selectall\":\r\n                return \"CmdOrCtrl+A\";\r\n            case \"minimize\":\r\n                return \"CmdOrCtrl+M\";\r\n            case \"close\":\r\n                return \"CmdOrCtrl+W\";\r\n            case \"quit\":\r\n                return \"CmdOrCtrl+Q\";\r\n            case \"reload\":\r\n                return \"CmdOrCtrl+R\";\r\n            case \"togglefullscreen\":\r\n                return \"F11\";\r\n            case \"toggledevtools\":\r\n                return \"CmdOrCtrl+Shift+I\";\r\n            case \"resetzoom\":\r\n                return \"CmdOrCtrl+0\";\r\n            case \"zoomin\":\r\n                return \"CmdOrCtrl+Shift+=\";\r\n            case \"zoomout\":\r\n                return \"CmdOrCtrl+-\";\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { appInfo } from \"../../../common/appInfo\";\r\nimport \"./statusBar.scss\";\r\n\r\nexport class StatusBar extends React.Component {\r\n    public render() {\r\n        return (\r\n            <div className=\"status-bar\">\r\n                <div className=\"status-bar-main\">{this.props.children}</div>\r\n                <div className=\"status-bar-version\">\r\n                    <ul>\r\n                        <li>\r\n                            <i className=\"fas fa-code-branch\"></i>\r\n                            <span>{appInfo.version}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { IProject, AssetState } from \"../../../models/applicationState\";\r\nimport { strings, interpolate } from \"../../../common/strings\";\r\n\r\nexport interface IStatusBarMetricsProps {\r\n    project: IProject;\r\n}\r\n\r\nexport class StatusBarMetrics extends React.Component<IStatusBarMetricsProps> {\r\n    public render() {\r\n        const { project } = this.props;\r\n\r\n        if (!project) {\r\n            return null;\r\n        }\r\n\r\n        const projectAssets = _.values(project.assets);\r\n        const visitedAssets = projectAssets\r\n            .filter((asset) => asset.state === AssetState.Visited || asset.state === AssetState.Tagged);\r\n        const taggedAssets = projectAssets\r\n            .filter((asset) => asset.state === AssetState.Tagged);\r\n\r\n        return (\r\n            <ul>\r\n                <li title={strings.projectSettings.sourceConnection.title}>\r\n                    <i className=\"fas fa-upload\"></i>\r\n                    <span className=\"metric-source-connection-name\">{project.sourceConnection.name}</span>\r\n                </li>\r\n                <li title={strings.projectSettings.targetConnection.title}>\r\n                    <i className=\"fas fa-download\"></i>\r\n                    <span className=\"metric-target-connection-name\">{project.targetConnection.name}</span>\r\n                </li>\r\n                <li title={interpolate(strings.projectMetrics.taggedAssets, { count: taggedAssets.length })}>\r\n                    <i className=\"fas fa-tag\"></i>\r\n                    <span className=\"metric-tagged-asset-count\">{taggedAssets.length}</span>\r\n                </li>\r\n                <li title={interpolate(strings.projectMetrics.visitedAssets, { count: visitedAssets.length })}>\r\n                    <i className=\"fas fa-eye\"></i>\r\n                    <span className=\"metric-visited-asset-count\">{visitedAssets.length}</span>\r\n                </li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport MessageBox from \"../common/messageBox/messageBox\";\r\nimport { strings } from \"../../../common/strings\";\r\nimport { KeyboardContext, IKeyboardContext, KeyEventType } from \"../common/keyboardManager/keyboardManager\";\r\nimport { IKeyboardBindingProps, KeyboardBinding } from \"../common/keyboardBinding/keyboardBinding\";\r\nimport \"./helpMenu.scss\";\r\n\r\nexport interface IHelpMenuProps {\r\n    onClose?: () => void;\r\n}\r\n\r\nexport interface IHelpMenuState {\r\n    show: boolean;\r\n}\r\n\r\nexport class HelpMenu extends React.Component<IHelpMenuProps, IHelpMenuState> {\r\n    public static contextType = KeyboardContext;\r\n    public context!: IKeyboardContext;\r\n\r\n    public state = {\r\n        show: false,\r\n    };\r\n    private icon: string = \"fa-question-circle\";\r\n\r\n    public render() {\r\n        return (\r\n            <div className={\"help-menu-button\"} onClick={() => this.setState({show: true})}>\r\n                <i className={`fas ${this.icon}`}/>\r\n                <KeyboardBinding\r\n                    displayName={strings.editorPage.help.title}\r\n                    accelerators={[\"CmdOrCtrl+H\", \"CmdOrCtrl+h\"]}\r\n                    handler={() => this.setState({show: !this.state.show})}\r\n                    icon={this.icon}\r\n                    keyEventType={KeyEventType.KeyDown}\r\n                />\r\n                <MessageBox\r\n                    title={strings.titleBar.help}\r\n                    message={this.getHelpBody()}\r\n                    show={this.state.show}\r\n                    onCancel={this.onClose}\r\n                    hideFooter={true}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onClose = () => {\r\n        this.setState({show: false});\r\n        if (this.props.onClose) {\r\n            this.props.onClose();\r\n        }\r\n    }\r\n\r\n    private getHelpBody = () => {\r\n\r\n        const registrations = this.context.keyboard.getRegistrations()[KeyEventType.KeyDown];\r\n        if (!registrations) {\r\n            return;\r\n        }\r\n\r\n        const groupKeys = this.groupKeys(registrations);\r\n\r\n        return (\r\n            <div className=\"help-body container\">\r\n                {\r\n                    groupKeys.map((group) => group.length ? this.getRegistrationRow(group, registrations) : null)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private groupKeys = (registrations: {[key: string]: IKeyboardBindingProps}) => {\r\n        const allKeys = Object.keys(registrations);\r\n        const caseConsolidatedKeys = this.consolidateKeyCasings(allKeys);\r\n\r\n        const groups = [];\r\n        const alreadyGrouped = new Set();\r\n\r\n        for (const key of caseConsolidatedKeys) {\r\n            const group = [key];\r\n            if (!alreadyGrouped.has(key)) {\r\n                alreadyGrouped.add(key);\r\n                for (const otherKey of caseConsolidatedKeys) {\r\n                    if (!alreadyGrouped.has(otherKey) &&\r\n                            this.bindingEquals(registrations[key], registrations[otherKey])) {\r\n                        group.push(otherKey);\r\n                        alreadyGrouped.add(otherKey);\r\n                    }\r\n                }\r\n                groups.push(group);\r\n            }\r\n        }\r\n        return groups;\r\n    }\r\n\r\n    private bindingEquals(binding1: IKeyboardBindingProps, binding2: IKeyboardBindingProps) {\r\n        return binding1 && binding2\r\n                && binding1.displayName === binding2.displayName\r\n                && binding1.handler === binding2.handler;\r\n    }\r\n\r\n    private consolidateKeyCasings = (allKeys: string[]): string[] => {\r\n        const lowerRegistrations = {};\r\n        for (const key of allKeys) {\r\n            const lowerKey = key.toLowerCase();\r\n            if (!lowerRegistrations[lowerKey]) {\r\n                lowerRegistrations[lowerKey] = key;\r\n            }\r\n        }\r\n        return Object.keys(lowerRegistrations).map((lowerKey) => lowerRegistrations[lowerKey]);\r\n    }\r\n\r\n    private getRegistrationRow = (group: string[], registrations: {[key: string]: IKeyboardBindingProps}) => {\r\n        const keyRegistration = registrations[group[0]];\r\n        if (keyRegistration) {\r\n            return (\r\n                <div key={keyRegistration.displayName} className={\"help-key row\"}>\r\n                    <div className={`col-1 keybinding-icon ${(keyRegistration.icon)\r\n                        ? `fas ${keyRegistration.icon}` : \"\"}`}/>\r\n                    <div className=\"col-4 keybinding-accelerator\">{this.stringifyGroup(group)}</div>\r\n                    <div className=\"col-6 keybinding-name\">{keyRegistration.displayName}</div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    private stringifyGroup(group: string[]): string {\r\n        return (group.length < 3) ? group.join(\", \") : `${group[0]} - ${group[group.length - 1]}`;\r\n    }\r\n}\r\n","import _ from \"lodash\";\r\nimport { ExportProvider } from \"./exportProvider\";\r\nimport { IProject, IAssetMetadata, ITag, IExportProviderOptions } from \"../../models/applicationState\";\r\nimport Guard from \"../../common/guard\";\r\nimport HtmlFileReader from \"../../common/htmlFileReader\";\r\nimport { itemTemplate, annotationTemplate, objectTemplate } from \"./pascalVOC/pascalVOCTemplates\";\r\nimport { interpolate } from \"../../common/strings\";\r\nimport os from \"os\";\r\nimport { splitTestAsset } from \"./testAssetsSplitHelper\";\r\n\r\ninterface IObjectInfo {\r\n    name: string;\r\n    xmin: number;\r\n    ymin: number;\r\n    xmax: number;\r\n    ymax: number;\r\n}\r\n\r\ninterface IImageInfo {\r\n    width: number;\r\n    height: number;\r\n    objects: IObjectInfo[];\r\n}\r\n\r\n/**\r\n * Export options for Pascal VOC Export Provider\r\n */\r\nexport interface IPascalVOCExportProviderOptions extends IExportProviderOptions {\r\n    /** The test / train split ratio for exporting data */\r\n    testTrainSplit?: number;\r\n    /** Whether or not to include unassigned tags in exported data */\r\n    exportUnassigned?: boolean;\r\n}\r\n\r\n/**\r\n * @name - PascalVOC Export Provider\r\n * @description - Exports a project into a Pascal VOC\r\n */\r\nexport class PascalVOCExportProvider extends ExportProvider<IPascalVOCExportProviderOptions> {\r\n    private imagesInfo = new Map<string, IImageInfo>();\r\n\r\n    constructor(project: IProject, options: IPascalVOCExportProviderOptions) {\r\n        super(project, options);\r\n        Guard.null(options);\r\n    }\r\n\r\n    /**\r\n     * Export project to PascalVOC\r\n     */\r\n    public async export(): Promise<void> {\r\n        const allAssets = await this.getAssetsForExport();\r\n        const exportObject: any = { ...this.project };\r\n        exportObject.assets = _.keyBy(allAssets, (assetMetadata) => assetMetadata.asset.id);\r\n\r\n        // Create Export Folder\r\n        const exportFolderName = `${this.project.name.replace(/\\s/g, \"-\")}-PascalVOC-export`;\r\n        await this.storageProvider.createContainer(exportFolderName);\r\n\r\n        await this.exportImages(exportFolderName, allAssets);\r\n        await this.exportPBTXT(exportFolderName, this.project);\r\n        await this.exportAnnotations(exportFolderName, allAssets);\r\n\r\n        // TestSplit && exportUnassignedTags are optional parameter in the UI Exporter configuration\r\n        const testSplit = (100 - (this.options.testTrainSplit || 80)) / 100;\r\n        await this.exportImageSets(\r\n            exportFolderName,\r\n            allAssets,\r\n            this.project.tags,\r\n            testSplit,\r\n            this.options.exportUnassigned,\r\n        );\r\n    }\r\n\r\n    private async exportImages(exportFolderName: string, allAssets: IAssetMetadata[]) {\r\n        // Create JPEGImages Sub Folder\r\n        const jpegImagesFolderName = `${exportFolderName}/JPEGImages`;\r\n        await this.storageProvider.createContainer(jpegImagesFolderName);\r\n\r\n        await allAssets.mapAsync(async (assetMetadata) => {\r\n            await this.exportSingleImage(jpegImagesFolderName, assetMetadata);\r\n        });\r\n    }\r\n\r\n    private async exportSingleImage(jpegImagesFolderName: string, assetMetadata: IAssetMetadata): Promise<void> {\r\n        try {\r\n            const arrayBuffer = await HtmlFileReader.getAssetArray(assetMetadata.asset);\r\n            const buffer = Buffer.from(arrayBuffer);\r\n            const imageFileName = `${jpegImagesFolderName}/${assetMetadata.asset.name}`;\r\n\r\n            // Write Binary\r\n            await this.storageProvider.writeBinary(imageFileName, buffer);\r\n\r\n            // Get Array of all Box shaped tag for the Asset\r\n            const tagObjects = this.getAssetTagArray(assetMetadata);\r\n\r\n            const imageInfo: IImageInfo = {\r\n                width: assetMetadata.asset.size ? assetMetadata.asset.size.width : 0,\r\n                height: assetMetadata.asset.size ? assetMetadata.asset.size.height : 0,\r\n                objects: tagObjects,\r\n            };\r\n\r\n            this.imagesInfo.set(assetMetadata.asset.name, imageInfo);\r\n\r\n            if (!assetMetadata.asset.size ||\r\n                assetMetadata.asset.size.width === 0 ||\r\n                assetMetadata.asset.size.height === 0) {\r\n                await this.updateImageSizeInfo(arrayBuffer, imageFileName, assetMetadata.asset.name);\r\n            }\r\n        } catch (err) {\r\n            // Ignore the error at the moment\r\n            // TODO: Refactor ExportProvider abstract class export() method\r\n            //       to return Promise<object> with an object containing\r\n            //       the number of files successfully exported out of total\r\n            console.log(`Error downloading asset ${assetMetadata.asset.path} - ${err}`);\r\n        }\r\n    }\r\n\r\n    private getAssetTagArray(element: IAssetMetadata): IObjectInfo[] {\r\n        const tagObjects = [];\r\n        element.regions.forEach((region) => {\r\n            region.tags.forEach((tagName) => {\r\n                const objectInfo: IObjectInfo = {\r\n                    name: tagName,\r\n                    xmin: region.boundingBox.left,\r\n                    ymin: region.boundingBox.top,\r\n                    xmax: region.boundingBox.left + region.boundingBox.width,\r\n                    ymax: region.boundingBox.top + region.boundingBox.height,\r\n                };\r\n\r\n                tagObjects.push(objectInfo);\r\n            });\r\n        });\r\n\r\n        return tagObjects;\r\n    }\r\n\r\n    private async updateImageSizeInfo(imageBuffer: ArrayBuffer, imageFileName: string, assetName: string) {\r\n        // Get Base64\r\n        const image64 = btoa(new Uint8Array(imageBuffer).\r\n            reduce((data, byte) => data + String.fromCharCode(byte), \"\"));\r\n\r\n        if (image64.length < 10) {\r\n            // Ignore the error at the moment\r\n            // TODO: Refactor ExportProvider abstract class export() method\r\n            //       to return Promise<object> with an object containing\r\n            //       the number of files successfully exported out of total\r\n            console.log(`Image not valid ${imageFileName}`);\r\n        } else {\r\n            const assetProps = await HtmlFileReader.readAssetAttributesWithBuffer(image64);\r\n            const imageInfo = this.imagesInfo.get(assetName);\r\n            if (imageInfo && assetProps) {\r\n                imageInfo.width = assetProps.width;\r\n                imageInfo.height = assetProps.height;\r\n            } else {\r\n                console.log(`imageInfo for element ${assetName} not found (${assetProps})`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async exportPBTXT(exportFolderName: string, project: IProject) {\r\n        if (project.tags && project.tags.length > 0) {\r\n            // Save pascal_label_map.pbtxt\r\n            const pbtxtFileName = `${exportFolderName}/pascal_label_map.pbtxt`;\r\n\r\n            let id = 1;\r\n            const items = project.tags.map((element) => {\r\n                const params = {\r\n                    id: (id++).toString(),\r\n                    tag: element.name,\r\n                };\r\n\r\n                return interpolate(itemTemplate, params);\r\n            });\r\n\r\n            await this.storageProvider.writeText(pbtxtFileName, items.join(\"\"));\r\n        }\r\n    }\r\n\r\n    private async exportAnnotations(exportFolderName: string, allAssets: IAssetMetadata[]) {\r\n        // Create Annotations Sub Folder\r\n        const annotationsFolderName = `${exportFolderName}/Annotations`;\r\n        await this.storageProvider.createContainer(annotationsFolderName);\r\n\r\n        try {\r\n            // Save Annotations\r\n            await this.imagesInfo.forEachAsync(async (imageInfo, imageName) => {\r\n                const imageFilePath = `${annotationsFolderName}/${imageName}`;\r\n                const assetFilePath = `${imageFilePath.substr(0, imageFilePath.lastIndexOf(\".\"))\r\n                    || imageFilePath}.xml`;\r\n\r\n                const objectsXML = imageInfo.objects.map((o) => {\r\n                    const params = {\r\n                        name: o.name,\r\n                        xmin: o.xmin.toString(),\r\n                        ymin: o.ymin.toString(),\r\n                        xmax: o.xmax.toString(),\r\n                        ymax: o.ymax.toString(),\r\n                    };\r\n\r\n                    return interpolate(objectTemplate, params);\r\n                });\r\n\r\n                const params = {\r\n                    fileName: imageName,\r\n                    filePath: imageFilePath,\r\n                    width: imageInfo.width.toString(),\r\n                    height: imageInfo.height.toString(),\r\n                    objects: objectsXML.join(\"\"),\r\n                };\r\n\r\n                // Save Annotation File\r\n                await this.storageProvider.writeText(assetFilePath, interpolate(annotationTemplate, params));\r\n            });\r\n        } catch (err) {\r\n            console.log(\"Error writing Pascal VOC annotation file\");\r\n        }\r\n    }\r\n\r\n    private async exportImageSets(\r\n        exportFolderName: string,\r\n        allAssets: IAssetMetadata[],\r\n        tags: ITag[],\r\n        testSplit: number,\r\n        exportUnassignedTags: boolean) {\r\n        if (!tags) {\r\n            return;\r\n        }\r\n\r\n        // Create ImageSets Sub Folder (Main ?)\r\n        const imageSetsFolderName = `${exportFolderName}/ImageSets`;\r\n        await this.storageProvider.createContainer(imageSetsFolderName);\r\n\r\n        const imageSetsMainFolderName = `${exportFolderName}/ImageSets/Main`;\r\n        await this.storageProvider.createContainer(imageSetsMainFolderName);\r\n\r\n        const assetUsage = new Map<string, Set<string>>();\r\n        const tagUsage = new Map<string, number>();\r\n\r\n        // Generate tag usage per asset\r\n        allAssets.forEach((assetMetadata) => {\r\n            const appliedTags = new Set<string>();\r\n            assetUsage.set(assetMetadata.asset.name, appliedTags);\r\n\r\n            if (assetMetadata.regions.length > 0) {\r\n                assetMetadata.regions.forEach((region) => {\r\n                    tags.forEach((tag) => {\r\n                        let tagInstances = tagUsage.get(tag.name) || 0;\r\n                        if (region.tags.filter((tagName) => tagName === tag.name).length > 0) {\r\n                            appliedTags.add(tag.name);\r\n                            tagUsage.set(tag.name, tagInstances += 1);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        if (testSplit > 0 && testSplit <= 1) {\r\n            const tags = this.project.tags;\r\n            const testAssets: string[] = splitTestAsset(allAssets, tags, testSplit);\r\n\r\n            await tags.forEachAsync(async (tag) => {\r\n                const tagInstances = tagUsage.get(tag.name) || 0;\r\n                if (!exportUnassignedTags && tagInstances === 0) {\r\n                    return;\r\n                }\r\n                const testArray = [];\r\n                const trainArray = [];\r\n                assetUsage.forEach((tags, assetName) => {\r\n                    let assetString = \"\";\r\n                    if (tags.has(tag.name)) {\r\n                        assetString = `${assetName} 1`;\r\n                    } else {\r\n                        assetString = `${assetName} -1`;\r\n                    }\r\n                    if (testAssets.find((am) => am === assetName)) {\r\n                        testArray.push(assetString);\r\n                    } else {\r\n                        trainArray.push(assetString);\r\n                    }\r\n                });\r\n\r\n                const testImageSetFileName = `${imageSetsMainFolderName}/${tag.name}_val.txt`;\r\n                await this.storageProvider.writeText(testImageSetFileName, testArray.join(os.EOL));\r\n\r\n                const trainImageSetFileName = `${imageSetsMainFolderName}/${tag.name}_train.txt`;\r\n                await this.storageProvider.writeText(trainImageSetFileName, trainArray.join(os.EOL));\r\n            });\r\n        } else {\r\n\r\n            // Save ImageSets\r\n            await tags.forEachAsync(async (tag) => {\r\n                const tagInstances = tagUsage.get(tag.name) || 0;\r\n                if (!exportUnassignedTags && tagInstances === 0) {\r\n                    return;\r\n                }\r\n\r\n                const assetList = [];\r\n                assetUsage.forEach((tags, assetName) => {\r\n                    if (tags.has(tag.name)) {\r\n                        assetList.push(`${assetName} 1`);\r\n                    } else {\r\n                        assetList.push(`${assetName} -1`);\r\n                    }\r\n                });\r\n\r\n                const imageSetFileName = `${imageSetsMainFolderName}/${tag.name}.txt`;\r\n                await this.storageProvider.writeText(imageSetFileName, assetList.join(os.EOL));\r\n            });\r\n        }\r\n    }\r\n}\r\n","import _ from \"lodash\";\r\nimport { ExportProvider } from \"./exportProvider\";\r\nimport { IProject, IExportProviderOptions } from \"../../models/applicationState\";\r\nimport Guard from \"../../common/guard\";\r\nimport { constants } from \"../../common/constants\";\r\nimport HtmlFileReader from \"../../common/htmlFileReader\";\r\n\r\n/**\r\n * VoTT Json Export Provider options\r\n */\r\nexport interface IVottJsonExportProviderOptions extends IExportProviderOptions {\r\n    /** Whether or not to include binary assets in target connection */\r\n    includeImages: boolean;\r\n}\r\n\r\n/**\r\n * @name - Vott Json Export Provider\r\n * @description - Exports a project into a single JSON file that include all configured assets\r\n */\r\nexport class VottJsonExportProvider extends ExportProvider<IVottJsonExportProviderOptions> {\r\n    constructor(project: IProject, options: IVottJsonExportProviderOptions) {\r\n        super(project, options);\r\n        Guard.null(options);\r\n    }\r\n\r\n    /**\r\n     * Export project to VoTT JSON format\r\n     */\r\n    public async export(): Promise<void> {\r\n        const results = await this.getAssetsForExport();\r\n\r\n        if (this.options.includeImages) {\r\n            await results.forEachAsync(async (assetMetadata) => {\r\n                const arrayBuffer = await HtmlFileReader.getAssetArray(assetMetadata.asset);\r\n                const assetFilePath = `vott-json-export/${assetMetadata.asset.name}`;\r\n                await this.storageProvider.writeBinary(assetFilePath, Buffer.from(arrayBuffer));\r\n            });\r\n        }\r\n\r\n        const exportObject = { ...this.project };\r\n        exportObject.assets = _.keyBy(results, (assetMetadata) => assetMetadata.asset.id) as any;\r\n\r\n        // We don't need these fields in the export JSON\r\n        delete exportObject.sourceConnection;\r\n        delete exportObject.targetConnection;\r\n        delete exportObject.exportFormat;\r\n\r\n        const fileName = `vott-json-export/${this.project.name.replace(/\\s/g, \"-\")}${constants.exportFileExtension}`;\r\n        await this.storageProvider.writeText(fileName, JSON.stringify(exportObject, null, 4));\r\n    }\r\n}\r\n","import _ from \"lodash\";\r\nimport { ExportProvider } from \"./exportProvider\";\r\nimport { IProject, IExportProviderOptions } from \"../../models/applicationState\";\r\nimport Guard from \"../../common/guard\";\r\nimport HtmlFileReader from \"../../common/htmlFileReader\";\r\nimport json2csv, { Parser } from \"json2csv\";\r\n\r\n/**\r\n * Options for CSV Export Provider\r\n */\r\nexport interface ICsvExportProviderOptions extends IExportProviderOptions {\r\n    /** Whether or not to include binary assets in target connection */\r\n    includeImages: boolean;\r\n}\r\n\r\n/**\r\n * @name - CSV Format Export Provider\r\n * @description - Exports a project into a single CSV file that include all configured assets\r\n */\r\nexport class CsvExportProvider extends ExportProvider<ICsvExportProviderOptions> {\r\n    constructor(project: IProject, options: ICsvExportProviderOptions) {\r\n        super(project, options);\r\n        Guard.null(options);\r\n    }\r\n\r\n    /**\r\n     * Export project to CSV\r\n     */\r\n    public async export(): Promise<void> {\r\n        const results = await this.getAssetsForExport();\r\n        const dataItems = [];\r\n\r\n        await results.forEachAsync(async (assetMetadata) => {\r\n            if (this.options.includeImages) {\r\n                // Write Image\r\n                const arrayBuffer = await HtmlFileReader.getAssetArray(assetMetadata.asset);\r\n                const assetFilePath = `vott-csv-export/${assetMetadata.asset.name}`;\r\n                await this.storageProvider.writeBinary(assetFilePath, Buffer.from(arrayBuffer));\r\n            }\r\n\r\n            // Push CSV Records\r\n            // The CSV file itself must have the following format::\r\n            // image,xmin,ymin,xmax,ymax,label\r\n            // image_1.jpg,26,594,86,617,cat\r\n            // image_1.jpg,599,528,612,541,car\r\n            // image_2.jpg,393,477,430,552,dog\r\n            assetMetadata.regions.forEach((region) => {\r\n                region.tags.forEach((tag) => {\r\n                    const dataItem = {\r\n                        image: assetMetadata.asset.name,\r\n                        xmin: region.boundingBox.left,\r\n                        ymin: region.boundingBox.top,\r\n                        xmax: region.boundingBox.left + region.boundingBox.width,\r\n                        ymax: region.boundingBox.top + region.boundingBox.height,\r\n                        label: tag,\r\n                    };\r\n                    dataItems.push(dataItem);\r\n                });\r\n            });\r\n        });\r\n\r\n        // Configure CSV options\r\n        const csvOptions: json2csv.Options<{}> = {\r\n            fields: [\"image\", \"xmin\", \"ymin\", \"xmax\", \"ymax\", \"label\"],\r\n        };\r\n        const csvParser = new Parser(csvOptions);\r\n        const csvData = csvParser.parse(dataItems);\r\n\r\n        // Save CSV\r\n        const fileName = `vott-csv-export/${this.project.name.replace(/\\s/g, \"-\")}-export.csv`;\r\n        await this.storageProvider.writeText(fileName, csvData);\r\n    }\r\n}\r\n","import { Action } from \"redux\";\r\nimport { IToggleDevToolsAction,\r\n         IRefreshApplicationAction,\r\n         ISaveAppSettingsAction,\r\n         IEnsureSecurityTokenAction,\r\n} from \"./applicationActions\";\r\nimport { ActionTypes } from \"./actionTypes\";\r\nimport {\r\n    ILoadConnectionAction,\r\n    ISaveConnectionAction,\r\n    IDeleteConnectionAction,\r\n} from \"./connectionActions\";\r\nimport {\r\n    ILoadProjectAction,\r\n    ICloseProjectAction,\r\n    ISaveProjectAction,\r\n    ILoadProjectAssetsAction,\r\n    ISaveAssetMetadataAction,\r\n    ILoadAssetMetadataAction,\r\n    IExportProjectAction,\r\n    IDeleteProjectAction,\r\n} from \"./projectActions\";\r\nimport {\r\n    IShowAppErrorAction,\r\n    IClearErrorAction,\r\n} from \"./appErrorActions\";\r\n\r\n/**\r\n * Data payload dispatched from the action and delivered to reducer\r\n */\r\nexport interface IPayloadAction<TType, TPayload> extends Action<TType> {\r\n    payload: TPayload;\r\n}\r\n\r\n/**\r\n * Creates action and validates type of action type name\r\n * @param type Name for action being created\r\n */\r\n// tslint:disable-next-line:max-line-length\r\nexport function createAction<TAction extends Action<TAction[\"type\"]>>(type: TAction[\"type\"]): () => Action<TAction[\"type\"]> {\r\n    return () => ({\r\n        type,\r\n    });\r\n}\r\n\r\n/**\r\n * Create action with payload\r\n * @param type Name for action being created\r\n */\r\n// tslint:disable-next-line:max-line-length\r\nexport function createPayloadAction<TAction extends IPayloadAction<TAction[\"type\"], TAction[\"payload\"]>>(type: TAction[\"type\"]): (payload: TAction[\"payload\"]) => IPayloadAction<TAction[\"type\"], TAction[\"payload\"]> {\r\n    return (payload: TAction[\"payload\"]) => ({\r\n        type,\r\n        payload,\r\n    });\r\n}\r\n\r\n/**\r\n * Catch-all for unregistered actions\r\n */\r\nexport interface IOtherAction extends Action<string> {\r\n    type: ActionTypes.ANY_OTHER_ACTION;\r\n}\r\n\r\n/**\r\n * Helper instance of catch-all\r\n */\r\nexport const anyOtherAction = createAction<IOtherAction>(ActionTypes.ANY_OTHER_ACTION);\r\n\r\n/**\r\n * Used by reducers to type-check all actions\r\n */\r\nexport type AnyAction = IOtherAction |\r\n    IToggleDevToolsAction |\r\n    IRefreshApplicationAction |\r\n    ISaveAppSettingsAction |\r\n    IEnsureSecurityTokenAction |\r\n    ILoadConnectionAction |\r\n    ISaveConnectionAction |\r\n    IDeleteConnectionAction |\r\n    ILoadProjectAction |\r\n    ICloseProjectAction |\r\n    ISaveProjectAction |\r\n    IDeleteProjectAction |\r\n    ILoadProjectAssetsAction |\r\n    ISaveAssetMetadataAction |\r\n    ILoadAssetMetadataAction |\r\n    IExportProjectAction |\r\n    IShowAppErrorAction |\r\n    IClearErrorAction;\r\n","import React, { Fragment, SyntheticEvent } from \"react\";\r\nimport { IProject } from \"../../../models/applicationState\";\r\nimport IProjectActions from \"../../../redux/actions/projectActions\";\r\nimport { IKeyboardContext, KeyboardContext, KeyEventType } from \"../common/keyboardManager/keyboardManager\";\r\nimport { KeyboardBinding } from \"../common/keyboardBinding/keyboardBinding\";\r\nimport { ToolbarItemName, ToolbarItemGroup } from \"../../../registerToolbar\";\r\n\r\n/**\r\n * Toolbar Item Metadata\r\n * @member name - Name of Toolbar Item\r\n * @member icon - Icon for toolbar item\r\n * @member tooltip - Tooltip to apply upon selection\r\n * @member group - Name of item group in which to include item\r\n * @member type - Type of toolbar item (Action or State)\r\n * @member accelerators - collection of accelerator that map to same action\r\n */\r\nexport interface IToolbarItemMetadata {\r\n    name: ToolbarItemName;\r\n    icon: string;\r\n    tooltip: string;\r\n    group: ToolbarItemGroup;\r\n    type: ToolbarItemType;\r\n    accelerators?: string[];\r\n}\r\n\r\n/**\r\n * Types of Toolbar items\r\n * @member Action - Toolbar item executes an action (export)\r\n * @member State - Toolbar item changes something about the state of the component (Draw Polygon)\r\n */\r\nexport enum ToolbarItemType {\r\n    Action = 0,\r\n    State = 1,\r\n}\r\n\r\n/**\r\n * Properties for Toolbar Item\r\n * @member actions - Project actions\r\n * @member project - Current project being edited\r\n * @member active - Toolbar is active\r\n * @member onClick - Function to be called on click of Toolbar Item\r\n */\r\nexport interface IToolbarItemProps extends IToolbarItemMetadata {\r\n    actions: IProjectActions;\r\n    project: IProject;\r\n    active: boolean;\r\n    onClick: (item: ToolbarItem) => void;\r\n}\r\n\r\n/**\r\n * @name - Toolbar Item\r\n * @description - Controls for Editor Page Toolbar\r\n */\r\nexport abstract class ToolbarItem extends React.Component<IToolbarItemProps> {\r\n    public static contextType = KeyboardContext;\r\n    public context!: IKeyboardContext;\r\n    private unregisterKeyboardHandler: () => void;\r\n\r\n    public componentWillUnmount() {\r\n        if (this.unregisterKeyboardHandler) {\r\n            this.unregisterKeyboardHandler();\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const className = [`toolbar-btn ${this.props.name}`];\r\n        if (this.props.active) {\r\n            className.push(\"active\");\r\n        }\r\n\r\n        const accelerators = this.props.accelerators;\r\n\r\n        return (\r\n            <Fragment>\r\n                {\r\n                    accelerators &&\r\n                    <KeyboardBinding\r\n                        displayName={this.props.tooltip}\r\n                        accelerators={accelerators}\r\n                        handler={this.onClick}\r\n                        icon={this.props.icon}\r\n                        keyEventType={KeyEventType.KeyDown}\r\n                    />\r\n                }\r\n                <button type=\"button\"\r\n                    className={className.join(\" \")}\r\n                    title={this.getTitle()}\r\n                    onClick={this.onClick}>\r\n                    <i className={\"fas \" + this.props.icon} />\r\n                </button>\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    protected abstract onItemClick();\r\n\r\n    private getTitle = () => {\r\n        return `${this.props.tooltip}${this.getShortcut()}`;\r\n    }\r\n\r\n    private getShortcut = () => {\r\n        return ` (${this.consolidateKeyCasings(this.props.accelerators).join(\", \")})`;\r\n    }\r\n\r\n    private consolidateKeyCasings = (accelerators: string[]): string[] => {\r\n        const consolidated: string[] = [];\r\n        if (accelerators) {\r\n            for (const a of accelerators) {\r\n                if (!consolidated.find((item) => item.toLowerCase() === a.toLowerCase())) {\r\n                    consolidated.push(a);\r\n                }\r\n            }\r\n        }\r\n        return consolidated;\r\n    }\r\n\r\n    private onClick = (e: SyntheticEvent | KeyboardEvent) => {\r\n        e.stopPropagation();\r\n\r\n        if (this.onItemClick) {\r\n            this.onItemClick();\r\n        }\r\n        this.props.onClick(this);\r\n    }\r\n}\r\n","/* (ignored) */","import { IAssetProvider, IAssetProviderRegistrationOptions } from \"./assetProviderFactory\";\r\nimport Guard from \"../../common/guard\";\r\nimport { IConnection, StorageType } from \"../../models/applicationState\";\r\nimport getHostProcess, { HostProcessType } from \"../../common/hostProcess\";\r\n\r\n/**\r\n * Interface for all VoTT Storage Providers\r\n * @member storageType - Type of Storage (local, cloud)\r\n * @member readText - Read text from path\r\n * @member readBinary - Read Buffer from path\r\n * @member deleteFile - Delete file from path\r\n * @member writeText - Write text to file at path\r\n * @member writeBinary - Write buffer to file at path\r\n * @member listFiles - List files in container within storage provider\r\n * @member listContainers - List containers in storage provider\r\n * @member createContainer - Create container within storage provider\r\n * @member deleteContainer - Delete a container from a storage provider\r\n */\r\nexport interface IStorageProvider extends IAssetProvider {\r\n\r\n    storageType: StorageType;\r\n\r\n    readText(filePath: string): Promise<string>;\r\n    readBinary(filePath: string): Promise<Buffer>;\r\n    deleteFile(filePath: string): Promise<void>;\r\n\r\n    writeText(filePath: string, contents: string): Promise<void>;\r\n    writeBinary(filePath: string, contents: Buffer): Promise<void>;\r\n\r\n    listFiles(folderPath?: string, ext?: string): Promise<string[]>;\r\n    listContainers(folderPath?: string): Promise<string[]>;\r\n\r\n    createContainer(folderPath: string): Promise<void>;\r\n    deleteContainer(folderPath: string): Promise<void>;\r\n}\r\n\r\n/**\r\n * Interface for registration options of Storage Providers\r\n * @member factory - Function to instantiate storage provider\r\n */\r\nexport interface IStorageProviderRegistrationOptions extends IAssetProviderRegistrationOptions {\r\n    factory: (options?: any) => IStorageProvider;\r\n}\r\n\r\n/**\r\n * @name - Storage Provider Factory\r\n * @description - Creates instance of Storage Providers based on request provider type\r\n */\r\nexport class StorageProviderFactory {\r\n    /**\r\n     * @returns - Dictionary of registered Storage Providers\r\n     */\r\n    public static get providers() {\r\n        return { ...StorageProviderFactory.providerRegistry };\r\n    }\r\n\r\n    /**\r\n     * Register a Storage Provider based on options\r\n     * @param options - Storage Provider options\r\n     */\r\n    public static register(options: IStorageProviderRegistrationOptions);\r\n    /**\r\n     * Register Storage Provider based on name and a factory\r\n     * @param name - Name of Storage Provider\r\n     * @param factory - Function that instantiates Storage Provider\r\n     */\r\n    public static register(name: string, factory: (options?: any) => IStorageProvider);\r\n    /**\r\n     * Register Storage Provider based on name and a factory\r\n     * @param name - Name of Storage Provider\r\n     * @param factory - Function that instantiates Storage Provider\r\n     */\r\n    public static register(nameOrOptions: any, factory?: (options?: any) => IStorageProvider) {\r\n        Guard.null(nameOrOptions);\r\n\r\n        let options: IStorageProviderRegistrationOptions = nameOrOptions as IStorageProviderRegistrationOptions;\r\n\r\n        if (typeof (nameOrOptions) === \"string\") {\r\n            Guard.null(factory);\r\n\r\n            options = {\r\n                name: nameOrOptions,\r\n                displayName: nameOrOptions,\r\n                factory,\r\n            };\r\n        }\r\n\r\n        if (!options.platformSupport) {\r\n            options.platformSupport = HostProcessType.All;\r\n        }\r\n\r\n        if ((options.platformSupport & getHostProcess().type) === 0) {\r\n            return;\r\n        }\r\n\r\n        StorageProviderFactory.providerRegistry[options.name] = options;\r\n    }\r\n\r\n    /**\r\n     * Create Storage Provider from provider type and options specified in connection\r\n     * @param connection Connection for a Storage Provider\r\n     */\r\n    public static createFromConnection(connection: IConnection) {\r\n        return this.create(connection.providerType, connection.providerOptions);\r\n    }\r\n\r\n    /**\r\n     * Create Storage Provider from registered Storage Provider name and options\r\n     * @param name - Name of Storage Provider\r\n     * @param options - Options for Storage Provider\r\n     */\r\n    public static create(name: string, options?: any): IStorageProvider {\r\n        Guard.empty(name);\r\n\r\n        const registrationOptions = StorageProviderFactory.providerRegistry[name];\r\n        if (!registrationOptions) {\r\n            throw new Error(`No storage provider has been registered with name '${name}'`);\r\n        }\r\n\r\n        return registrationOptions.factory(options);\r\n    }\r\n\r\n    /**\r\n     * Indicates whether or not a Storage Provider has been registered\r\n     * @param providerType - Name of Storage Provider\r\n     */\r\n    public static isRegistered(providerType: string): boolean {\r\n        return this.providers[providerType] !== undefined;\r\n    }\r\n\r\n    private static providerRegistry: { [id: string]: IStorageProviderRegistrationOptions } = {};\r\n}\r\n","// extracted by mini-css-extract-plugin","// A TFRecords file contains a sequence of strings with CRC\r\n// hashes. Each record has the format\r\n//\r\n//     uint64 length\r\n//     uint32 masked_crc32_of_length\r\n//     byte   data[length]\r\n//     uint32 masked_crc32_of_data\r\n//\r\n// and the records are concatenated together to produce the file. The\r\n// CRC32s are described here, and the mask of a CRC is\r\n//\r\n//     masked_crc = ((crc >> 15) | (crc << 17)) + 0xa282ead8ul\r\n//\r\n// For more information, please refer to\r\n// https://www.tensorflow.org/versions/master/api_docs/python/python_io.html#tfrecords-format-details.\r\n\r\n// maskDelta is a magic number taken from\r\n// https://github.com/tensorflow/tensorflow/blob/754048a0453a04a761e112ae5d99c149eb9910dd/\r\n//    tensorflow/core/lib/hash/crc32c.h#L33.\r\n// const maskDelta uint32 = 0xa282ead8\r\n// mask returns a masked representation of crc.\r\n\r\nimport Guard from \"../../../common/guard\";\r\nimport Int64 from \"node-int64\";\r\nimport reverse from \"buffer-reverse\";\r\n\r\n/**\r\n * @buffer - Buffer input\r\n * @description - Calculate 32-bit CRC using the Castagnoli polynomial (0x1EDC6F41)\r\n */\r\nexport function crc32c(buffer: Buffer): number {\r\n    Guard.null(buffer);\r\n    const polynomial = 0x1EDC6F41;  // 0x04C11DB7 for crc32\r\n    const initialValue = 0xFFFFFFFF;\r\n    const finalXORValue = 0xFFFFFFFF;\r\n    const table = [];\r\n    let crc = initialValue;\r\n    let i = 0;\r\n    let j = 0;\r\n    let c = 0;\r\n\r\n    function reverse(x, n) {\r\n        let b = 0;\r\n        while (n) {\r\n        b = b * 2 + x % 2;\r\n        x /= 2;\r\n        x -= x % 1;\r\n        n--;\r\n        }\r\n        return b;\r\n    }\r\n\r\n    for (i = 255; i >= 0; i--) {\r\n        c = reverse(i, 32);\r\n\r\n        for (j = 0; j < 8; j++) {\r\n        c = ((c * 2) ^ (((c >>> 31) % 2) * polynomial)) >>> 0;\r\n        }\r\n\r\n        table[i] = reverse(c, 32);\r\n    }\r\n\r\n    for (i = 0; i < buffer.length; i++) {\r\n        c = buffer[i];\r\n        if (c > 255) {\r\n        throw new RangeError();\r\n        }\r\n        j = (crc % 256) ^ c;\r\n        crc = ((crc / 256) ^ table[j]) >>> 0;\r\n    }\r\n\r\n    return (crc ^ finalXORValue) >>> 0;\r\n}\r\n\r\n/**\r\n * @value - Input CRC32 value\r\n * @description - Mask an input CRC32 value according to the TensorFlow TFRecords specs\r\n */\r\nexport function maskCrc(value: number): number {\r\n    Guard.null(value);\r\n    const kCrc32MaskDelta = 0xa282ead8;\r\n    const fourGb = Math.pow(2, 32);\r\n\r\n    return (((value >>> 15) | (value << 17)) + kCrc32MaskDelta) % fourGb;\r\n}\r\n\r\n/**\r\n * @value - Input number value\r\n * @description - Get a Buffer representation of a Int64 bit value\r\n */\r\nexport function getInt64Buffer(value: number): Buffer {\r\n    Guard.null(value);\r\n    const metadataBuffer = new ArrayBuffer(8);\r\n    const intArray = new Uint8Array(metadataBuffer, 0, 8);\r\n    const dataView = new DataView(metadataBuffer, 0, 8);\r\n\r\n    dataView.setUint32(4, 0, true);\r\n    dataView.setUint32(0, value, true);\r\n\r\n    return new Buffer(intArray);\r\n}\r\n\r\n/**\r\n * @value - Input number value\r\n * @description - Get a Buffer representation of a Int32 bit value\r\n */\r\nexport function getInt32Buffer(value: number): Buffer {\r\n    Guard.null(value);\r\n    const fourGb = Math.pow(2, 32);\r\n    const value32 = value % fourGb;\r\n\r\n    const metadataBuffer = new ArrayBuffer(4);\r\n    const intArray = new Uint8Array(metadataBuffer, 0, 4);\r\n    const dataView = new DataView(metadataBuffer, 0, 4);\r\n\r\n    dataView.setUint32(0, value32, true);\r\n\r\n    return new Buffer(intArray);\r\n}\r\n\r\n/**\r\n * @str - Input string\r\n * @description - Get a Uint8Array representation of an input string value\r\n */\r\nexport function textEncode(str: string): Uint8Array {\r\n    Guard.null(str);\r\n    const utf8 = unescape(encodeURIComponent(str));\r\n    const result = new Uint8Array(utf8.length);\r\n    for (let i = 0; i < utf8.length; i++) {\r\n        result[i] = utf8.charCodeAt(i);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @arr - Input Uint8Array byte array\r\n * @description - Get a UTF8 string value\r\n */\r\nexport function textDecode(arr: Uint8Array): string {\r\n    Guard.null(arr);\r\n\r\n    const utf8 = Array.from(arr).map((item) => String.fromCharCode(item)).join(\"\");\r\n    return decodeURIComponent(escape(utf8));\r\n}\r\n\r\n/**\r\n * @buffer - Input buffer\r\n * @description - Read an Int64 value from buffer\r\n */\r\nexport function readInt64(buffer: Buffer): number {\r\n    Guard.null(buffer);\r\n    Guard.expression(buffer.length, (num) => num >= 8);\r\n\r\n    buffer = reverse(buffer.slice(0, 8));\r\n    const int64 = new Int64(buffer, 0);\r\n    return int64.toNumber(true);\r\n}\r\n","import Guard from \"../../common/guard\";\r\nimport {\r\n    IProject, IExportFormat, IAssetMetadata, IAsset,\r\n    AssetState, AssetType, IExportProviderOptions,\r\n} from \"../../models/applicationState\";\r\nimport { IStorageProvider, StorageProviderFactory } from \"../storage/storageProviderFactory\";\r\nimport { IAssetProvider, AssetProviderFactory } from \"../storage/assetProviderFactory\";\r\nimport _ from \"lodash\";\r\nimport { AssetService } from \"../../services/assetService\";\r\n\r\n/**\r\n * @name - TF Pascal VOC Records Export Asset State\r\n * @description - Defines the asset type export option\r\n * @member All - Specifies that all assets will be exported\r\n * @member Visited - Specifies that visited (including tagged) assets will be exported\r\n * @member Tagged - Specifies that only tagged assets will be exported\r\n */\r\nexport enum ExportAssetState {\r\n    All = \"all\",\r\n    Visited = \"visited\",\r\n    Tagged = \"tagged\",\r\n}\r\n\r\nexport interface IExportAssetResult {\r\n    asset: IAssetMetadata;\r\n    success: boolean;\r\n    error?: string;\r\n}\r\n\r\nexport interface IExportResults {\r\n    completed: IExportAssetResult[];\r\n    errors: IExportAssetResult[];\r\n    count: number;\r\n}\r\n\r\n/**\r\n * @name - IExportProvider\r\n * @description - Defines the required interface for all VoTT export providers\r\n */\r\nexport interface IExportProvider {\r\n    /**\r\n     * Gets or set the project to be exported\r\n     */\r\n    project: IProject;\r\n\r\n    /**\r\n     * Exports the configured project for specified export configuration\r\n     */\r\n    export(): Promise<void> | Promise<IExportResults>;\r\n    save?(exportFormat: IExportFormat): Promise<any>;\r\n}\r\n\r\n/**\r\n * Base class implementation for all VoTT export providers\r\n * Provides quick access to the configured projects asset & storage providers\r\n */\r\nexport abstract class ExportProvider\r\n    <TOptions extends IExportProviderOptions = IExportProviderOptions> implements IExportProvider {\r\n    private storageProviderInstance: IStorageProvider;\r\n    private assetProviderInstance: IAssetProvider;\r\n    private assetService: AssetService;\r\n\r\n    constructor(public project: IProject, protected options?: TOptions) {\r\n        Guard.null(project);\r\n        this.assetService = new AssetService(this.project);\r\n    }\r\n\r\n    public abstract export(): Promise<void> | Promise<IExportResults>;\r\n\r\n    /**\r\n     * Gets the assets that are configured to be exported based on the configured asset state\r\n     */\r\n    public async getAssetsForExport(): Promise<IAssetMetadata[]> {\r\n        let predicate: (asset: IAsset) => boolean = null;\r\n\r\n        const getProjectAssets = () => Promise.resolve(_.values(this.project.assets));\r\n        const getAllAssets = async () => {\r\n            const projectAssets = await getProjectAssets();\r\n\r\n            return _(projectAssets)\r\n                .concat((await this.assetProvider.getAssets()))\r\n                .uniqBy((asset) => asset.id)\r\n                .value();\r\n        };\r\n\r\n        let getAssetsFunc: () => Promise<IAsset[]> = getProjectAssets;\r\n\r\n        switch (this.options.assetState) {\r\n            case ExportAssetState.Visited:\r\n                predicate = (asset) => asset.state === AssetState.Visited || asset.state === AssetState.Tagged;\r\n                break;\r\n            case ExportAssetState.Tagged:\r\n                predicate = (asset) => asset.state === AssetState.Tagged;\r\n                break;\r\n            case ExportAssetState.All:\r\n            default:\r\n                getAssetsFunc = getAllAssets;\r\n                predicate = () => true;\r\n                break;\r\n        }\r\n\r\n        return (await getAssetsFunc())\r\n            .filter((asset) => asset.type !== AssetType.Video)\r\n            .filter(predicate)\r\n            .mapAsync(async (asset) => await this.assetService.getAssetMetadata(asset));\r\n    }\r\n\r\n    /**\r\n     * Gets the storage provider for the current project\r\n     */\r\n    protected get storageProvider(): IStorageProvider {\r\n        if (this.storageProviderInstance) {\r\n            return this.storageProviderInstance;\r\n        }\r\n\r\n        this.storageProviderInstance = StorageProviderFactory.create(\r\n            this.project.targetConnection.providerType,\r\n            this.project.targetConnection.providerOptions,\r\n        );\r\n\r\n        return this.storageProviderInstance;\r\n    }\r\n\r\n    /**\r\n     * Gets the asset provider for the current project\r\n     */\r\n    protected get assetProvider(): IAssetProvider {\r\n        if (this.assetProviderInstance) {\r\n            return this.assetProviderInstance;\r\n        }\r\n\r\n        this.assetProviderInstance = AssetProviderFactory.create(\r\n            this.project.sourceConnection.providerType,\r\n            this.project.sourceConnection.providerOptions,\r\n        );\r\n\r\n        return this.assetProviderInstance;\r\n    }\r\n}\r\n","import Guard from \"../../../../common/guard\";\r\nimport { KeyboardManager, KeyEventType } from \"./keyboardManager\";\r\nimport { IKeyboardBindingProps } from \"../keyboardBinding/keyboardBinding\";\r\nimport { AppError, ErrorCode } from \"../../../../models/applicationState\";\r\n\r\n/**\r\n * A map of keyboard event registrations\r\n */\r\nexport interface IKeyboardRegistrations {\r\n    [keyEventType: string]: {\r\n        [key: string]: IKeyboardBindingProps,\r\n    };\r\n}\r\n\r\n/**\r\n * An event handler that responds to keyboard events\r\n */\r\nexport type KeyboardEventHandler = (evt?: KeyboardEvent) => void;\r\n\r\n/**\r\n * Managers keyboard event registrations\r\n */\r\nexport class KeyboardRegistrationManager {\r\n    private registrations: IKeyboardRegistrations = {};\r\n\r\n    /**\r\n     * Registers a keyboard binding and returns a function to deregister that binding\r\n     * @param binding Properties for keyboard binding (type of key event, keyCodes, handler, etc.)\r\n     * @returns a function for deregistering the keyboard binding\r\n     */\r\n    public registerBinding = (binding: IKeyboardBindingProps) => {\r\n        const {keyEventType, accelerators, handler, displayName} = binding;\r\n        Guard.null(keyEventType);\r\n        Guard.expression(accelerators, (keyCodes) => keyCodes.length > 0);\r\n        Guard.null(handler);\r\n\r\n        let eventTypeRegistrations = this.registrations[keyEventType];\r\n        if (!eventTypeRegistrations) {\r\n            eventTypeRegistrations = {};\r\n            this.registrations[keyEventType] = eventTypeRegistrations;\r\n        }\r\n\r\n        accelerators.forEach((keyCode) => {\r\n            const currentBinding = this.registrations[keyEventType][keyCode];\r\n            if (currentBinding) {\r\n                let error = `Key code ${keyCode} on key event \"${keyEventType}\" `;\r\n                error += `already has binding registered: \"${currentBinding.displayName}.\" `;\r\n                error += `Cannot register binding \"${displayName}\" with the same key code and key event type`;\r\n                throw new AppError(ErrorCode.OverloadedKeyBinding, error);\r\n            }\r\n            this.registrations[keyEventType][keyCode] = binding;\r\n        });\r\n\r\n        return () => {\r\n            binding.accelerators.forEach((keyCode) => {\r\n                delete this.registrations[binding.keyEventType][keyCode];\r\n            });\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets a list of registered event handlers for the specified key code\r\n     * @param keyEventType Type of key event (keydown, keyup, keypress)\r\n     * @param keyCode The key code combination, ex) CmdOrCtrl+1\r\n     */\r\n    public getHandler(keyEventType: KeyEventType, keyCode: string): (evt?: KeyboardEvent) => void {\r\n        Guard.null(keyEventType);\r\n        Guard.null(keyCode);\r\n\r\n        const keyEventTypeRegs = this.registrations[keyEventType];\r\n        return (keyEventTypeRegs && keyEventTypeRegs[keyCode])\r\n            ?\r\n            keyEventTypeRegs[keyCode].handler\r\n            :\r\n            null;\r\n    }\r\n\r\n    /**\r\n     * Invokes all registered event handlers for the specified key code\\\r\n     * @param keyEventType Type of key event (keydown, keyup, keypress)\r\n     * @param keyCode The key code combination, ex) CmdOrCtrl+1\r\n     * @param evt The keyboard event that was raised\r\n     */\r\n    public invokeHandler(keyEventType: KeyEventType, keyCode: string, evt: KeyboardEvent) {\r\n        Guard.null(keyCode);\r\n        Guard.null(evt);\r\n\r\n        const handler = this.getHandler(keyEventType, keyCode);\r\n        if (handler !== null) {\r\n            handler(evt);\r\n        }\r\n    }\r\n\r\n    public getRegistrations = () => {\r\n        return this.registrations;\r\n    }\r\n}\r\n","import _ from \"lodash\";\r\nimport { IToolbarItemMetadata, ToolbarItem } from \"../../react/components/toolbar/toolbarItem\";\r\nimport Guard from \"../../common/guard\";\r\n\r\n/**\r\n * Interface for registering toolbar items\r\n */\r\nexport interface IToolbarItemRegistration {\r\n    component: typeof ToolbarItem;\r\n    config: IToolbarItemMetadata;\r\n}\r\n\r\n/**\r\n * @name - Toolbar Item Factory\r\n * @description - Creates instance of Toolbar Items based on specified options\r\n */\r\nexport class ToolbarItemFactory {\r\n    /**\r\n     * Register Toolbar Item for use in editor page\r\n     * @param component - React component ToolbarItem\r\n     * @param config - Configuration of ToolbarItem\r\n     */\r\n    public static register(config: IToolbarItemMetadata, component: typeof ToolbarItem = ToolbarItem) {\r\n        Guard.null(component);\r\n        Guard.null(config);\r\n\r\n        ToolbarItemFactory.componentRegistry.push({ component, config });\r\n    }\r\n\r\n    /**\r\n     * Get all registered Toolbar Items\r\n     */\r\n    public static getToolbarItems() {\r\n        return [...ToolbarItemFactory.componentRegistry];\r\n    }\r\n\r\n    /**\r\n     * Clear ToolbarItem Registry\r\n     */\r\n    public static reset(): void {\r\n        ToolbarItemFactory.componentRegistry = [];\r\n    }\r\n\r\n    private static componentRegistry: IToolbarItemRegistration[] = [];\r\n}\r\n","import Guard from \"./guard\";\r\nimport { IProject, ISecurityToken, IProviderOptions, ISecureString } from \"../models/applicationState\";\r\nimport { encryptObject, decryptObject } from \"./crypto\";\r\n\r\n/**\r\n * Generates a random integer in provided range\r\n * @param min Lower bound of random number generation - INCLUSIVE\r\n * @param max Upper bound of random number generation - EXCLUSIVE\r\n */\r\nexport function randomIntInRange(min: number, max: number) {\r\n    if (min > max) {\r\n        throw new Error(`min (${min}) can't be bigger than max (${max})`);\r\n    }\r\n\r\n    if (min === max) {\r\n        return min;\r\n    }\r\n\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n\r\n    return Math.floor(Math.random() * (max - min)) + min; // The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\n/**\r\n * Common key codes used throughout application\r\n */\r\nexport const KeyCodes = {\r\n    comma: 188,\r\n    enter: 13,\r\n    backspace: 8,\r\n    ctrl: 17,\r\n    shift: 16,\r\n    tab: 9,\r\n};\r\n\r\n/**\r\n * Generates a query string from the key/values of a JSON object\r\n * @param object The json object\r\n * @returns A value representing a URL compatible query string\r\n */\r\nexport function createQueryString(object: any): string {\r\n    Guard.null(object);\r\n\r\n    const parts: any[] = [];\r\n\r\n    for (const key of Object.getOwnPropertyNames(object)) {\r\n        parts.push(`${key}=${encodeURIComponent(object[key])}`);\r\n    }\r\n\r\n    return parts.join(\"&\");\r\n}\r\n\r\nexport function encodeFileURI(path: string, additionalEncodings?: boolean): string {\r\n    // encodeURI() will not encode: ~!@#$&*()=:/,;?+'\r\n    // extend it to support all of these except # and ?\r\n    // all other non encoded characters are implicitly supported with no reason to encoding them\r\n    const matchString = /(#|\\?)/g;\r\n    const encodings = {\r\n        \"\\#\": \"%23\",\r\n        \"\\?\": \"%3F\",\r\n    };\r\n    const encodedURI = `file:${encodeURI(normalizeSlashes(path))}`;\r\n    if (additionalEncodings) {\r\n        return encodedURI.replace(matchString, (match) => encodings[match]);\r\n    }\r\n    return encodedURI;\r\n}\r\n\r\nexport function normalizeSlashes(path: string): string {\r\n    return path.replace(/\\\\/g, \"/\");\r\n}\r\n\r\n/**\r\n * Encrypts sensitive settings for the specified project and returns the result\r\n * @param project The project to encrypt\r\n * @param securityToken The security token used to encrypt the project\r\n */\r\nexport function encryptProject(project: IProject, securityToken: ISecurityToken): IProject {\r\n    const encrypted: IProject = {\r\n        ...project,\r\n        sourceConnection: { ...project.sourceConnection },\r\n        targetConnection: { ...project.targetConnection },\r\n        exportFormat: project.exportFormat ? { ...project.exportFormat } : null,\r\n    };\r\n\r\n    encrypted.sourceConnection.providerOptions =\r\n        encryptProviderOptions(project.sourceConnection.providerOptions, securityToken.key);\r\n    encrypted.targetConnection.providerOptions =\r\n        encryptProviderOptions(project.targetConnection.providerOptions, securityToken.key);\r\n\r\n    if (encrypted.exportFormat) {\r\n        encrypted.exportFormat.providerOptions =\r\n            encryptProviderOptions(project.exportFormat.providerOptions, securityToken.key);\r\n    }\r\n\r\n    return encrypted;\r\n}\r\n\r\n/**\r\n * Decrypts sensitive settings for the specified project and return the result\r\n * @param project The project to decrypt\r\n * @param securityToken The security token used to decrypt the project\r\n */\r\nexport function decryptProject(project: IProject, securityToken: ISecurityToken): IProject {\r\n    const decrypted: IProject = {\r\n        ...project,\r\n        sourceConnection: { ...project.sourceConnection },\r\n        targetConnection: { ...project.targetConnection },\r\n        exportFormat: project.exportFormat ? { ...project.exportFormat } : null,\r\n    };\r\n\r\n    decrypted.sourceConnection.providerOptions =\r\n        decryptProviderOptions(decrypted.sourceConnection.providerOptions, securityToken.key);\r\n    decrypted.targetConnection.providerOptions =\r\n        decryptProviderOptions(decrypted.targetConnection.providerOptions, securityToken.key);\r\n\r\n    if (decrypted.exportFormat) {\r\n        decrypted.exportFormat.providerOptions =\r\n            decryptProviderOptions(decrypted.exportFormat.providerOptions, securityToken.key);\r\n    }\r\n\r\n    return decrypted;\r\n}\r\n\r\nfunction encryptProviderOptions(providerOptions: IProviderOptions | ISecureString, secret: string): ISecureString {\r\n    if (!providerOptions) {\r\n        return null;\r\n    }\r\n\r\n    if (providerOptions.encrypted) {\r\n        return providerOptions as ISecureString;\r\n    }\r\n\r\n    return {\r\n        encrypted: encryptObject(providerOptions, secret),\r\n    };\r\n}\r\n\r\nfunction decryptProviderOptions<T = IProviderOptions>(providerOptions: IProviderOptions | ISecureString, secret): T {\r\n    const secureString = providerOptions as ISecureString;\r\n    if (!(secureString && secureString.encrypted)) {\r\n        return providerOptions as T;\r\n    }\r\n\r\n    return decryptObject(providerOptions.encrypted, secret) as T;\r\n}\r\n","var map = {\n\t\"./azureBlobStorage.json\": 874,\n\t\"./azureBlobStorage.ui.json\": 452,\n\t\"./bingImageSearch.json\": 875,\n\t\"./bingImageSearch.ui.json\": 453,\n\t\"./localFileSystemProxy.json\": 876,\n\t\"./localFileSystemProxy.ui.json\": 454\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 873;","var map = {\n\t\"./azureBlobStorage.ui.json\": 452,\n\t\"./bingImageSearch.ui.json\": 453,\n\t\"./localFileSystemProxy.ui.json\": 454\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 877;","import Guard from \"../../common/guard\";\r\nimport { IExportProvider } from \"./exportProvider\";\r\nimport { IProject } from \"../../models/applicationState\";\r\n\r\nexport interface IExportProviderRegistrationOptions {\r\n    name: string;\r\n    displayName: string;\r\n    description?: string;\r\n    factory: (project: IProject, options?: any) => IExportProvider;\r\n}\r\n\r\n/**\r\n * @name - Export Provider Factory\r\n * @description - Creates instance of export providers based on request provider type\r\n */\r\nexport class ExportProviderFactory {\r\n\r\n    /**\r\n     * @returns Dictionary of registered providers\r\n     */\r\n    public static get providers() {\r\n        return { ...ExportProviderFactory.providerRegistry };\r\n    }\r\n\r\n    /**\r\n     * @returns Options from specified default provider\r\n     */\r\n    public static get defaultProvider() {\r\n        return ExportProviderFactory.defaultProviderOptions;\r\n    }\r\n\r\n    /**\r\n     * Registers a factory method for the specified export provider type\r\n     * @param options - The options to use when registering an export provider\r\n     */\r\n    public static register(options: IExportProviderRegistrationOptions) {\r\n        Guard.null(options);\r\n        Guard.empty(options.name);\r\n        Guard.empty(options.displayName);\r\n        Guard.null(options.factory);\r\n\r\n        // The first provider registered will be the default\r\n        if (ExportProviderFactory.defaultProviderOptions === null) {\r\n            ExportProviderFactory.defaultProviderOptions = options;\r\n        }\r\n        ExportProviderFactory.providerRegistry[options.name] = options;\r\n    }\r\n\r\n    /**\r\n     * Creates new instances of the specified export provider\r\n     * @param name - The name of the export provider to instantiate\r\n     * @param project - The project to load into the export provider\r\n     * @param options  - The provider specific options for exporting\r\n     */\r\n    public static create(name: string, project: IProject, options?: any): IExportProvider {\r\n        Guard.empty(name);\r\n        Guard.null(project);\r\n\r\n        const handler = ExportProviderFactory.providerRegistry[name];\r\n        if (!handler) {\r\n            throw new Error(`No export provider has been registered with name '${name}'`);\r\n        }\r\n\r\n        return handler.factory(project, options);\r\n    }\r\n\r\n    /**\r\n     * Create export provider from project\r\n     * @param project VoTT project\r\n     */\r\n    public static createFromProject(project: IProject): IExportProvider {\r\n        return ExportProviderFactory.create(\r\n            project.exportFormat.providerType,\r\n            project,\r\n            project.exportFormat.providerOptions,\r\n        );\r\n    }\r\n\r\n    private static providerRegistry: { [id: string]: IExportProviderRegistrationOptions } = {};\r\n    private static defaultProviderOptions: IExportProviderRegistrationOptions = null;\r\n}\r\n"],"sourceRoot":""}